
SympleSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08008580  08008580  00018580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000054  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000100  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000067c  20000000  080089f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0002067c  2**0
                  CONTENTS
  9 .bss          000002bc  2000067c  2000067c  0002067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  20000938  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d9a  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000488a  00000000  00000000  00045446  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009a7a  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e30  00000000  00000000  00053750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001150  00000000  00000000  00054580  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094a3  00000000  00000000  000556d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000539c  00000000  00000000  0005eb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00063f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f70  00000000  00000000  00063f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000067c 	.word	0x2000067c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008564 	.word	0x08008564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000680 	.word	0x20000680
 80001cc:	08008564 	.word	0x08008564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f001 b8f6 	b.w	8001da4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <selfrel_offset31>:
 8000eac:	6803      	ldr	r3, [r0, #0]
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	bf4c      	ite	mi
 8000eb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000eb6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000eba:	4418      	add	r0, r3
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <search_EIT_table>:
 8000ec0:	b361      	cbz	r1, 8000f1c <search_EIT_table+0x5c>
 8000ec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec6:	f101 3aff 	add.w	sl, r1, #4294967295
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4606      	mov	r6, r0
 8000ece:	46d1      	mov	r9, sl
 8000ed0:	2700      	movs	r7, #0
 8000ed2:	eb07 0409 	add.w	r4, r7, r9
 8000ed6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000eda:	1064      	asrs	r4, r4, #1
 8000edc:	00e5      	lsls	r5, r4, #3
 8000ede:	1971      	adds	r1, r6, r5
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	f7ff ffe3 	bl	8000eac <selfrel_offset31>
 8000ee6:	45a2      	cmp	sl, r4
 8000ee8:	4683      	mov	fp, r0
 8000eea:	f105 0008 	add.w	r0, r5, #8
 8000eee:	4430      	add	r0, r6
 8000ef0:	d009      	beq.n	8000f06 <search_EIT_table+0x46>
 8000ef2:	f7ff ffdb 	bl	8000eac <selfrel_offset31>
 8000ef6:	45c3      	cmp	fp, r8
 8000ef8:	f100 30ff 	add.w	r0, r0, #4294967295
 8000efc:	d805      	bhi.n	8000f0a <search_EIT_table+0x4a>
 8000efe:	4540      	cmp	r0, r8
 8000f00:	d209      	bcs.n	8000f16 <search_EIT_table+0x56>
 8000f02:	1c67      	adds	r7, r4, #1
 8000f04:	e7e5      	b.n	8000ed2 <search_EIT_table+0x12>
 8000f06:	45c3      	cmp	fp, r8
 8000f08:	d905      	bls.n	8000f16 <search_EIT_table+0x56>
 8000f0a:	42a7      	cmp	r7, r4
 8000f0c:	d002      	beq.n	8000f14 <search_EIT_table+0x54>
 8000f0e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000f12:	e7de      	b.n	8000ed2 <search_EIT_table+0x12>
 8000f14:	2100      	movs	r1, #0
 8000f16:	4608      	mov	r0, r1
 8000f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4770      	bx	lr

08000f20 <__gnu_unwind_get_pr_addr>:
 8000f20:	2801      	cmp	r0, #1
 8000f22:	d007      	beq.n	8000f34 <__gnu_unwind_get_pr_addr+0x14>
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d007      	beq.n	8000f38 <__gnu_unwind_get_pr_addr+0x18>
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__gnu_unwind_get_pr_addr+0x1c>)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	4618      	moveq	r0, r3
 8000f30:	2000      	movne	r0, #0
 8000f32:	4770      	bx	lr
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <__gnu_unwind_get_pr_addr+0x20>)
 8000f36:	4770      	bx	lr
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <__gnu_unwind_get_pr_addr+0x24>)
 8000f3a:	4770      	bx	lr
 8000f3c:	08001625 	.word	0x08001625
 8000f40:	08001629 	.word	0x08001629
 8000f44:	0800162d 	.word	0x0800162d

08000f48 <get_eit_entry>:
 8000f48:	b530      	push	{r4, r5, lr}
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <get_eit_entry+0x94>)
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	4604      	mov	r4, r0
 8000f50:	1e8d      	subs	r5, r1, #2
 8000f52:	b37b      	cbz	r3, 8000fb4 <get_eit_entry+0x6c>
 8000f54:	a901      	add	r1, sp, #4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f3af 8000 	nop.w
 8000f5c:	b320      	cbz	r0, 8000fa8 <get_eit_entry+0x60>
 8000f5e:	9901      	ldr	r1, [sp, #4]
 8000f60:	462a      	mov	r2, r5
 8000f62:	f7ff ffad 	bl	8000ec0 <search_EIT_table>
 8000f66:	4601      	mov	r1, r0
 8000f68:	b1f0      	cbz	r0, 8000fa8 <get_eit_entry+0x60>
 8000f6a:	f7ff ff9f 	bl	8000eac <selfrel_offset31>
 8000f6e:	684b      	ldr	r3, [r1, #4]
 8000f70:	64a0      	str	r0, [r4, #72]	; 0x48
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d012      	beq.n	8000f9c <get_eit_entry+0x54>
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f101 0004 	add.w	r0, r1, #4
 8000f7c:	db20      	blt.n	8000fc0 <get_eit_entry+0x78>
 8000f7e:	f7ff ff95 	bl	8000eac <selfrel_offset31>
 8000f82:	2300      	movs	r3, #0
 8000f84:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000f86:	6523      	str	r3, [r4, #80]	; 0x50
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db1c      	blt.n	8000fc8 <get_eit_entry+0x80>
 8000f8e:	f7ff ff8d 	bl	8000eac <selfrel_offset31>
 8000f92:	2300      	movs	r3, #0
 8000f94:	6120      	str	r0, [r4, #16]
 8000f96:	4618      	mov	r0, r3
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd30      	pop	{r4, r5, pc}
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6123      	str	r3, [r4, #16]
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6123      	str	r3, [r4, #16]
 8000fac:	2309      	movs	r3, #9
 8000fae:	4618      	mov	r0, r3
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd30      	pop	{r4, r5, pc}
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <get_eit_entry+0x98>)
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <get_eit_entry+0x9c>)
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	10c9      	asrs	r1, r1, #3
 8000fbc:	9101      	str	r1, [sp, #4]
 8000fbe:	e7cf      	b.n	8000f60 <get_eit_entry+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8000fc6:	e7df      	b.n	8000f88 <get_eit_entry+0x40>
 8000fc8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fcc:	f7ff ffa8 	bl	8000f20 <__gnu_unwind_get_pr_addr>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	6120      	str	r0, [r4, #16]
 8000fd4:	bf14      	ite	ne
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	2309      	moveq	r3, #9
 8000fda:	e7dc      	b.n	8000f96 <get_eit_entry+0x4e>
 8000fdc:	00000000 	.word	0x00000000
 8000fe0:	080089ec 	.word	0x080089ec
 8000fe4:	080088ec 	.word	0x080088ec

08000fe8 <restore_non_core_regs>:
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	07da      	lsls	r2, r3, #31
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	d406      	bmi.n	8001000 <restore_non_core_regs+0x18>
 8000ff2:	079b      	lsls	r3, r3, #30
 8000ff4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000ff8:	d509      	bpl.n	800100e <restore_non_core_regs+0x26>
 8000ffa:	f000 fc51 	bl	80018a0 <__gnu_Unwind_Restore_VFP_D>
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	0759      	lsls	r1, r3, #29
 8001002:	d509      	bpl.n	8001018 <restore_non_core_regs+0x30>
 8001004:	071a      	lsls	r2, r3, #28
 8001006:	d50e      	bpl.n	8001026 <restore_non_core_regs+0x3e>
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d513      	bpl.n	8001034 <restore_non_core_regs+0x4c>
 800100c:	bd10      	pop	{r4, pc}
 800100e:	f000 fc3f 	bl	8001890 <__gnu_Unwind_Restore_VFP>
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	0759      	lsls	r1, r3, #29
 8001016:	d4f5      	bmi.n	8001004 <restore_non_core_regs+0x1c>
 8001018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800101c:	f000 fc48 	bl	80018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	071a      	lsls	r2, r3, #28
 8001024:	d4f0      	bmi.n	8001008 <restore_non_core_regs+0x20>
 8001026:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800102a:	f000 fc49 	bl	80018c0 <__gnu_Unwind_Restore_WMMXD>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	06db      	lsls	r3, r3, #27
 8001032:	d4eb      	bmi.n	800100c <restore_non_core_regs+0x24>
 8001034:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800103c:	f000 bc84 	b.w	8001948 <__gnu_Unwind_Restore_WMMXC>

08001040 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	b103      	cbz	r3, 8001046 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001044:	4403      	add	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__gnu_unwind_24bit.isra.1>:
 800104c:	2009      	movs	r0, #9
 800104e:	4770      	bx	lr

08001050 <_Unwind_DebugHook>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <unwind_phase2>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	e008      	b.n	800106e <unwind_phase2+0x1a>
 800105c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800105e:	6163      	str	r3, [r4, #20]
 8001060:	462a      	mov	r2, r5
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	4621      	mov	r1, r4
 8001066:	2001      	movs	r0, #1
 8001068:	4798      	blx	r3
 800106a:	2808      	cmp	r0, #8
 800106c:	d108      	bne.n	8001080 <unwind_phase2+0x2c>
 800106e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff ff69 	bl	8000f48 <get_eit_entry>
 8001076:	4606      	mov	r6, r0
 8001078:	2800      	cmp	r0, #0
 800107a:	d0ef      	beq.n	800105c <unwind_phase2+0x8>
 800107c:	f007 fa27 	bl	80084ce <abort>
 8001080:	2807      	cmp	r0, #7
 8001082:	d1fb      	bne.n	800107c <unwind_phase2+0x28>
 8001084:	4630      	mov	r0, r6
 8001086:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001088:	f7ff ffe2 	bl	8001050 <_Unwind_DebugHook>
 800108c:	1d28      	adds	r0, r5, #4
 800108e:	f000 fbf3 	bl	8001878 <__restore_core_regs>
 8001092:	bf00      	nop

08001094 <unwind_phase2_forced>:
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	1d0c      	adds	r4, r1, #4
 800109a:	4605      	mov	r5, r0
 800109c:	4692      	mov	sl, r2
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80010a4:	ae03      	add	r6, sp, #12
 80010a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010b4:	ac02      	add	r4, sp, #8
 80010b6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80010ba:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80010be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80010c2:	2300      	movs	r3, #0
 80010c4:	4628      	mov	r0, r5
 80010c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	f7ff ff3d 	bl	8000f48 <get_eit_entry>
 80010ce:	f1ba 0f00 	cmp.w	sl, #0
 80010d2:	4607      	mov	r7, r0
 80010d4:	bf14      	ite	ne
 80010d6:	260a      	movne	r6, #10
 80010d8:	2609      	moveq	r6, #9
 80010da:	b17f      	cbz	r7, 80010fc <unwind_phase2_forced+0x68>
 80010dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010de:	f046 0110 	orr.w	r1, r6, #16
 80010e2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80010e6:	462a      	mov	r2, r5
 80010e8:	6463      	str	r3, [r4, #68]	; 0x44
 80010ea:	2001      	movs	r0, #1
 80010ec:	462b      	mov	r3, r5
 80010ee:	47c0      	blx	r8
 80010f0:	bb78      	cbnz	r0, 8001152 <unwind_phase2_forced+0xbe>
 80010f2:	4638      	mov	r0, r7
 80010f4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80010f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010fe:	616b      	str	r3, [r5, #20]
 8001100:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001104:	4621      	mov	r1, r4
 8001106:	a87a      	add	r0, sp, #488	; 0x1e8
 8001108:	f006 f96a 	bl	80073e0 <memcpy>
 800110c:	692b      	ldr	r3, [r5, #16]
 800110e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001110:	4629      	mov	r1, r5
 8001112:	4630      	mov	r0, r6
 8001114:	4798      	blx	r3
 8001116:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001118:	4682      	mov	sl, r0
 800111a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800111e:	4631      	mov	r1, r6
 8001120:	6463      	str	r3, [r4, #68]	; 0x44
 8001122:	462a      	mov	r2, r5
 8001124:	462b      	mov	r3, r5
 8001126:	2001      	movs	r0, #1
 8001128:	47c0      	blx	r8
 800112a:	b990      	cbnz	r0, 8001152 <unwind_phase2_forced+0xbe>
 800112c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001130:	a97a      	add	r1, sp, #488	; 0x1e8
 8001132:	4620      	mov	r0, r4
 8001134:	f006 f954 	bl	80073e0 <memcpy>
 8001138:	f1ba 0f08 	cmp.w	sl, #8
 800113c:	d106      	bne.n	800114c <unwind_phase2_forced+0xb8>
 800113e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001140:	4628      	mov	r0, r5
 8001142:	f7ff ff01 	bl	8000f48 <get_eit_entry>
 8001146:	2609      	movs	r6, #9
 8001148:	4607      	mov	r7, r0
 800114a:	e7c6      	b.n	80010da <unwind_phase2_forced+0x46>
 800114c:	f1ba 0f07 	cmp.w	sl, #7
 8001150:	d005      	beq.n	800115e <unwind_phase2_forced+0xca>
 8001152:	2709      	movs	r7, #9
 8001154:	4638      	mov	r0, r7
 8001156:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115e:	4638      	mov	r0, r7
 8001160:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001162:	f7ff ff75 	bl	8001050 <_Unwind_DebugHook>
 8001166:	a803      	add	r0, sp, #12
 8001168:	f000 fb86 	bl	8001878 <__restore_core_regs>

0800116c <_Unwind_GetCFA>:
 800116c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800116e:	4770      	bx	lr

08001170 <__gnu_Unwind_RaiseException>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001174:	640b      	str	r3, [r1, #64]	; 0x40
 8001176:	1d0e      	adds	r6, r1, #4
 8001178:	460f      	mov	r7, r1
 800117a:	4604      	mov	r4, r0
 800117c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117e:	b0f9      	sub	sp, #484	; 0x1e4
 8001180:	ad01      	add	r5, sp, #4
 8001182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001190:	f04f 36ff 	mov.w	r6, #4294967295
 8001194:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001198:	9600      	str	r6, [sp, #0]
 800119a:	e006      	b.n	80011aa <__gnu_Unwind_RaiseException+0x3a>
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	466a      	mov	r2, sp
 80011a0:	4621      	mov	r1, r4
 80011a2:	4798      	blx	r3
 80011a4:	2808      	cmp	r0, #8
 80011a6:	4605      	mov	r5, r0
 80011a8:	d108      	bne.n	80011bc <__gnu_Unwind_RaiseException+0x4c>
 80011aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fecb 	bl	8000f48 <get_eit_entry>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d0f2      	beq.n	800119c <__gnu_Unwind_RaiseException+0x2c>
 80011b6:	2009      	movs	r0, #9
 80011b8:	b079      	add	sp, #484	; 0x1e4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	4668      	mov	r0, sp
 80011be:	f7ff ff13 	bl	8000fe8 <restore_non_core_regs>
 80011c2:	2d06      	cmp	r5, #6
 80011c4:	d1f7      	bne.n	80011b6 <__gnu_Unwind_RaiseException+0x46>
 80011c6:	4639      	mov	r1, r7
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff ff43 	bl	8001054 <unwind_phase2>
 80011ce:	bf00      	nop

080011d0 <__gnu_Unwind_ForcedUnwind>:
 80011d0:	b430      	push	{r4, r5}
 80011d2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80011d4:	60c1      	str	r1, [r0, #12]
 80011d6:	6182      	str	r2, [r0, #24]
 80011d8:	4619      	mov	r1, r3
 80011da:	641d      	str	r5, [r3, #64]	; 0x40
 80011dc:	2200      	movs	r2, #0
 80011de:	bc30      	pop	{r4, r5}
 80011e0:	e758      	b.n	8001094 <unwind_phase2_forced>
 80011e2:	bf00      	nop

080011e4 <__gnu_Unwind_Resume>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	68c6      	ldr	r6, [r0, #12]
 80011e8:	6943      	ldr	r3, [r0, #20]
 80011ea:	640b      	str	r3, [r1, #64]	; 0x40
 80011ec:	b126      	cbz	r6, 80011f8 <__gnu_Unwind_Resume+0x14>
 80011ee:	2201      	movs	r2, #1
 80011f0:	f7ff ff50 	bl	8001094 <unwind_phase2_forced>
 80011f4:	f007 f96b 	bl	80084ce <abort>
 80011f8:	6903      	ldr	r3, [r0, #16]
 80011fa:	460a      	mov	r2, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4601      	mov	r1, r0
 8001202:	2002      	movs	r0, #2
 8001204:	4798      	blx	r3
 8001206:	2807      	cmp	r0, #7
 8001208:	d007      	beq.n	800121a <__gnu_Unwind_Resume+0x36>
 800120a:	2808      	cmp	r0, #8
 800120c:	d103      	bne.n	8001216 <__gnu_Unwind_Resume+0x32>
 800120e:	4629      	mov	r1, r5
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff1f 	bl	8001054 <unwind_phase2>
 8001216:	f007 f95a 	bl	80084ce <abort>
 800121a:	4630      	mov	r0, r6
 800121c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800121e:	f7ff ff17 	bl	8001050 <_Unwind_DebugHook>
 8001222:	1d28      	adds	r0, r5, #4
 8001224:	f000 fb28 	bl	8001878 <__restore_core_regs>

08001228 <__gnu_Unwind_Resume_or_Rethrow>:
 8001228:	68c2      	ldr	r2, [r0, #12]
 800122a:	b11a      	cbz	r2, 8001234 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800122c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800122e:	640a      	str	r2, [r1, #64]	; 0x40
 8001230:	2200      	movs	r2, #0
 8001232:	e72f      	b.n	8001094 <unwind_phase2_forced>
 8001234:	e79c      	b.n	8001170 <__gnu_Unwind_RaiseException>
 8001236:	bf00      	nop

08001238 <_Unwind_Complete>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <_Unwind_DeleteException>:
 800123c:	6883      	ldr	r3, [r0, #8]
 800123e:	b113      	cbz	r3, 8001246 <_Unwind_DeleteException+0xa>
 8001240:	4601      	mov	r1, r0
 8001242:	2001      	movs	r0, #1
 8001244:	4718      	bx	r3
 8001246:	4770      	bx	lr

08001248 <_Unwind_VRS_Get>:
 8001248:	b500      	push	{lr}
 800124a:	2904      	cmp	r1, #4
 800124c:	d807      	bhi.n	800125e <_Unwind_VRS_Get+0x16>
 800124e:	e8df f001 	tbb	[pc, r1]
 8001252:	0903      	.short	0x0903
 8001254:	0906      	.short	0x0906
 8001256:	09          	.byte	0x09
 8001257:	00          	.byte	0x00
 8001258:	b90b      	cbnz	r3, 800125e <_Unwind_VRS_Get+0x16>
 800125a:	2a0f      	cmp	r2, #15
 800125c:	d905      	bls.n	800126a <_Unwind_VRS_Get+0x22>
 800125e:	2002      	movs	r0, #2
 8001260:	f85d fb04 	ldr.w	pc, [sp], #4
 8001264:	2001      	movs	r0, #1
 8001266:	f85d fb04 	ldr.w	pc, [sp], #4
 800126a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800126e:	4618      	mov	r0, r3
 8001270:	6853      	ldr	r3, [r2, #4]
 8001272:	9a01      	ldr	r2, [sp, #4]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	f85d fb04 	ldr.w	pc, [sp], #4
 800127a:	bf00      	nop

0800127c <_Unwind_GetGR>:
 800127c:	b510      	push	{r4, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	2300      	movs	r3, #0
 8001282:	ac03      	add	r4, sp, #12
 8001284:	460a      	mov	r2, r1
 8001286:	9400      	str	r4, [sp, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff ffdd 	bl	8001248 <_Unwind_VRS_Get>
 800128e:	9803      	ldr	r0, [sp, #12]
 8001290:	b004      	add	sp, #16
 8001292:	bd10      	pop	{r4, pc}

08001294 <_Unwind_VRS_Set>:
 8001294:	b500      	push	{lr}
 8001296:	2904      	cmp	r1, #4
 8001298:	d807      	bhi.n	80012aa <_Unwind_VRS_Set+0x16>
 800129a:	e8df f001 	tbb	[pc, r1]
 800129e:	0903      	.short	0x0903
 80012a0:	0906      	.short	0x0906
 80012a2:	09          	.byte	0x09
 80012a3:	00          	.byte	0x00
 80012a4:	b90b      	cbnz	r3, 80012aa <_Unwind_VRS_Set+0x16>
 80012a6:	2a0f      	cmp	r2, #15
 80012a8:	d905      	bls.n	80012b6 <_Unwind_VRS_Set+0x22>
 80012aa:	2002      	movs	r0, #2
 80012ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b0:	2001      	movs	r0, #1
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b6:	9901      	ldr	r1, [sp, #4]
 80012b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012bc:	6809      	ldr	r1, [r1, #0]
 80012be:	6051      	str	r1, [r2, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c6:	bf00      	nop

080012c8 <_Unwind_SetGR>:
 80012c8:	b510      	push	{r4, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	ac04      	add	r4, sp, #16
 80012ce:	2300      	movs	r3, #0
 80012d0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80012d4:	460a      	mov	r2, r1
 80012d6:	9400      	str	r4, [sp, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff ffdb 	bl	8001294 <_Unwind_VRS_Set>
 80012de:	b004      	add	sp, #16
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop

080012e4 <__gnu_Unwind_Backtrace>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	1d15      	adds	r5, r2, #4
 80012ec:	4607      	mov	r7, r0
 80012ee:	460e      	mov	r6, r1
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80012f6:	ac17      	add	r4, sp, #92	; 0x5c
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001306:	f04f 35ff 	mov.w	r5, #4294967295
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800130e:	9516      	str	r5, [sp, #88]	; 0x58
 8001310:	e010      	b.n	8001334 <__gnu_Unwind_Backtrace+0x50>
 8001312:	a816      	add	r0, sp, #88	; 0x58
 8001314:	f7ff ffd8 	bl	80012c8 <_Unwind_SetGR>
 8001318:	4631      	mov	r1, r6
 800131a:	a816      	add	r0, sp, #88	; 0x58
 800131c:	47b8      	blx	r7
 800131e:	aa16      	add	r2, sp, #88	; 0x58
 8001320:	4669      	mov	r1, sp
 8001322:	b978      	cbnz	r0, 8001344 <__gnu_Unwind_Backtrace+0x60>
 8001324:	9b04      	ldr	r3, [sp, #16]
 8001326:	2008      	movs	r0, #8
 8001328:	4798      	blx	r3
 800132a:	2805      	cmp	r0, #5
 800132c:	4604      	mov	r4, r0
 800132e:	d00a      	beq.n	8001346 <__gnu_Unwind_Backtrace+0x62>
 8001330:	2809      	cmp	r0, #9
 8001332:	d007      	beq.n	8001344 <__gnu_Unwind_Backtrace+0x60>
 8001334:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001336:	4668      	mov	r0, sp
 8001338:	f7ff fe06 	bl	8000f48 <get_eit_entry>
 800133c:	466a      	mov	r2, sp
 800133e:	210c      	movs	r1, #12
 8001340:	2800      	cmp	r0, #0
 8001342:	d0e6      	beq.n	8001312 <__gnu_Unwind_Backtrace+0x2e>
 8001344:	2409      	movs	r4, #9
 8001346:	a816      	add	r0, sp, #88	; 0x58
 8001348:	f7ff fe4e 	bl	8000fe8 <restore_non_core_regs>
 800134c:	4620      	mov	r0, r4
 800134e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001354 <__gnu_unwind_pr_common>:
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	460d      	mov	r5, r1
 800135a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800135c:	b08b      	sub	sp, #44	; 0x2c
 800135e:	1d0c      	adds	r4, r1, #4
 8001360:	6809      	ldr	r1, [r1, #0]
 8001362:	9107      	str	r1, [sp, #28]
 8001364:	4691      	mov	r9, r2
 8001366:	9408      	str	r4, [sp, #32]
 8001368:	f000 0b03 	and.w	fp, r0, #3
 800136c:	461e      	mov	r6, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d160      	bne.n	8001434 <__gnu_unwind_pr_common+0xe0>
 8001372:	0209      	lsls	r1, r1, #8
 8001374:	2303      	movs	r3, #3
 8001376:	9107      	str	r1, [sp, #28]
 8001378:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800137c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001380:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001382:	f1bb 0f02 	cmp.w	fp, #2
 8001386:	bf08      	it	eq
 8001388:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800138a:	f013 0301 	ands.w	r3, r3, #1
 800138e:	d140      	bne.n	8001412 <__gnu_unwind_pr_common+0xbe>
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f000 0308 	and.w	r3, r0, #8
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	f8d4 8000 	ldr.w	r8, [r4]
 800139c:	f1b8 0f00 	cmp.w	r8, #0
 80013a0:	d039      	beq.n	8001416 <__gnu_unwind_pr_common+0xc2>
 80013a2:	2e02      	cmp	r6, #2
 80013a4:	d043      	beq.n	800142e <__gnu_unwind_pr_common+0xda>
 80013a6:	f8b4 8000 	ldrh.w	r8, [r4]
 80013aa:	8867      	ldrh	r7, [r4, #2]
 80013ac:	3404      	adds	r4, #4
 80013ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80013b0:	f027 0a01 	bic.w	sl, r7, #1
 80013b4:	210f      	movs	r1, #15
 80013b6:	4648      	mov	r0, r9
 80013b8:	449a      	add	sl, r3
 80013ba:	f7ff ff5f 	bl	800127c <_Unwind_GetGR>
 80013be:	4582      	cmp	sl, r0
 80013c0:	d833      	bhi.n	800142a <__gnu_unwind_pr_common+0xd6>
 80013c2:	f028 0301 	bic.w	r3, r8, #1
 80013c6:	449a      	add	sl, r3
 80013c8:	4550      	cmp	r0, sl
 80013ca:	bf2c      	ite	cs
 80013cc:	2000      	movcs	r0, #0
 80013ce:	2001      	movcc	r0, #1
 80013d0:	007f      	lsls	r7, r7, #1
 80013d2:	f007 0702 	and.w	r7, r7, #2
 80013d6:	f008 0801 	and.w	r8, r8, #1
 80013da:	ea47 0708 	orr.w	r7, r7, r8
 80013de:	2f01      	cmp	r7, #1
 80013e0:	d03e      	beq.n	8001460 <__gnu_unwind_pr_common+0x10c>
 80013e2:	d335      	bcc.n	8001450 <__gnu_unwind_pr_common+0xfc>
 80013e4:	2f02      	cmp	r7, #2
 80013e6:	d11c      	bne.n	8001422 <__gnu_unwind_pr_common+0xce>
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	f1bb 0f00 	cmp.w	fp, #0
 80013f4:	d176      	bne.n	80014e4 <__gnu_unwind_pr_common+0x190>
 80013f6:	b128      	cbz	r0, 8001404 <__gnu_unwind_pr_common+0xb0>
 80013f8:	9903      	ldr	r1, [sp, #12]
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d07e      	beq.n	80014fc <__gnu_unwind_pr_common+0x1a8>
 80013fe:	2a00      	cmp	r2, #0
 8001400:	f000 80a6 	beq.w	8001550 <__gnu_unwind_pr_common+0x1fc>
 8001404:	2b00      	cmp	r3, #0
 8001406:	db77      	blt.n	80014f8 <__gnu_unwind_pr_common+0x1a4>
 8001408:	9b02      	ldr	r3, [sp, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001410:	e7c2      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2e02      	cmp	r6, #2
 8001418:	dd3e      	ble.n	8001498 <__gnu_unwind_pr_common+0x144>
 800141a:	f7ff fe17 	bl	800104c <__gnu_unwind_24bit.isra.1>
 800141e:	2800      	cmp	r0, #0
 8001420:	d040      	beq.n	80014a4 <__gnu_unwind_pr_common+0x150>
 8001422:	2009      	movs	r0, #9
 8001424:	b00b      	add	sp, #44	; 0x2c
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142a:	2000      	movs	r0, #0
 800142c:	e7d0      	b.n	80013d0 <__gnu_unwind_pr_common+0x7c>
 800142e:	6867      	ldr	r7, [r4, #4]
 8001430:	3408      	adds	r4, #8
 8001432:	e7bc      	b.n	80013ae <__gnu_unwind_pr_common+0x5a>
 8001434:	2b02      	cmp	r3, #2
 8001436:	dca3      	bgt.n	8001380 <__gnu_unwind_pr_common+0x2c>
 8001438:	0c0b      	lsrs	r3, r1, #16
 800143a:	b2da      	uxtb	r2, r3
 800143c:	0409      	lsls	r1, r1, #16
 800143e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001442:	2302      	movs	r3, #2
 8001444:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001448:	9107      	str	r1, [sp, #28]
 800144a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800144e:	e797      	b.n	8001380 <__gnu_unwind_pr_common+0x2c>
 8001450:	f1bb 0f00 	cmp.w	fp, #0
 8001454:	d002      	beq.n	800145c <__gnu_unwind_pr_common+0x108>
 8001456:	2800      	cmp	r0, #0
 8001458:	f040 80bd 	bne.w	80015d6 <__gnu_unwind_pr_common+0x282>
 800145c:	3404      	adds	r4, #4
 800145e:	e79b      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001460:	f1bb 0f00 	cmp.w	fp, #0
 8001464:	d125      	bne.n	80014b2 <__gnu_unwind_pr_common+0x15e>
 8001466:	b1a8      	cbz	r0, 8001494 <__gnu_unwind_pr_common+0x140>
 8001468:	e894 000c 	ldmia.w	r4, {r2, r3}
 800146c:	1c99      	adds	r1, r3, #2
 800146e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001472:	d0d6      	beq.n	8001422 <__gnu_unwind_pr_common+0xce>
 8001474:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001478:	3301      	adds	r3, #1
 800147a:	9106      	str	r1, [sp, #24]
 800147c:	f000 80a3 	beq.w	80015c6 <__gnu_unwind_pr_common+0x272>
 8001480:	1d20      	adds	r0, r4, #4
 8001482:	f7ff fddd 	bl	8001040 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001486:	ab06      	add	r3, sp, #24
 8001488:	4601      	mov	r1, r0
 800148a:	4628      	mov	r0, r5
 800148c:	f3af 8000 	nop.w
 8001490:	2800      	cmp	r0, #0
 8001492:	d177      	bne.n	8001584 <__gnu_unwind_pr_common+0x230>
 8001494:	3408      	adds	r4, #8
 8001496:	e77f      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001498:	a907      	add	r1, sp, #28
 800149a:	4648      	mov	r0, r9
 800149c:	f000 faee 	bl	8001a7c <__gnu_unwind_execute>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d1be      	bne.n	8001422 <__gnu_unwind_pr_common+0xce>
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d15c      	bne.n	8001564 <__gnu_unwind_pr_common+0x210>
 80014aa:	2008      	movs	r0, #8
 80014ac:	b00b      	add	sp, #44	; 0x2c
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	210d      	movs	r1, #13
 80014b4:	4648      	mov	r0, r9
 80014b6:	6a2f      	ldr	r7, [r5, #32]
 80014b8:	f7ff fee0 	bl	800127c <_Unwind_GetGR>
 80014bc:	4287      	cmp	r7, r0
 80014be:	d1e9      	bne.n	8001494 <__gnu_unwind_pr_common+0x140>
 80014c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d1e6      	bne.n	8001494 <__gnu_unwind_pr_common+0x140>
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fcf0 	bl	8000eac <selfrel_offset31>
 80014cc:	210f      	movs	r1, #15
 80014ce:	4602      	mov	r2, r0
 80014d0:	4648      	mov	r0, r9
 80014d2:	f7ff fef9 	bl	80012c8 <_Unwind_SetGR>
 80014d6:	4648      	mov	r0, r9
 80014d8:	462a      	mov	r2, r5
 80014da:	2100      	movs	r1, #0
 80014dc:	f7ff fef4 	bl	80012c8 <_Unwind_SetGR>
 80014e0:	2007      	movs	r0, #7
 80014e2:	e79f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80014e4:	210d      	movs	r1, #13
 80014e6:	4648      	mov	r0, r9
 80014e8:	6a2f      	ldr	r7, [r5, #32]
 80014ea:	f7ff fec7 	bl	800127c <_Unwind_GetGR>
 80014ee:	4287      	cmp	r7, r0
 80014f0:	d058      	beq.n	80015a4 <__gnu_unwind_pr_common+0x250>
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da87      	bge.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80014f8:	3404      	adds	r4, #4
 80014fa:	e785      	b.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80014fc:	9b02      	ldr	r3, [sp, #8]
 80014fe:	b33b      	cbz	r3, 8001550 <__gnu_unwind_pr_common+0x1fc>
 8001500:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001504:	1d27      	adds	r7, r4, #4
 8001506:	f8cd b010 	str.w	fp, [sp, #16]
 800150a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800150e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001512:	9605      	str	r6, [sp, #20]
 8001514:	46a3      	mov	fp, r4
 8001516:	461c      	mov	r4, r3
 8001518:	e002      	b.n	8001520 <__gnu_unwind_pr_common+0x1cc>
 800151a:	45b2      	cmp	sl, r6
 800151c:	46b0      	mov	r8, r6
 800151e:	d016      	beq.n	800154e <__gnu_unwind_pr_common+0x1fa>
 8001520:	4638      	mov	r0, r7
 8001522:	9406      	str	r4, [sp, #24]
 8001524:	f7ff fd8c 	bl	8001040 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001528:	ab06      	add	r3, sp, #24
 800152a:	4601      	mov	r1, r0
 800152c:	2200      	movs	r2, #0
 800152e:	4628      	mov	r0, r5
 8001530:	f3af 8000 	nop.w
 8001534:	f108 0601 	add.w	r6, r8, #1
 8001538:	3704      	adds	r7, #4
 800153a:	2800      	cmp	r0, #0
 800153c:	d0ed      	beq.n	800151a <__gnu_unwind_pr_common+0x1c6>
 800153e:	9b02      	ldr	r3, [sp, #8]
 8001540:	9e05      	ldr	r6, [sp, #20]
 8001542:	4543      	cmp	r3, r8
 8001544:	465c      	mov	r4, fp
 8001546:	f8dd b010 	ldr.w	fp, [sp, #16]
 800154a:	d1d2      	bne.n	80014f2 <__gnu_unwind_pr_common+0x19e>
 800154c:	e000      	b.n	8001550 <__gnu_unwind_pr_common+0x1fc>
 800154e:	465c      	mov	r4, fp
 8001550:	4648      	mov	r0, r9
 8001552:	210d      	movs	r1, #13
 8001554:	f7ff fe92 	bl	800127c <_Unwind_GetGR>
 8001558:	9b06      	ldr	r3, [sp, #24]
 800155a:	6228      	str	r0, [r5, #32]
 800155c:	62ac      	str	r4, [r5, #40]	; 0x28
 800155e:	626b      	str	r3, [r5, #36]	; 0x24
 8001560:	2006      	movs	r0, #6
 8001562:	e75f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001564:	210f      	movs	r1, #15
 8001566:	4648      	mov	r0, r9
 8001568:	f7ff fe88 	bl	800127c <_Unwind_GetGR>
 800156c:	210e      	movs	r1, #14
 800156e:	4602      	mov	r2, r0
 8001570:	4648      	mov	r0, r9
 8001572:	f7ff fea9 	bl	80012c8 <_Unwind_SetGR>
 8001576:	4648      	mov	r0, r9
 8001578:	4a29      	ldr	r2, [pc, #164]	; (8001620 <__gnu_unwind_pr_common+0x2cc>)
 800157a:	210f      	movs	r1, #15
 800157c:	f7ff fea4 	bl	80012c8 <_Unwind_SetGR>
 8001580:	2007      	movs	r0, #7
 8001582:	e74f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001584:	4607      	mov	r7, r0
 8001586:	210d      	movs	r1, #13
 8001588:	4648      	mov	r0, r9
 800158a:	f7ff fe77 	bl	800127c <_Unwind_GetGR>
 800158e:	2f02      	cmp	r7, #2
 8001590:	6228      	str	r0, [r5, #32]
 8001592:	d11d      	bne.n	80015d0 <__gnu_unwind_pr_common+0x27c>
 8001594:	462b      	mov	r3, r5
 8001596:	9a06      	ldr	r2, [sp, #24]
 8001598:	f843 2f2c 	str.w	r2, [r3, #44]!
 800159c:	626b      	str	r3, [r5, #36]	; 0x24
 800159e:	62ac      	str	r4, [r5, #40]	; 0x28
 80015a0:	2006      	movs	r0, #6
 80015a2:	e73f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80015a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015a6:	429c      	cmp	r4, r3
 80015a8:	d1a3      	bne.n	80014f2 <__gnu_unwind_pr_common+0x19e>
 80015aa:	2204      	movs	r2, #4
 80015ac:	2700      	movs	r7, #0
 80015ae:	18a3      	adds	r3, r4, r2
 80015b0:	9902      	ldr	r1, [sp, #8]
 80015b2:	62a9      	str	r1, [r5, #40]	; 0x28
 80015b4:	62ef      	str	r7, [r5, #44]	; 0x2c
 80015b6:	632a      	str	r2, [r5, #48]	; 0x30
 80015b8:	636b      	str	r3, [r5, #52]	; 0x34
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	42bb      	cmp	r3, r7
 80015be:	db1d      	blt.n	80015fc <__gnu_unwind_pr_common+0x2a8>
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	e720      	b.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80015c6:	4648      	mov	r0, r9
 80015c8:	210d      	movs	r1, #13
 80015ca:	f7ff fe57 	bl	800127c <_Unwind_GetGR>
 80015ce:	6228      	str	r0, [r5, #32]
 80015d0:	9b06      	ldr	r3, [sp, #24]
 80015d2:	626b      	str	r3, [r5, #36]	; 0x24
 80015d4:	e7e3      	b.n	800159e <__gnu_unwind_pr_common+0x24a>
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fc68 	bl	8000eac <selfrel_offset31>
 80015dc:	3404      	adds	r4, #4
 80015de:	4606      	mov	r6, r0
 80015e0:	63ac      	str	r4, [r5, #56]	; 0x38
 80015e2:	4628      	mov	r0, r5
 80015e4:	f3af 8000 	nop.w
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f43f af1a 	beq.w	8001422 <__gnu_unwind_pr_common+0xce>
 80015ee:	4648      	mov	r0, r9
 80015f0:	4632      	mov	r2, r6
 80015f2:	210f      	movs	r1, #15
 80015f4:	f7ff fe68 	bl	80012c8 <_Unwind_SetGR>
 80015f8:	2007      	movs	r0, #7
 80015fa:	e713      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80015fc:	4608      	mov	r0, r1
 80015fe:	3001      	adds	r0, #1
 8001600:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001604:	f7ff fc52 	bl	8000eac <selfrel_offset31>
 8001608:	210f      	movs	r1, #15
 800160a:	4602      	mov	r2, r0
 800160c:	4648      	mov	r0, r9
 800160e:	f7ff fe5b 	bl	80012c8 <_Unwind_SetGR>
 8001612:	4648      	mov	r0, r9
 8001614:	462a      	mov	r2, r5
 8001616:	4639      	mov	r1, r7
 8001618:	f7ff fe56 	bl	80012c8 <_Unwind_SetGR>
 800161c:	2007      	movs	r0, #7
 800161e:	e701      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001620:	00000000 	.word	0x00000000

08001624 <__aeabi_unwind_cpp_pr0>:
 8001624:	2300      	movs	r3, #0
 8001626:	e695      	b.n	8001354 <__gnu_unwind_pr_common>

08001628 <__aeabi_unwind_cpp_pr1>:
 8001628:	2301      	movs	r3, #1
 800162a:	e693      	b.n	8001354 <__gnu_unwind_pr_common>

0800162c <__aeabi_unwind_cpp_pr2>:
 800162c:	2302      	movs	r3, #2
 800162e:	e691      	b.n	8001354 <__gnu_unwind_pr_common>

08001630 <_Unwind_VRS_Pop>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	b0c5      	sub	sp, #276	; 0x114
 8001636:	2904      	cmp	r1, #4
 8001638:	d80d      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 800163a:	e8df f001 	tbb	[pc, r1]
 800163e:	0353      	.short	0x0353
 8001640:	310c      	.short	0x310c
 8001642:	0f          	.byte	0x0f
 8001643:	00          	.byte	0x00
 8001644:	2b01      	cmp	r3, #1
 8001646:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800164a:	b295      	uxth	r5, r2
 800164c:	d162      	bne.n	8001714 <_Unwind_VRS_Pop+0xe4>
 800164e:	1972      	adds	r2, r6, r5
 8001650:	2a10      	cmp	r2, #16
 8001652:	f240 809b 	bls.w	800178c <_Unwind_VRS_Pop+0x15c>
 8001656:	2002      	movs	r0, #2
 8001658:	b045      	add	sp, #276	; 0x114
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1fa      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001660:	2a10      	cmp	r2, #16
 8001662:	d8f8      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	06d8      	lsls	r0, r3, #27
 8001668:	f100 80c6 	bmi.w	80017f8 <_Unwind_VRS_Pop+0x1c8>
 800166c:	ae22      	add	r6, sp, #136	; 0x88
 800166e:	4630      	mov	r0, r6
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	f000 f973 	bl	800195c <__gnu_Unwind_Save_WMMXC>
 8001676:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	2300      	movs	r3, #0
 800167c:	2501      	movs	r5, #1
 800167e:	fa05 f103 	lsl.w	r1, r5, r3
 8001682:	4211      	tst	r1, r2
 8001684:	d003      	beq.n	800168e <_Unwind_VRS_Pop+0x5e>
 8001686:	6801      	ldr	r1, [r0, #0]
 8001688:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800168c:	3004      	adds	r0, #4
 800168e:	3301      	adds	r3, #1
 8001690:	2b04      	cmp	r3, #4
 8001692:	d1f4      	bne.n	800167e <_Unwind_VRS_Pop+0x4e>
 8001694:	63a0      	str	r0, [r4, #56]	; 0x38
 8001696:	4630      	mov	r0, r6
 8001698:	f000 f956 	bl	8001948 <__gnu_Unwind_Restore_WMMXC>
 800169c:	2000      	movs	r0, #0
 800169e:	e7db      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d1d8      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016a4:	0c15      	lsrs	r5, r2, #16
 80016a6:	b297      	uxth	r7, r2
 80016a8:	19eb      	adds	r3, r5, r7
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d8d3      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	071e      	lsls	r6, r3, #28
 80016b2:	f100 80b5 	bmi.w	8001820 <_Unwind_VRS_Pop+0x1f0>
 80016b6:	ae22      	add	r6, sp, #136	; 0x88
 80016b8:	4630      	mov	r0, r6
 80016ba:	f000 f923 	bl	8001904 <__gnu_Unwind_Save_WMMXD>
 80016be:	00ed      	lsls	r5, r5, #3
 80016c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016c2:	b14f      	cbz	r7, 80016d8 <_Unwind_VRS_Pop+0xa8>
 80016c4:	3d04      	subs	r5, #4
 80016c6:	1971      	adds	r1, r6, r5
 80016c8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80016cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80016d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80016d4:	4283      	cmp	r3, r0
 80016d6:	d1f9      	bne.n	80016cc <_Unwind_VRS_Pop+0x9c>
 80016d8:	4630      	mov	r0, r6
 80016da:	63a3      	str	r3, [r4, #56]	; 0x38
 80016dc:	f000 f8f0 	bl	80018c0 <__gnu_Unwind_Restore_WMMXD>
 80016e0:	2000      	movs	r0, #0
 80016e2:	e7b9      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1b6      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80016ea:	b297      	uxth	r7, r2
 80016ec:	1d20      	adds	r0, r4, #4
 80016ee:	2601      	movs	r6, #1
 80016f0:	fa06 f103 	lsl.w	r1, r6, r3
 80016f4:	4239      	tst	r1, r7
 80016f6:	f103 0301 	add.w	r3, r3, #1
 80016fa:	d002      	beq.n	8001702 <_Unwind_VRS_Pop+0xd2>
 80016fc:	6829      	ldr	r1, [r5, #0]
 80016fe:	6001      	str	r1, [r0, #0]
 8001700:	3504      	adds	r5, #4
 8001702:	2b10      	cmp	r3, #16
 8001704:	f100 0004 	add.w	r0, r0, #4
 8001708:	d1f2      	bne.n	80016f0 <_Unwind_VRS_Pop+0xc0>
 800170a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800170e:	d13b      	bne.n	8001788 <_Unwind_VRS_Pop+0x158>
 8001710:	63a5      	str	r5, [r4, #56]	; 0x38
 8001712:	e7a1      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 8001714:	2b05      	cmp	r3, #5
 8001716:	d19e      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001718:	1977      	adds	r7, r6, r5
 800171a:	2f20      	cmp	r7, #32
 800171c:	d89b      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 800171e:	2e0f      	cmp	r6, #15
 8001720:	d966      	bls.n	80017f0 <_Unwind_VRS_Pop+0x1c0>
 8001722:	462f      	mov	r7, r5
 8001724:	2d00      	cmp	r5, #0
 8001726:	d13a      	bne.n	800179e <_Unwind_VRS_Pop+0x16e>
 8001728:	462a      	mov	r2, r5
 800172a:	2700      	movs	r7, #0
 800172c:	2a00      	cmp	r2, #0
 800172e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001730:	dd72      	ble.n	8001818 <_Unwind_VRS_Pop+0x1e8>
 8001732:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001736:	4601      	mov	r1, r0
 8001738:	a844      	add	r0, sp, #272	; 0x110
 800173a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800173e:	388c      	subs	r0, #140	; 0x8c
 8001740:	f851 5b04 	ldr.w	r5, [r1], #4
 8001744:	f840 5f04 	str.w	r5, [r0, #4]!
 8001748:	4291      	cmp	r1, r2
 800174a:	d1f9      	bne.n	8001740 <_Unwind_VRS_Pop+0x110>
 800174c:	4608      	mov	r0, r1
 800174e:	b197      	cbz	r7, 8001776 <_Unwind_VRS_Pop+0x146>
 8001750:	2e10      	cmp	r6, #16
 8001752:	4632      	mov	r2, r6
 8001754:	a944      	add	r1, sp, #272	; 0x110
 8001756:	bf38      	it	cc
 8001758:	2210      	movcc	r2, #16
 800175a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800175e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001762:	0079      	lsls	r1, r7, #1
 8001764:	3a04      	subs	r2, #4
 8001766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800176a:	f850 5b04 	ldr.w	r5, [r0], #4
 800176e:	f842 5f04 	str.w	r5, [r2, #4]!
 8001772:	4288      	cmp	r0, r1
 8001774:	d1f9      	bne.n	800176a <_Unwind_VRS_Pop+0x13a>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d048      	beq.n	800180c <_Unwind_VRS_Pop+0x1dc>
 800177a:	2e0f      	cmp	r6, #15
 800177c:	63a1      	str	r1, [r4, #56]	; 0x38
 800177e:	d933      	bls.n	80017e8 <_Unwind_VRS_Pop+0x1b8>
 8001780:	b117      	cbz	r7, 8001788 <_Unwind_VRS_Pop+0x158>
 8001782:	a802      	add	r0, sp, #8
 8001784:	f000 f894 	bl	80018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001788:	2000      	movs	r0, #0
 800178a:	e765      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 800178c:	2e0f      	cmp	r6, #15
 800178e:	f63f af62 	bhi.w	8001656 <_Unwind_VRS_Pop+0x26>
 8001792:	2700      	movs	r7, #0
 8001794:	6822      	ldr	r2, [r4, #0]
 8001796:	07d1      	lsls	r1, r2, #31
 8001798:	d417      	bmi.n	80017ca <_Unwind_VRS_Pop+0x19a>
 800179a:	2f00      	cmp	r7, #0
 800179c:	d060      	beq.n	8001860 <_Unwind_VRS_Pop+0x230>
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	0751      	lsls	r1, r2, #29
 80017a2:	d445      	bmi.n	8001830 <_Unwind_VRS_Pop+0x200>
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d04d      	beq.n	8001844 <_Unwind_VRS_Pop+0x214>
 80017a8:	2e0f      	cmp	r6, #15
 80017aa:	d806      	bhi.n	80017ba <_Unwind_VRS_Pop+0x18a>
 80017ac:	a822      	add	r0, sp, #136	; 0x88
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f000 f87a 	bl	80018a8 <__gnu_Unwind_Save_VFP_D>
 80017b4:	9b01      	ldr	r3, [sp, #4]
 80017b6:	2f00      	cmp	r7, #0
 80017b8:	d0b6      	beq.n	8001728 <_Unwind_VRS_Pop+0xf8>
 80017ba:	a802      	add	r0, sp, #8
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f000 f87b 	bl	80018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	f1c6 0210 	rsb	r2, r6, #16
 80017c8:	e7b0      	b.n	800172c <_Unwind_VRS_Pop+0xfc>
 80017ca:	f022 0101 	bic.w	r1, r2, #1
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	6021      	str	r1, [r4, #0]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	4620      	mov	r0, r4
 80017d6:	d03b      	beq.n	8001850 <_Unwind_VRS_Pop+0x220>
 80017d8:	f022 0203 	bic.w	r2, r2, #3
 80017dc:	f840 2b48 	str.w	r2, [r0], #72
 80017e0:	f000 f85a 	bl	8001898 <__gnu_Unwind_Save_VFP>
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	e7d8      	b.n	800179a <_Unwind_VRS_Pop+0x16a>
 80017e8:	a822      	add	r0, sp, #136	; 0x88
 80017ea:	f000 f859 	bl	80018a0 <__gnu_Unwind_Restore_VFP_D>
 80017ee:	e7c7      	b.n	8001780 <_Unwind_VRS_Pop+0x150>
 80017f0:	2f10      	cmp	r7, #16
 80017f2:	d9ce      	bls.n	8001792 <_Unwind_VRS_Pop+0x162>
 80017f4:	3f10      	subs	r7, #16
 80017f6:	e7cd      	b.n	8001794 <_Unwind_VRS_Pop+0x164>
 80017f8:	f023 0310 	bic.w	r3, r3, #16
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	f000 f8aa 	bl	800195c <__gnu_Unwind_Save_WMMXC>
 8001808:	9a01      	ldr	r2, [sp, #4]
 800180a:	e72f      	b.n	800166c <_Unwind_VRS_Pop+0x3c>
 800180c:	3104      	adds	r1, #4
 800180e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001810:	a822      	add	r0, sp, #136	; 0x88
 8001812:	f000 f83d 	bl	8001890 <__gnu_Unwind_Restore_VFP>
 8001816:	e7b7      	b.n	8001788 <_Unwind_VRS_Pop+0x158>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d199      	bne.n	8001750 <_Unwind_VRS_Pop+0x120>
 800181c:	4601      	mov	r1, r0
 800181e:	e7aa      	b.n	8001776 <_Unwind_VRS_Pop+0x146>
 8001820:	f023 0308 	bic.w	r3, r3, #8
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800182a:	f000 f86b 	bl	8001904 <__gnu_Unwind_Save_WMMXD>
 800182e:	e742      	b.n	80016b6 <_Unwind_VRS_Pop+0x86>
 8001830:	4620      	mov	r0, r4
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	f840 2bd0 	str.w	r2, [r0], #208
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f000 f83c 	bl	80018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	e7af      	b.n	80017a4 <_Unwind_VRS_Pop+0x174>
 8001844:	a822      	add	r0, sp, #136	; 0x88
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	f000 f826 	bl	8001898 <__gnu_Unwind_Save_VFP>
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	e7b9      	b.n	80017c4 <_Unwind_VRS_Pop+0x194>
 8001850:	f041 0102 	orr.w	r1, r1, #2
 8001854:	f840 1b48 	str.w	r1, [r0], #72
 8001858:	f000 f826 	bl	80018a8 <__gnu_Unwind_Save_VFP_D>
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	e79c      	b.n	800179a <_Unwind_VRS_Pop+0x16a>
 8001860:	2b01      	cmp	r3, #1
 8001862:	d003      	beq.n	800186c <_Unwind_VRS_Pop+0x23c>
 8001864:	2e0f      	cmp	r6, #15
 8001866:	f63f af5f 	bhi.w	8001728 <_Unwind_VRS_Pop+0xf8>
 800186a:	e79f      	b.n	80017ac <_Unwind_VRS_Pop+0x17c>
 800186c:	a822      	add	r0, sp, #136	; 0x88
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	f000 f812 	bl	8001898 <__gnu_Unwind_Save_VFP>
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	e757      	b.n	8001728 <_Unwind_VRS_Pop+0xf8>

08001878 <__restore_core_regs>:
 8001878:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800187c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001880:	469c      	mov	ip, r3
 8001882:	46a6      	mov	lr, r4
 8001884:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001888:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800188c:	46e5      	mov	sp, ip
 800188e:	bd00      	pop	{pc}

08001890 <__gnu_Unwind_Restore_VFP>:
 8001890:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <__gnu_Unwind_Save_VFP>:
 8001898:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <__gnu_Unwind_Restore_VFP_D>:
 80018a0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <__gnu_Unwind_Save_VFP_D>:
 80018a8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80018b0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80018b8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <__gnu_Unwind_Restore_WMMXD>:
 80018c0:	ecf0 0102 	ldfe	f0, [r0], #8
 80018c4:	ecf0 1102 	ldfe	f1, [r0], #8
 80018c8:	ecf0 2102 	ldfe	f2, [r0], #8
 80018cc:	ecf0 3102 	ldfe	f3, [r0], #8
 80018d0:	ecf0 4102 	ldfe	f4, [r0], #8
 80018d4:	ecf0 5102 	ldfe	f5, [r0], #8
 80018d8:	ecf0 6102 	ldfe	f6, [r0], #8
 80018dc:	ecf0 7102 	ldfe	f7, [r0], #8
 80018e0:	ecf0 8102 	ldfp	f0, [r0], #8
 80018e4:	ecf0 9102 	ldfp	f1, [r0], #8
 80018e8:	ecf0 a102 	ldfp	f2, [r0], #8
 80018ec:	ecf0 b102 	ldfp	f3, [r0], #8
 80018f0:	ecf0 c102 	ldfp	f4, [r0], #8
 80018f4:	ecf0 d102 	ldfp	f5, [r0], #8
 80018f8:	ecf0 e102 	ldfp	f6, [r0], #8
 80018fc:	ecf0 f102 	ldfp	f7, [r0], #8
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <__gnu_Unwind_Save_WMMXD>:
 8001904:	ece0 0102 	stfe	f0, [r0], #8
 8001908:	ece0 1102 	stfe	f1, [r0], #8
 800190c:	ece0 2102 	stfe	f2, [r0], #8
 8001910:	ece0 3102 	stfe	f3, [r0], #8
 8001914:	ece0 4102 	stfe	f4, [r0], #8
 8001918:	ece0 5102 	stfe	f5, [r0], #8
 800191c:	ece0 6102 	stfe	f6, [r0], #8
 8001920:	ece0 7102 	stfe	f7, [r0], #8
 8001924:	ece0 8102 	stfp	f0, [r0], #8
 8001928:	ece0 9102 	stfp	f1, [r0], #8
 800192c:	ece0 a102 	stfp	f2, [r0], #8
 8001930:	ece0 b102 	stfp	f3, [r0], #8
 8001934:	ece0 c102 	stfp	f4, [r0], #8
 8001938:	ece0 d102 	stfp	f5, [r0], #8
 800193c:	ece0 e102 	stfp	f6, [r0], #8
 8001940:	ece0 f102 	stfp	f7, [r0], #8
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <__gnu_Unwind_Restore_WMMXC>:
 8001948:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800194c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001950:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001954:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <__gnu_Unwind_Save_WMMXC>:
 800195c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001960:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001964:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001968:	fca0 b101 	stc2	1, cr11, [r0], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <_Unwind_RaiseException>:
 8001970:	46ec      	mov	ip, sp
 8001972:	b500      	push	{lr}
 8001974:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001978:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001984:	a901      	add	r1, sp, #4
 8001986:	f7ff fbf3 	bl	8001170 <__gnu_Unwind_RaiseException>
 800198a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800198e:	b012      	add	sp, #72	; 0x48
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <_Unwind_Resume>:
 8001994:	46ec      	mov	ip, sp
 8001996:	b500      	push	{lr}
 8001998:	e92d 5000 	stmdb	sp!, {ip, lr}
 800199c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	f7ff fc1b 	bl	80011e4 <__gnu_Unwind_Resume>
 80019ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019b2:	b012      	add	sp, #72	; 0x48
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <_Unwind_Resume_or_Rethrow>:
 80019b8:	46ec      	mov	ip, sp
 80019ba:	b500      	push	{lr}
 80019bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019cc:	a901      	add	r1, sp, #4
 80019ce:	f7ff fc2b 	bl	8001228 <__gnu_Unwind_Resume_or_Rethrow>
 80019d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019d6:	b012      	add	sp, #72	; 0x48
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <_Unwind_ForcedUnwind>:
 80019dc:	46ec      	mov	ip, sp
 80019de:	b500      	push	{lr}
 80019e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f0:	ab01      	add	r3, sp, #4
 80019f2:	f7ff fbed 	bl	80011d0 <__gnu_Unwind_ForcedUnwind>
 80019f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019fa:	b012      	add	sp, #72	; 0x48
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <_Unwind_Backtrace>:
 8001a00:	46ec      	mov	ip, sp
 8001a02:	b500      	push	{lr}
 8001a04:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a08:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a14:	aa01      	add	r2, sp, #4
 8001a16:	f7ff fc65 	bl	80012e4 <__gnu_Unwind_Backtrace>
 8001a1a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a1e:	b012      	add	sp, #72	; 0x48
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <next_unwind_byte>:
 8001a24:	7a02      	ldrb	r2, [r0, #8]
 8001a26:	b91a      	cbnz	r2, 8001a30 <next_unwind_byte+0xc>
 8001a28:	7a43      	ldrb	r3, [r0, #9]
 8001a2a:	b943      	cbnz	r3, 8001a3e <next_unwind_byte+0x1a>
 8001a2c:	20b0      	movs	r0, #176	; 0xb0
 8001a2e:	4770      	bx	lr
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	3a01      	subs	r2, #1
 8001a34:	7202      	strb	r2, [r0, #8]
 8001a36:	021a      	lsls	r2, r3, #8
 8001a38:	6002      	str	r2, [r0, #0]
 8001a3a:	0e18      	lsrs	r0, r3, #24
 8001a3c:	4770      	bx	lr
 8001a3e:	6842      	ldr	r2, [r0, #4]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b410      	push	{r4}
 8001a44:	7243      	strb	r3, [r0, #9]
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	2103      	movs	r1, #3
 8001a4a:	1d14      	adds	r4, r2, #4
 8001a4c:	7201      	strb	r1, [r0, #8]
 8001a4e:	021a      	lsls	r2, r3, #8
 8001a50:	6044      	str	r4, [r0, #4]
 8001a52:	6002      	str	r2, [r0, #0]
 8001a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a58:	0e18      	lsrs	r0, r3, #24
 8001a5a:	4770      	bx	lr

08001a5c <_Unwind_GetGR.constprop.0>:
 8001a5c:	b500      	push	{lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	aa03      	add	r2, sp, #12
 8001a62:	2300      	movs	r3, #0
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	220c      	movs	r2, #12
 8001a6a:	f7ff fbed 	bl	8001248 <_Unwind_VRS_Get>
 8001a6e:	9803      	ldr	r0, [sp, #12]
 8001a70:	b005      	add	sp, #20
 8001a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a76:	bf00      	nop

08001a78 <unwind_UCB_from_context>:
 8001a78:	e7f0      	b.n	8001a5c <_Unwind_GetGR.constprop.0>
 8001a7a:	bf00      	nop

08001a7c <__gnu_unwind_execute>:
 8001a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a80:	4606      	mov	r6, r0
 8001a82:	b085      	sub	sp, #20
 8001a84:	460f      	mov	r7, r1
 8001a86:	f04f 0800 	mov.w	r8, #0
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	f7ff ffca 	bl	8001a24 <next_unwind_byte>
 8001a90:	28b0      	cmp	r0, #176	; 0xb0
 8001a92:	4604      	mov	r4, r0
 8001a94:	d023      	beq.n	8001ade <__gnu_unwind_execute+0x62>
 8001a96:	0605      	lsls	r5, r0, #24
 8001a98:	d427      	bmi.n	8001aea <__gnu_unwind_execute+0x6e>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f10d 090c 	add.w	r9, sp, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	0085      	lsls	r5, r0, #2
 8001aa4:	220d      	movs	r2, #13
 8001aa6:	f8cd 9000 	str.w	r9, [sp]
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f7ff fbcc 	bl	8001248 <_Unwind_VRS_Get>
 8001ab0:	b2ed      	uxtb	r5, r5
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	f8cd 9000 	str.w	r9, [sp]
 8001ab8:	0660      	lsls	r0, r4, #25
 8001aba:	f105 0504 	add.w	r5, r5, #4
 8001abe:	bf4c      	ite	mi
 8001ac0:	1b5d      	submi	r5, r3, r5
 8001ac2:	18ed      	addpl	r5, r5, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	220d      	movs	r2, #13
 8001aca:	4630      	mov	r0, r6
 8001acc:	9503      	str	r5, [sp, #12]
 8001ace:	f7ff fbe1 	bl	8001294 <_Unwind_VRS_Set>
 8001ad2:	4638      	mov	r0, r7
 8001ad4:	f7ff ffa6 	bl	8001a24 <next_unwind_byte>
 8001ad8:	28b0      	cmp	r0, #176	; 0xb0
 8001ada:	4604      	mov	r4, r0
 8001adc:	d1db      	bne.n	8001a96 <__gnu_unwind_execute+0x1a>
 8001ade:	f1b8 0f00 	cmp.w	r8, #0
 8001ae2:	f000 8095 	beq.w	8001c10 <__gnu_unwind_execute+0x194>
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	e01c      	b.n	8001b24 <__gnu_unwind_execute+0xa8>
 8001aea:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001aee:	2b80      	cmp	r3, #128	; 0x80
 8001af0:	d05d      	beq.n	8001bae <__gnu_unwind_execute+0x132>
 8001af2:	2b90      	cmp	r3, #144	; 0x90
 8001af4:	d019      	beq.n	8001b2a <__gnu_unwind_execute+0xae>
 8001af6:	2ba0      	cmp	r3, #160	; 0xa0
 8001af8:	d02c      	beq.n	8001b54 <__gnu_unwind_execute+0xd8>
 8001afa:	2bb0      	cmp	r3, #176	; 0xb0
 8001afc:	d03f      	beq.n	8001b7e <__gnu_unwind_execute+0x102>
 8001afe:	2bc0      	cmp	r3, #192	; 0xc0
 8001b00:	d06c      	beq.n	8001bdc <__gnu_unwind_execute+0x160>
 8001b02:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b06:	2bd0      	cmp	r3, #208	; 0xd0
 8001b08:	d10b      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b0a:	f000 0207 	and.w	r2, r0, #7
 8001b0e:	3201      	adds	r2, #1
 8001b10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b14:	2305      	movs	r3, #5
 8001b16:	2101      	movs	r1, #1
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f7ff fd89 	bl	8001630 <_Unwind_VRS_Pop>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d0b3      	beq.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b22:	2009      	movs	r0, #9
 8001b24:	b005      	add	sp, #20
 8001b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2a:	f000 030d 	and.w	r3, r0, #13
 8001b2e:	2b0d      	cmp	r3, #13
 8001b30:	d0f7      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b32:	ad03      	add	r5, sp, #12
 8001b34:	2300      	movs	r3, #0
 8001b36:	f000 020f 	and.w	r2, r0, #15
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	9500      	str	r5, [sp, #0]
 8001b3e:	4630      	mov	r0, r6
 8001b40:	f7ff fb82 	bl	8001248 <_Unwind_VRS_Get>
 8001b44:	2300      	movs	r3, #0
 8001b46:	9500      	str	r5, [sp, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	220d      	movs	r2, #13
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff fba1 	bl	8001294 <_Unwind_VRS_Set>
 8001b52:	e79a      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b54:	43c2      	mvns	r2, r0
 8001b56:	f002 0307 	and.w	r3, r2, #7
 8001b5a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001b5e:	411a      	asrs	r2, r3
 8001b60:	0701      	lsls	r1, r0, #28
 8001b62:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	bf48      	it	mi
 8001b6c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001b70:	4619      	mov	r1, r3
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7ff fd5c 	bl	8001630 <_Unwind_VRS_Pop>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d1d2      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b7c:	e785      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b7e:	28b1      	cmp	r0, #177	; 0xb1
 8001b80:	d057      	beq.n	8001c32 <__gnu_unwind_execute+0x1b6>
 8001b82:	28b2      	cmp	r0, #178	; 0xb2
 8001b84:	d068      	beq.n	8001c58 <__gnu_unwind_execute+0x1dc>
 8001b86:	28b3      	cmp	r0, #179	; 0xb3
 8001b88:	f000 8095 	beq.w	8001cb6 <__gnu_unwind_execute+0x23a>
 8001b8c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001b90:	2bb4      	cmp	r3, #180	; 0xb4
 8001b92:	d0c6      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b94:	f000 0207 	and.w	r2, r0, #7
 8001b98:	3201      	adds	r2, #1
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f7ff fd44 	bl	8001630 <_Unwind_VRS_Pop>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d1ba      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bac:	e76d      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001bae:	4638      	mov	r0, r7
 8001bb0:	f7ff ff38 	bl	8001a24 <next_unwind_byte>
 8001bb4:	0224      	lsls	r4, r4, #8
 8001bb6:	4304      	orrs	r4, r0
 8001bb8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001bbc:	d0b1      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bbe:	0124      	lsls	r4, r4, #4
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	b2a2      	uxth	r2, r4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff fd32 	bl	8001630 <_Unwind_VRS_Pop>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1a8      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bd0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001bd4:	bf18      	it	ne
 8001bd6:	f04f 0801 	movne.w	r8, #1
 8001bda:	e756      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001bdc:	28c6      	cmp	r0, #198	; 0xc6
 8001bde:	d07d      	beq.n	8001cdc <__gnu_unwind_execute+0x260>
 8001be0:	28c7      	cmp	r0, #199	; 0xc7
 8001be2:	f000 8086 	beq.w	8001cf2 <__gnu_unwind_execute+0x276>
 8001be6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001bea:	2bc0      	cmp	r3, #192	; 0xc0
 8001bec:	f000 8094 	beq.w	8001d18 <__gnu_unwind_execute+0x29c>
 8001bf0:	28c8      	cmp	r0, #200	; 0xc8
 8001bf2:	f000 809f 	beq.w	8001d34 <__gnu_unwind_execute+0x2b8>
 8001bf6:	28c9      	cmp	r0, #201	; 0xc9
 8001bf8:	d193      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f7ff ff12 	bl	8001a24 <next_unwind_byte>
 8001c00:	0302      	lsls	r2, r0, #12
 8001c02:	f000 000f 	and.w	r0, r0, #15
 8001c06:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	e781      	b.n	8001b14 <__gnu_unwind_execute+0x98>
 8001c10:	ac03      	add	r4, sp, #12
 8001c12:	4643      	mov	r3, r8
 8001c14:	220e      	movs	r2, #14
 8001c16:	4641      	mov	r1, r8
 8001c18:	9400      	str	r4, [sp, #0]
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff fb14 	bl	8001248 <_Unwind_VRS_Get>
 8001c20:	9400      	str	r4, [sp, #0]
 8001c22:	4630      	mov	r0, r6
 8001c24:	4643      	mov	r3, r8
 8001c26:	220f      	movs	r2, #15
 8001c28:	4641      	mov	r1, r8
 8001c2a:	f7ff fb33 	bl	8001294 <_Unwind_VRS_Set>
 8001c2e:	4640      	mov	r0, r8
 8001c30:	e778      	b.n	8001b24 <__gnu_unwind_execute+0xa8>
 8001c32:	4638      	mov	r0, r7
 8001c34:	f7ff fef6 	bl	8001a24 <next_unwind_byte>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	f43f af72 	beq.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c3e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001c42:	f47f af6e 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f7ff fcf0 	bl	8001630 <_Unwind_VRS_Pop>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f47f af66 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c56:	e718      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f10d 090c 	add.w	r9, sp, #12
 8001c5e:	220d      	movs	r2, #13
 8001c60:	4619      	mov	r1, r3
 8001c62:	f8cd 9000 	str.w	r9, [sp]
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff faee 	bl	8001248 <_Unwind_VRS_Get>
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	f7ff fed9 	bl	8001a24 <next_unwind_byte>
 8001c72:	0602      	lsls	r2, r0, #24
 8001c74:	f04f 0402 	mov.w	r4, #2
 8001c78:	d50c      	bpl.n	8001c94 <__gnu_unwind_execute+0x218>
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001c80:	40a0      	lsls	r0, r4
 8001c82:	4403      	add	r3, r0
 8001c84:	4638      	mov	r0, r7
 8001c86:	9303      	str	r3, [sp, #12]
 8001c88:	f7ff fecc 	bl	8001a24 <next_unwind_byte>
 8001c8c:	0603      	lsls	r3, r0, #24
 8001c8e:	f104 0407 	add.w	r4, r4, #7
 8001c92:	d4f2      	bmi.n	8001c7a <__gnu_unwind_execute+0x1fe>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	f8cd 9000 	str.w	r9, [sp]
 8001c9a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001c9e:	40a2      	lsls	r2, r4
 8001ca0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4414      	add	r4, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	220d      	movs	r2, #13
 8001cac:	4630      	mov	r0, r6
 8001cae:	9403      	str	r4, [sp, #12]
 8001cb0:	f7ff faf0 	bl	8001294 <_Unwind_VRS_Set>
 8001cb4:	e6e9      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	f7ff feb4 	bl	8001a24 <next_unwind_byte>
 8001cbc:	0301      	lsls	r1, r0, #12
 8001cbe:	f000 000f 	and.w	r0, r0, #15
 8001cc2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cc6:	1c42      	adds	r2, r0, #1
 8001cc8:	2301      	movs	r3, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	4630      	mov	r0, r6
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7ff fcae 	bl	8001630 <_Unwind_VRS_Pop>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	f47f af24 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001cda:	e6d6      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001cdc:	4638      	mov	r0, r7
 8001cde:	f7ff fea1 	bl	8001a24 <next_unwind_byte>
 8001ce2:	0301      	lsls	r1, r0, #12
 8001ce4:	f000 000f 	and.w	r0, r0, #15
 8001ce8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cec:	1c42      	adds	r2, r0, #1
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e7eb      	b.n	8001cca <__gnu_unwind_execute+0x24e>
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fe96 	bl	8001a24 <next_unwind_byte>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af12 	beq.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001cfe:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d02:	f47f af0e 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d06:	4602      	mov	r2, r0
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7ff fc90 	bl	8001630 <_Unwind_VRS_Pop>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	f47f af06 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d16:	e6b8      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001d18:	f000 020f 	and.w	r2, r0, #15
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	2303      	movs	r3, #3
 8001d20:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d24:	4619      	mov	r1, r3
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fc82 	bl	8001630 <_Unwind_VRS_Pop>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f47f aef8 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d32:	e6aa      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff fe75 	bl	8001a24 <next_unwind_byte>
 8001d3a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d3e:	f000 030f 	and.w	r3, r0, #15
 8001d42:	3210      	adds	r2, #16
 8001d44:	3301      	adds	r3, #1
 8001d46:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d4a:	e6e3      	b.n	8001b14 <__gnu_unwind_execute+0x98>

08001d4c <__gnu_unwind_frame>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d50:	b084      	sub	sp, #16
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2003      	movs	r0, #3
 8001d56:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d5a:	79dc      	ldrb	r4, [r3, #7]
 8001d5c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d60:	0212      	lsls	r2, r2, #8
 8001d62:	3308      	adds	r3, #8
 8001d64:	4608      	mov	r0, r1
 8001d66:	a901      	add	r1, sp, #4
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	f7ff fe86 	bl	8001a7c <__gnu_unwind_execute>
 8001d70:	b004      	add	sp, #16
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <_Unwind_GetRegionStart>:
 8001d74:	b508      	push	{r3, lr}
 8001d76:	f7ff fe7f 	bl	8001a78 <unwind_UCB_from_context>
 8001d7a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001d7c:	bd08      	pop	{r3, pc}
 8001d7e:	bf00      	nop

08001d80 <_Unwind_GetLanguageSpecificData>:
 8001d80:	b508      	push	{r3, lr}
 8001d82:	f7ff fe79 	bl	8001a78 <unwind_UCB_from_context>
 8001d86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001d88:	79c3      	ldrb	r3, [r0, #7]
 8001d8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001d8e:	3008      	adds	r0, #8
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop

08001d94 <_Unwind_GetTextRelBase>:
 8001d94:	b508      	push	{r3, lr}
 8001d96:	f006 fb9a 	bl	80084ce <abort>
 8001d9a:	bf00      	nop

08001d9c <_Unwind_GetDataRelBase>:
 8001d9c:	b508      	push	{r3, lr}
 8001d9e:	f7ff fff9 	bl	8001d94 <_Unwind_GetTextRelBase>
 8001da2:	bf00      	nop

08001da4 <__aeabi_idiv0>:
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_InitTick+0x3c>)
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_InitTick+0x40>)
{
 8001dae:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	7818      	ldrb	r0, [r3, #0]
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dba:	6810      	ldr	r0, [r2, #0]
 8001dbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dc0:	f000 fe94 	bl	8002aec <HAL_SYSTICK_Config>
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	b958      	cbnz	r0, 8001de0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc8:	2d0f      	cmp	r5, #15
 8001dca:	d809      	bhi.n	8001de0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 fe4a 	bl	8002a6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_InitTick+0x44>)
 8001dda:	4620      	mov	r0, r4
 8001ddc:	601d      	str	r5, [r3, #0]
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x20>)
{
 8001df2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 fe23 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff ffd0 	bl	8001da8 <HAL_InitTick>
  HAL_MspInit();
 8001e08:	f002 fc74 	bl	80046f4 <HAL_MspInit>
}
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	bd08      	pop	{r3, pc}
 8001e10:	40022000 	.word	0x40022000

08001e14 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_IncTick+0x10>)
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_IncTick+0x14>)
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000071c 	.word	0x2000071c
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001e2c:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <HAL_GetTick+0x8>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	2000071c 	.word	0x2000071c

08001e38 <HAL_ADC_ConvCpltCallback>:
 8001e38:	4770      	bx	lr

08001e3a <HAL_ADC_ConvHalfCpltCallback>:
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	4770      	bx	lr

08001e3e <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e3e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e40:	6803      	ldr	r3, [r0, #0]
{
 8001e42:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e44:	6898      	ldr	r0, [r3, #8]
 8001e46:	f000 0003 	and.w	r0, r0, #3
 8001e4a:	2801      	cmp	r0, #1
 8001e4c:	d001      	beq.n	8001e52 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	07d2      	lsls	r2, r2, #31
 8001e56:	d5fa      	bpl.n	8001e4e <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	f002 020d 	and.w	r2, r2, #13
 8001e5e:	2a01      	cmp	r2, #1
 8001e60:	d11b      	bne.n	8001e9a <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	f042 0202 	orr.w	r2, r2, #2
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e6e:	f7ff ffdd 	bl	8001e2c <HAL_GetTick>
 8001e72:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	07db      	lsls	r3, r3, #31
 8001e7a:	d5e8      	bpl.n	8001e4e <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e7c:	f7ff ffd6 	bl	8001e2c <HAL_GetTick>
 8001e80:	1b40      	subs	r0, r0, r5
 8001e82:	2802      	cmp	r0, #2
 8001e84:	d9f6      	bls.n	8001e74 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e88:	f043 0310 	orr.w	r3, r3, #16
 8001e8c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}

08001eac <ADC_Enable>:
{
 8001eac:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	2a01      	cmp	r2, #1
{
 8001eb8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eba:	d104      	bne.n	8001ec6 <ADC_Enable+0x1a>
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	07d2      	lsls	r2, r2, #31
 8001ec0:	d501      	bpl.n	8001ec6 <ADC_Enable+0x1a>
  return HAL_OK;
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <ADC_Enable+0x58>)
 8001eca:	4211      	tst	r1, r2
 8001ecc:	d10f      	bne.n	8001eee <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001ed6:	f7ff ffa9 	bl	8001e2c <HAL_GetTick>
 8001eda:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	07db      	lsls	r3, r3, #31
 8001ee2:	d4ee      	bmi.n	8001ec2 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ee4:	f7ff ffa2 	bl	8001e2c <HAL_GetTick>
 8001ee8:	1b40      	subs	r0, r0, r5
 8001eea:	2802      	cmp	r0, #2
 8001eec:	d9f6      	bls.n	8001edc <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ef0:	f043 0310 	orr.w	r3, r3, #16
 8001ef4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
 8001f00:	bd38      	pop	{r3, r4, r5, pc}
 8001f02:	bf00      	nop
 8001f04:	8000003f 	.word	0x8000003f

08001f08 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f08:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f10:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f12:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8001f1a:	f7ff bf8f 	b.w	8001e3c <HAL_ADC_ErrorCallback>

08001f1e <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001f1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f20:	f7ff bf8b 	b.w	8001e3a <HAL_ADC_ConvHalfCpltCallback>

08001f24 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f24:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f28:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001f2c:	d118      	bne.n	8001f60 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001f3e:	d10c      	bne.n	8001f5a <ADC_DMAConvCplt+0x36>
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	b952      	cbnz	r2, 8001f5a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f4e:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f50:	bf5e      	ittt	pl
 8001f52:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 8001f54:	f042 0201 	orrpl.w	r2, r2, #1
 8001f58:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff bf6c 	b.w	8001e38 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4718      	bx	r3
	...

08001f68 <HAL_ADC_Init>:
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8001f70:	4604      	mov	r4, r0
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f000 80e3 	beq.w	800213e <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f7a:	06d5      	lsls	r5, r2, #27
 8001f7c:	f100 80cc 	bmi.w	8002118 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8092 	beq.w	80020ac <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	00d2      	lsls	r2, r2, #3
 8001f90:	d502      	bpl.n	8001f98 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f92:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	d50a      	bpl.n	8001fae <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f9a:	f023 0312 	bic.w	r3, r3, #18
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fb0:	06de      	lsls	r6, r3, #27
 8001fb2:	f100 80be 	bmi.w	8002132 <HAL_ADC_Init+0x1ca>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	f040 80bb 	bne.w	8002132 <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001fc0:	f011 0104 	ands.w	r1, r1, #4
 8001fc4:	f040 80b5 	bne.w	8002132 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001fca:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001fce:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fd8:	bf0c      	ite	eq
 8001fda:	4a5a      	ldreq	r2, [pc, #360]	; (8002144 <HAL_ADC_Init+0x1dc>)
 8001fdc:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8001fe0:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	2a01      	cmp	r2, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_ADC_Init+0x8a>
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	07d5      	lsls	r5, r2, #31
 8001ff0:	d410      	bmi.n	8002014 <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ff2:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ff4:	b13a      	cbz	r2, 8002006 <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ff6:	6895      	ldr	r5, [r2, #8]
 8001ff8:	f005 0503 	and.w	r5, r5, #3
 8001ffc:	2d01      	cmp	r5, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_ADC_Init+0x9e>
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	07d2      	lsls	r2, r2, #31
 8002004:	d406      	bmi.n	8002014 <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002006:	4d50      	ldr	r5, [pc, #320]	; (8002148 <HAL_ADC_Init+0x1e0>)
 8002008:	6866      	ldr	r6, [r4, #4]
 800200a:	68aa      	ldr	r2, [r5, #8]
 800200c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002010:	4332      	orrs	r2, r6
 8002012:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8002014:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002016:	68a6      	ldr	r6, [r4, #8]
 8002018:	69e5      	ldr	r5, [r4, #28]
 800201a:	2a01      	cmp	r2, #1
 800201c:	68e2      	ldr	r2, [r4, #12]
 800201e:	ea42 0206 	orr.w	r2, r2, r6
 8002022:	bf18      	it	ne
 8002024:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8002028:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 800202c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800202e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002030:	2901      	cmp	r1, #1
 8002032:	d107      	bne.n	8002044 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002034:	2d00      	cmp	r5, #0
 8002036:	d171      	bne.n	800211c <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002038:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800203a:	3901      	subs	r1, #1
 800203c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002040:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002044:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002046:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002048:	bf1e      	ittt	ne
 800204a:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 800204c:	4329      	orrne	r1, r5
 800204e:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	f011 0f0c 	tst.w	r1, #12
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002058:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800205a:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800205c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002060:	f021 0102 	bic.w	r1, r1, #2
 8002064:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002068:	0049      	lsls	r1, r1, #1
 800206a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800206e:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002070:	68dd      	ldr	r5, [r3, #12]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_ADC_Init+0x1e4>)
 8002074:	4029      	ands	r1, r5
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800207a:	6922      	ldr	r2, [r4, #16]
 800207c:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800207e:	bf05      	ittet	eq
 8002080:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8002082:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002084:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002086:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800208a:	bf06      	itte	eq
 800208c:	f021 010f 	biceq.w	r1, r1, #15
 8002090:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002092:	f022 020f 	bicne.w	r2, r2, #15
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002098:	2300      	movs	r3, #0
 800209a:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800209c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80020a8:	b016      	add	sp, #88	; 0x58
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80020ae:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80020b0:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80020b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80020b6:	f001 ff81 	bl	8003fbc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	00d8      	lsls	r0, r3, #3
 80020c0:	f53f af62 	bmi.w	8001f88 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff feba 	bl	8001e3e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020cc:	06d1      	lsls	r1, r2, #27
 80020ce:	f53f af5c 	bmi.w	8001f8a <HAL_ADC_Init+0x22>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	f47f af59 	bne.w	8001f8a <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 80020d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020de:	f023 0302 	bic.w	r3, r3, #2
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f0:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f8:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_ADC_Init+0x1e8>)
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_ADC_Init+0x1ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fbb3 f2f2 	udiv	r2, r3, r2
 8002104:	230a      	movs	r3, #10
 8002106:	4353      	muls	r3, r2
            wait_loop_index--;
 8002108:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800210a:	9b00      	ldr	r3, [sp, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f43f af3b 	beq.w	8001f88 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8002112:	9b00      	ldr	r3, [sp, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	e7f7      	b.n	8002108 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	4618      	mov	r0, r3
 800211a:	e748      	b.n	8001fae <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 800211c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800211e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8002122:	f041 0120 	orr.w	r1, r1, #32
 8002126:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800212a:	f041 0101 	orr.w	r1, r1, #1
 800212e:	64a1      	str	r1, [r4, #72]	; 0x48
 8002130:	e788      	b.n	8002044 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002134:	f023 0312 	bic.w	r3, r3, #18
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800213e:	2001      	movs	r0, #1
 8002140:	e7b2      	b.n	80020a8 <HAL_ADC_Init+0x140>
 8002142:	bf00      	nop
 8002144:	50000100 	.word	0x50000100
 8002148:	50000300 	.word	0x50000300
 800214c:	fff0c007 	.word	0xfff0c007
 8002150:	20000008 	.word	0x20000008
 8002154:	000f4240 	.word	0x000f4240

08002158 <HAL_ADC_Start_DMA>:
{
 8002158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800215c:	6803      	ldr	r3, [r0, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f013 0304 	ands.w	r3, r3, #4
{
 8002164:	4604      	mov	r4, r0
 8002166:	460f      	mov	r7, r1
 8002168:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800216a:	d171      	bne.n	8002250 <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 800216c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002170:	2a01      	cmp	r2, #1
 8002172:	d06d      	beq.n	8002250 <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002174:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002264 <HAL_ADC_Start_DMA+0x10c>
 8002178:	f8d9 5008 	ldr.w	r5, [r9, #8]
    __HAL_LOCK(hadc);
 800217c:	2601      	movs	r6, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800217e:	f015 051f 	ands.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8002182:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002186:	d160      	bne.n	800224a <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 8002188:	f7ff fe90 	bl	8001eac <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800218c:	4606      	mov	r6, r0
 800218e:	2800      	cmp	r0, #0
 8002190:	d158      	bne.n	8002244 <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 8002192:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002194:	6821      	ldr	r1, [r4, #0]
 8002196:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 800219a:	f020 0001 	bic.w	r0, r0, #1
 800219e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80021a2:	6460      	str	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80021a8:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021ae:	d002      	beq.n	80021b6 <HAL_ADC_Start_DMA+0x5e>
 80021b0:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80021b4:	d134      	bne.n	8002220 <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021ba:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021bc:	68cb      	ldr	r3, [r1, #12]
 80021be:	019a      	lsls	r2, r3, #6
 80021c0:	d505      	bpl.n	80021ce <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021cc:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021d6:	bf1c      	itt	ne
 80021d8:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 80021da:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80021de:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 80021e0:	2300      	movs	r3, #0
 80021e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_ADC_Start_DMA+0xfc>)
 80021e8:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_ADC_Start_DMA+0x100>)
 80021ec:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_ADC_Start_DMA+0x104>)
 80021f0:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021f2:	231c      	movs	r3, #28
 80021f4:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f6:	684b      	ldr	r3, [r1, #4]
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021fe:	68cb      	ldr	r3, [r1, #12]
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002206:	463a      	mov	r2, r7
 8002208:	4643      	mov	r3, r8
 800220a:	3140      	adds	r1, #64	; 0x40
 800220c:	f000 fcb4 	bl	8002b78 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6893      	ldr	r3, [r2, #8]
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6093      	str	r3, [r2, #8]
}
 800221a:	4630      	mov	r0, r6
 800221c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002224:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_ADC_Start_DMA+0x108>)
 8002228:	4299      	cmp	r1, r3
 800222a:	d1d0      	bne.n	80021ce <HAL_ADC_Start_DMA+0x76>
 800222c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002234:	bf41      	itttt	mi
 8002236:	6c60      	ldrmi	r0, [r4, #68]	; 0x44
 8002238:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800223c:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002240:	6460      	strmi	r0, [r4, #68]	; 0x44
 8002242:	e7c4      	b.n	80021ce <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 8002244:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8002248:	e7e7      	b.n	800221a <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 800224a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800224e:	e7e4      	b.n	800221a <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 8002250:	2602      	movs	r6, #2
 8002252:	e7e2      	b.n	800221a <HAL_ADC_Start_DMA+0xc2>
 8002254:	08001f25 	.word	0x08001f25
 8002258:	08001f1f 	.word	0x08001f1f
 800225c:	08001f09 	.word	0x08001f09
 8002260:	50000100 	.word	0x50000100
 8002264:	50000300 	.word	0x50000300

08002268 <HAL_ADC_ConfigChannel>:
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8002270:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002274:	2b01      	cmp	r3, #1
{
 8002276:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002278:	f000 8151 	beq.w	800251e <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800227c:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800227e:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002280:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8002282:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002284:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 8002286:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800228a:	f100 8143 	bmi.w	8002514 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 800228e:	6848      	ldr	r0, [r1, #4]
 8002290:	680c      	ldr	r4, [r1, #0]
 8002292:	2804      	cmp	r0, #4
 8002294:	f04f 0206 	mov.w	r2, #6
 8002298:	d831      	bhi.n	80022fe <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 800229a:	4342      	muls	r2, r0
 800229c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800229e:	201f      	movs	r0, #31
 80022a0:	4090      	lsls	r0, r2
 80022a2:	ea27 0000 	bic.w	r0, r7, r0
 80022a6:	fa04 f202 	lsl.w	r2, r4, r2
 80022aa:	4302      	orrs	r2, r0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	f012 0f0c 	tst.w	r2, #12
 80022b4:	d162      	bne.n	800237c <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80022b6:	2c09      	cmp	r4, #9
 80022b8:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80022bc:	688f      	ldr	r7, [r1, #8]
 80022be:	d946      	bls.n	800234e <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022c0:	4422      	add	r2, r4
 80022c2:	6998      	ldr	r0, [r3, #24]
 80022c4:	3a1e      	subs	r2, #30
 80022c6:	f04f 0e07 	mov.w	lr, #7
 80022ca:	fa0e fe02 	lsl.w	lr, lr, r2
 80022ce:	ea20 000e 	bic.w	r0, r0, lr
 80022d2:	fa07 f202 	lsl.w	r2, r7, r2
 80022d6:	4302      	orrs	r2, r0
 80022d8:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80022e0:	694a      	ldr	r2, [r1, #20]
 80022e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80022e6:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80022ea:	690a      	ldr	r2, [r1, #16]
 80022ec:	3a01      	subs	r2, #1
 80022ee:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80022f2:	2a03      	cmp	r2, #3
 80022f4:	d873      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x176>
 80022f6:	e8df f002 	tbb	[pc, r2]
 80022fa:	5137      	.short	0x5137
 80022fc:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80022fe:	2809      	cmp	r0, #9
 8002300:	d80b      	bhi.n	800231a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8002302:	4342      	muls	r2, r0
 8002304:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8002306:	3a1e      	subs	r2, #30
 8002308:	201f      	movs	r0, #31
 800230a:	4090      	lsls	r0, r2
 800230c:	ea27 0000 	bic.w	r0, r7, r0
 8002310:	fa04 f202 	lsl.w	r2, r4, r2
 8002314:	4302      	orrs	r2, r0
 8002316:	635a      	str	r2, [r3, #52]	; 0x34
 8002318:	e7c9      	b.n	80022ae <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 800231a:	280e      	cmp	r0, #14
 800231c:	d80b      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800231e:	4342      	muls	r2, r0
 8002320:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002322:	3a3c      	subs	r2, #60	; 0x3c
 8002324:	201f      	movs	r0, #31
 8002326:	4090      	lsls	r0, r2
 8002328:	ea27 0000 	bic.w	r0, r7, r0
 800232c:	fa04 f202 	lsl.w	r2, r4, r2
 8002330:	4302      	orrs	r2, r0
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
 8002334:	e7bb      	b.n	80022ae <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002336:	4342      	muls	r2, r0
 8002338:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800233a:	3a5a      	subs	r2, #90	; 0x5a
 800233c:	201f      	movs	r0, #31
 800233e:	4090      	lsls	r0, r2
 8002340:	ea27 0000 	bic.w	r0, r7, r0
 8002344:	fa04 f202 	lsl.w	r2, r4, r2
 8002348:	4302      	orrs	r2, r0
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
 800234c:	e7af      	b.n	80022ae <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800234e:	6958      	ldr	r0, [r3, #20]
 8002350:	4422      	add	r2, r4
 8002352:	f04f 0e07 	mov.w	lr, #7
 8002356:	fa0e fe02 	lsl.w	lr, lr, r2
 800235a:	ea20 000e 	bic.w	r0, r0, lr
 800235e:	fa07 f202 	lsl.w	r2, r7, r2
 8002362:	4302      	orrs	r2, r0
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	e7b8      	b.n	80022da <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800236a:	4f7a      	ldr	r7, [pc, #488]	; (8002554 <HAL_ADC_ConfigChannel+0x2ec>)
 800236c:	4017      	ands	r7, r2
 800236e:	ea47 020c 	orr.w	r2, r7, ip
 8002372:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002376:	ea42 020e 	orr.w	r2, r2, lr
 800237a:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	2a01      	cmp	r2, #1
 8002384:	f040 80cd 	bne.w	8002522 <HAL_ADC_ConfigChannel+0x2ba>
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	07d0      	lsls	r0, r2, #31
 800238c:	f140 80c9 	bpl.w	8002522 <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002392:	2300      	movs	r3, #0
 8002394:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8002398:	b017      	add	sp, #92	; 0x5c
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800239c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800239e:	4f6d      	ldr	r7, [pc, #436]	; (8002554 <HAL_ADC_ConfigChannel+0x2ec>)
 80023a0:	4017      	ands	r7, r2
 80023a2:	ea47 020c 	orr.w	r2, r7, ip
 80023a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	ea42 020e 	orr.w	r2, r2, lr
 80023ae:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80023b0:	e7e4      	b.n	800237c <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80023b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023b4:	4867      	ldr	r0, [pc, #412]	; (8002554 <HAL_ADC_ConfigChannel+0x2ec>)
 80023b6:	4010      	ands	r0, r2
 80023b8:	ea40 020c 	orr.w	r2, r0, ip
 80023bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023c0:	ea42 020e 	orr.w	r2, r2, lr
 80023c4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80023c6:	e7d9      	b.n	800237c <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80023c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80023ca:	4a62      	ldr	r2, [pc, #392]	; (8002554 <HAL_ADC_ConfigChannel+0x2ec>)
 80023cc:	4002      	ands	r2, r0
 80023ce:	ea42 020c 	orr.w	r2, r2, ip
 80023d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023da:	66da      	str	r2, [r3, #108]	; 0x6c
 80023dc:	e7ce      	b.n	800237c <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80023e4:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023e6:	bf02      	ittt	eq
 80023e8:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80023ea:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023f2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80023f6:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023f8:	bf02      	ittt	eq
 80023fa:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80023fc:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002400:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002402:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002404:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002408:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800240a:	bf02      	ittt	eq
 800240c:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800240e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002412:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002416:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800241a:	4594      	cmp	ip, r2
 800241c:	d1ae      	bne.n	800237c <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800241e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002420:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002424:	e7d9      	b.n	80023da <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002426:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800242a:	2101      	movs	r1, #1
 800242c:	40a1      	lsls	r1, r4
 800242e:	ea22 0201 	bic.w	r2, r2, r1
 8002432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002436:	2c10      	cmp	r4, #16
 8002438:	d143      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 800243c:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800243e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002442:	d1a5      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002448:	bf0c      	ite	eq
 800244a:	4a44      	ldreq	r2, [pc, #272]	; (800255c <HAL_ADC_ConfigChannel+0x2f4>)
 800244c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8002450:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	2a01      	cmp	r2, #1
 800245a:	d102      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x1fa>
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	07d1      	lsls	r1, r2, #31
 8002460:	d452      	bmi.n	8002508 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002462:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002464:	b13a      	cbz	r2, 8002476 <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002466:	6891      	ldr	r1, [r2, #8]
 8002468:	f001 0103 	and.w	r1, r1, #3
 800246c:	2901      	cmp	r1, #1
 800246e:	d102      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x20e>
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	07d2      	lsls	r2, r2, #31
 8002474:	d448      	bmi.n	8002508 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002476:	2c10      	cmp	r4, #16
 8002478:	d132      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x278>
 800247a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247e:	d187      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002480:	4a35      	ldr	r2, [pc, #212]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 8002482:	6893      	ldr	r3, [r2, #8]
 8002484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002488:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_ADC_ConfigChannel+0x2f8>)
 800248c:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_ADC_ConfigChannel+0x2fc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fbb3 f2f2 	udiv	r2, r3, r2
 8002494:	230a      	movs	r3, #10
 8002496:	4353      	muls	r3, r2
            wait_loop_index--;
 8002498:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800249a:	9b00      	ldr	r3, [sp, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f43f af77 	beq.w	8002390 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80024a2:	9b00      	ldr	r3, [sp, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	e7f7      	b.n	8002498 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 80024a8:	1c60      	adds	r0, r4, #1
 80024aa:	6959      	ldr	r1, [r3, #20]
 80024ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80024b0:	2207      	movs	r2, #7
 80024b2:	4082      	lsls	r2, r0
 80024b4:	ea21 0102 	bic.w	r1, r1, r2
 80024b8:	fa06 f200 	lsl.w	r2, r6, r0
 80024bc:	430a      	orrs	r2, r1
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	e7b9      	b.n	8002436 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024c2:	2c11      	cmp	r4, #17
 80024c4:	d104      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 80024c8:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024ca:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80024ce:	e7b8      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024d0:	2c12      	cmp	r4, #18
 80024d2:	f47f af5d 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 80024d8:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024da:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80024de:	e7b0      	b.n	8002442 <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024e0:	2c11      	cmp	r4, #17
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x290>
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e8:	f47f af52 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 80024ee:	6893      	ldr	r3, [r2, #8]
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024f4:	6093      	str	r3, [r2, #8]
 80024f6:	e74b      	b.n	8002390 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024f8:	2c12      	cmp	r4, #18
 80024fa:	f47f af49 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_ADC_ConfigChannel+0x2f0>)
 8002500:	6893      	ldr	r3, [r2, #8]
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002506:	e7f5      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800250a:	f043 0320 	orr.w	r3, r3, #32
 800250e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8002510:	2001      	movs	r0, #1
 8002512:	e73e      	b.n	8002392 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002516:	f043 0320 	orr.w	r3, r3, #32
 800251a:	646b      	str	r3, [r5, #68]	; 0x44
 800251c:	e739      	b.n	8002392 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800251e:	2002      	movs	r0, #2
 8002520:	e73a      	b.n	8002398 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002522:	2e01      	cmp	r6, #1
 8002524:	f47f af7f 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002528:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800252c:	40a6      	lsls	r6, r4
 800252e:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002530:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002532:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8002536:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002538:	d9b6      	bls.n	80024a8 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 800253a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	3a1b      	subs	r2, #27
 8002542:	2007      	movs	r0, #7
 8002544:	4090      	lsls	r0, r2
 8002546:	ea21 0100 	bic.w	r1, r1, r0
 800254a:	fa06 f202 	lsl.w	r2, r6, r2
 800254e:	430a      	orrs	r2, r1
 8002550:	619a      	str	r2, [r3, #24]
 8002552:	e770      	b.n	8002436 <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	83fff000 	.word	0x83fff000
 8002558:	50000300 	.word	0x50000300
 800255c:	50000100 	.word	0x50000100
 8002560:	20000008 	.word	0x20000008
 8002564:	000f4240 	.word	0x000f4240

08002568 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	4603      	mov	r3, r0
 800256c:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800256e:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002570:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002572:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002576:	bf0c      	ite	eq
 8002578:	4a33      	ldreq	r2, [pc, #204]	; (8002648 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 800257a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 800257e:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002580:	9a01      	ldr	r2, [sp, #4]
 8002582:	2a00      	cmp	r2, #0
 8002584:	d049      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 8002586:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 800258a:	2d01      	cmp	r5, #1
 800258c:	d047      	beq.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 800258e:	2501      	movs	r5, #1
 8002590:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002594:	68a5      	ldr	r5, [r4, #8]
 8002596:	076f      	lsls	r7, r5, #29
 8002598:	d435      	bmi.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800259a:	6895      	ldr	r5, [r2, #8]
 800259c:	076e      	lsls	r6, r5, #29
 800259e:	d432      	bmi.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80025a0:	4e2a      	ldr	r6, [pc, #168]	; (800264c <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025a2:	b1a0      	cbz	r0, 80025ce <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025a4:	684d      	ldr	r5, [r1, #4]
 80025a6:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80025aa:	462f      	mov	r7, r5
 80025ac:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80025ae:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 80025b2:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80025b6:	433d      	orrs	r5, r7
 80025b8:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025ba:	68a5      	ldr	r5, [r4, #8]
 80025bc:	f005 0503 	and.w	r5, r5, #3
 80025c0:	2d01      	cmp	r5, #1
 80025c2:	d12e      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80025c4:	6824      	ldr	r4, [r4, #0]
 80025c6:	07e5      	lsls	r5, r4, #31
 80025c8:	d52b      	bpl.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2000      	movs	r0, #0
 80025cc:	e020      	b.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ce:	68b1      	ldr	r1, [r6, #8]
 80025d0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80025d4:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025d6:	68a1      	ldr	r1, [r4, #8]
 80025d8:	f001 0103 	and.w	r1, r1, #3
 80025dc:	2901      	cmp	r1, #1
 80025de:	d102      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	07c9      	lsls	r1, r1, #31
 80025e4:	d4f1      	bmi.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025e6:	6891      	ldr	r1, [r2, #8]
 80025e8:	f001 0103 	and.w	r1, r1, #3
 80025ec:	2901      	cmp	r1, #1
 80025ee:	d102      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	07d2      	lsls	r2, r2, #31
 80025f4:	d4e9      	bmi.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80025f6:	4915      	ldr	r1, [pc, #84]	; (800264c <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80025f8:	688a      	ldr	r2, [r1, #8]
 80025fa:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80025fe:	f022 020f 	bic.w	r2, r2, #15
 8002602:	608a      	str	r2, [r1, #8]
 8002604:	e7e1      	b.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002608:	f042 0220 	orr.w	r2, r2, #32
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800260e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8002616:	b017      	add	sp, #92	; 0x5c
 8002618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
 800261c:	e7fb      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 800261e:	2002      	movs	r0, #2
 8002620:	e7f9      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002622:	6894      	ldr	r4, [r2, #8]
 8002624:	f004 0403 	and.w	r4, r4, #3
 8002628:	2c01      	cmp	r4, #1
 800262a:	d102      	bne.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	07d4      	lsls	r4, r2, #31
 8002630:	d4cb      	bmi.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002632:	4c06      	ldr	r4, [pc, #24]	; (800264c <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002634:	6889      	ldr	r1, [r1, #8]
 8002636:	68a2      	ldr	r2, [r4, #8]
 8002638:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800263c:	4308      	orrs	r0, r1
 800263e:	f022 020f 	bic.w	r2, r2, #15
 8002642:	4310      	orrs	r0, r2
 8002644:	60a0      	str	r0, [r4, #8]
 8002646:	e7c0      	b.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x62>
 8002648:	50000100 	.word	0x50000100
 800264c:	50000300 	.word	0x50000300

08002650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002650:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002652:	4604      	mov	r4, r0
 8002654:	2800      	cmp	r0, #0
 8002656:	d06e      	beq.n	8002736 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8002658:	f890 3020 	ldrb.w	r3, [r0, #32]
 800265c:	b90b      	cbnz	r3, 8002662 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800265e:	f001 fd4f 	bl	8004100 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f023 0302 	bic.w	r3, r3, #2
 800266a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800266c:	f7ff fbde 	bl	8001e2c <HAL_GetTick>
 8002670:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	0791      	lsls	r1, r2, #30
 8002678:	d451      	bmi.n	800271e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002682:	f7ff fbd3 	bl	8001e2c <HAL_GetTick>
 8002686:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	07d2      	lsls	r2, r2, #31
 800268e:	d554      	bpl.n	800273a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002690:	7e22      	ldrb	r2, [r4, #24]
 8002692:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	bf0c      	ite	eq
 8002698:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800269c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026a2:	7e62      	ldrb	r2, [r4, #25]
 80026a4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	bf0c      	ite	eq
 80026aa:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ae:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026b4:	7ea2      	ldrb	r2, [r4, #26]
 80026b6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	bf0c      	ite	eq
 80026bc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026c0:	f022 0220 	bicne.w	r2, r2, #32
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026c6:	7ee2      	ldrb	r2, [r4, #27]
 80026c8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	bf0c      	ite	eq
 80026ce:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d2:	f042 0210 	orrne.w	r2, r2, #16
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026d8:	7f22      	ldrb	r2, [r4, #28]
 80026da:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	bf0c      	ite	eq
 80026e0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e4:	f022 0208 	bicne.w	r2, r2, #8
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026ea:	7f62      	ldrb	r2, [r4, #29]
 80026ec:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	bf0c      	ite	eq
 80026f2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026f6:	f022 0204 	bicne.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026fc:	68e1      	ldr	r1, [r4, #12]
 80026fe:	68a2      	ldr	r2, [r4, #8]
 8002700:	430a      	orrs	r2, r1
 8002702:	6921      	ldr	r1, [r4, #16]
 8002704:	430a      	orrs	r2, r1
 8002706:	6961      	ldr	r1, [r4, #20]
 8002708:	430a      	orrs	r2, r1
 800270a:	6861      	ldr	r1, [r4, #4]
 800270c:	3901      	subs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002712:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002714:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002716:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002718:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800271c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800271e:	f7ff fb85 	bl	8001e2c <HAL_GetTick>
 8002722:	1b40      	subs	r0, r0, r5
 8002724:	280a      	cmp	r0, #10
 8002726:	d9a4      	bls.n	8002672 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002730:	2305      	movs	r3, #5
 8002732:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
}
 8002738:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800273a:	f7ff fb77 	bl	8001e2c <HAL_GetTick>
 800273e:	1b40      	subs	r0, r0, r5
 8002740:	280a      	cmp	r0, #10
 8002742:	d9a1      	bls.n	8002688 <HAL_CAN_Init+0x38>
 8002744:	e7f0      	b.n	8002728 <HAL_CAN_Init+0xd8>

08002746 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002746:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002748:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800274c:	3c01      	subs	r4, #1
 800274e:	2c01      	cmp	r4, #1
 8002750:	d86b      	bhi.n	800282a <HAL_CAN_GetRxMessage+0xe4>
 8002752:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002754:	b941      	cbnz	r1, 8002768 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002756:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002758:	07a4      	lsls	r4, r4, #30
 800275a:	d107      	bne.n	800276c <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800275c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800275e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002762:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002764:	2001      	movs	r0, #1
  }
}
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002768:	6934      	ldr	r4, [r6, #16]
 800276a:	e7f5      	b.n	8002758 <HAL_CAN_GetRxMessage+0x12>
 800276c:	010c      	lsls	r4, r1, #4
 800276e:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002770:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002774:	f007 0704 	and.w	r7, r7, #4
 8002778:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800277a:	2f00      	cmp	r7, #0
 800277c:	d14b      	bne.n	8002816 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800277e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002782:	0d7f      	lsrs	r7, r7, #21
 8002784:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8002786:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800278a:	f3c7 0740 	ubfx	r7, r7, #1, #1
 800278e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002790:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8002794:	f007 070f 	and.w	r7, r7, #15
 8002798:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800279a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800279e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027a2:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027a8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027aa:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027ac:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027ae:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80027b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	4422      	add	r2, r4
 80027b8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80027bc:	0a12      	lsrs	r2, r2, #8
 80027be:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	4422      	add	r2, r4
 80027c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80027c8:	0c12      	lsrs	r2, r2, #16
 80027ca:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027cc:	6802      	ldr	r2, [r0, #0]
 80027ce:	4422      	add	r2, r4
 80027d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80027d4:	0e12      	lsrs	r2, r2, #24
 80027d6:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	4422      	add	r2, r4
 80027dc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027e0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027e2:	6802      	ldr	r2, [r0, #0]
 80027e4:	4422      	add	r2, r4
 80027e6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027ea:	0a12      	lsrs	r2, r2, #8
 80027ec:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027ee:	6802      	ldr	r2, [r0, #0]
 80027f0:	4422      	add	r2, r4
 80027f2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027f6:	0c12      	lsrs	r2, r2, #16
 80027f8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027fa:	6802      	ldr	r2, [r0, #0]
 80027fc:	4414      	add	r4, r2
 80027fe:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8002802:	0e12      	lsrs	r2, r2, #24
 8002804:	71da      	strb	r2, [r3, #7]
 8002806:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002808:	b951      	cbnz	r1, 8002820 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002816:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800281a:	08ff      	lsrs	r7, r7, #3
 800281c:	6057      	str	r7, [r2, #4]
 800281e:	e7b2      	b.n	8002786 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	f042 0220 	orr.w	r2, r2, #32
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	e7f3      	b.n	8002812 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	e797      	b.n	8002762 <HAL_CAN_GetRxMessage+0x1c>

08002832 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002832:	4770      	bx	lr

08002834 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002836:	4770      	bx	lr

08002838 <HAL_CAN_TxMailbox0AbortCallback>:
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_TxMailbox1AbortCallback>:
 800283a:	4770      	bx	lr

0800283c <HAL_CAN_TxMailbox2AbortCallback>:
 800283c:	4770      	bx	lr

0800283e <HAL_CAN_RxFifo0FullCallback>:
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002840:	4770      	bx	lr

08002842 <HAL_CAN_RxFifo1FullCallback>:
 8002842:	4770      	bx	lr

08002844 <HAL_CAN_SleepCallback>:
 8002844:	4770      	bx	lr

08002846 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_IRQHandler>:
{
 800284a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002852:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002856:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002858:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800285c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002860:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002864:	f016 0401 	ands.w	r4, r6, #1
{
 8002868:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800286a:	d022      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800286c:	f017 0401 	ands.w	r4, r7, #1
 8002870:	d007      	beq.n	8002882 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002872:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002874:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002876:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002878:	f140 80a3 	bpl.w	80029c2 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800287c:	f7ff ffd9 	bl	8002832 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002880:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002882:	05fb      	lsls	r3, r7, #23
 8002884:	d509      	bpl.n	800289a <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800288c:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800288e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002890:	f140 80a5 	bpl.w	80029de <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002894:	4628      	mov	r0, r5
 8002896:	f7ff ffcd 	bl	8002834 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800289a:	03fb      	lsls	r3, r7, #15
 800289c:	d509      	bpl.n	80028b2 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028a4:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028a6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028a8:	f140 80a7 	bpl.w	80029fa <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7ff ffc2 	bl	8002836 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028b2:	0733      	lsls	r3, r6, #28
 80028b4:	d507      	bpl.n	80028c6 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028b6:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028ba:	bf1f      	itttt	ne
 80028bc:	682b      	ldrne	r3, [r5, #0]
 80028be:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028c0:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028c4:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028c6:	0777      	lsls	r7, r6, #29
 80028c8:	d508      	bpl.n	80028dc <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028ca:	f01b 0f08 	tst.w	fp, #8
 80028ce:	d005      	beq.n	80028dc <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028d6:	4628      	mov	r0, r5
 80028d8:	f7ff ffb1 	bl	800283e <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028dc:	07b0      	lsls	r0, r6, #30
 80028de:	d506      	bpl.n	80028ee <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0799      	lsls	r1, r3, #30
 80028e6:	d002      	beq.n	80028ee <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028e8:	4628      	mov	r0, r5
 80028ea:	f001 fa9b 	bl	8003e24 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028ee:	0672      	lsls	r2, r6, #25
 80028f0:	d507      	bpl.n	8002902 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028f2:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028f6:	bf1f      	itttt	ne
 80028f8:	682b      	ldrne	r3, [r5, #0]
 80028fa:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028fc:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002900:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002902:	06b3      	lsls	r3, r6, #26
 8002904:	d508      	bpl.n	8002918 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002906:	f01a 0f08 	tst.w	sl, #8
 800290a:	d005      	beq.n	8002918 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	2208      	movs	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002912:	4628      	mov	r0, r5
 8002914:	f7ff ff95 	bl	8002842 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002918:	06f7      	lsls	r7, r6, #27
 800291a:	d506      	bpl.n	800292a <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	0798      	lsls	r0, r3, #30
 8002922:	d002      	beq.n	800292a <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002924:	4628      	mov	r0, r5
 8002926:	f7ff ff8b 	bl	8002840 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800292a:	03b1      	lsls	r1, r6, #14
 800292c:	d508      	bpl.n	8002940 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800292e:	f019 0f10 	tst.w	r9, #16
 8002932:	d005      	beq.n	8002940 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800293a:	4628      	mov	r0, r5
 800293c:	f7ff ff82 	bl	8002844 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002940:	03f2      	lsls	r2, r6, #15
 8002942:	d508      	bpl.n	8002956 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002944:	f019 0f08 	tst.w	r9, #8
 8002948:	d005      	beq.n	8002956 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800294a:	682b      	ldr	r3, [r5, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002950:	4628      	mov	r0, r5
 8002952:	f7ff ff78 	bl	8002846 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002956:	0433      	lsls	r3, r6, #16
 8002958:	d52a      	bpl.n	80029b0 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800295a:	f019 0f04 	tst.w	r9, #4
 800295e:	682a      	ldr	r2, [r5, #0]
 8002960:	d024      	beq.n	80029ac <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002962:	05f7      	lsls	r7, r6, #23
 8002964:	d504      	bpl.n	8002970 <HAL_CAN_IRQHandler+0x126>
 8002966:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800296a:	bf18      	it	ne
 800296c:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002970:	05b0      	lsls	r0, r6, #22
 8002972:	d504      	bpl.n	800297e <HAL_CAN_IRQHandler+0x134>
 8002974:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8002978:	bf18      	it	ne
 800297a:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800297e:	0571      	lsls	r1, r6, #21
 8002980:	d504      	bpl.n	800298c <HAL_CAN_IRQHandler+0x142>
 8002982:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8002986:	bf18      	it	ne
 8002988:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800298c:	0533      	lsls	r3, r6, #20
 800298e:	d50d      	bpl.n	80029ac <HAL_CAN_IRQHandler+0x162>
 8002990:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002994:	d00a      	beq.n	80029ac <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8002996:	2b30      	cmp	r3, #48	; 0x30
 8002998:	d04c      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x1ea>
 800299a:	d83c      	bhi.n	8002a16 <HAL_CAN_IRQHandler+0x1cc>
 800299c:	2b10      	cmp	r3, #16
 800299e:	d043      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x1de>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d044      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029a4:	6993      	ldr	r3, [r2, #24]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029ac:	2304      	movs	r3, #4
 80029ae:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029b0:	b12c      	cbz	r4, 80029be <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80029b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029b4:	431c      	orrs	r4, r3
 80029b6:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80029b8:	4628      	mov	r0, r5
 80029ba:	f7ff ff45 	bl	8002848 <HAL_CAN_ErrorCallback>
 80029be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029c2:	077a      	lsls	r2, r7, #29
 80029c4:	d405      	bmi.n	80029d2 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029c6:	f017 0408 	ands.w	r4, r7, #8
 80029ca:	d105      	bne.n	80029d8 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029cc:	f7ff ff34 	bl	8002838 <HAL_CAN_TxMailbox0AbortCallback>
 80029d0:	e757      	b.n	8002882 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80029d6:	e754      	b.n	8002882 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80029dc:	e751      	b.n	8002882 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029de:	0579      	lsls	r1, r7, #21
 80029e0:	d502      	bpl.n	80029e8 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029e2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80029e6:	e758      	b.n	800289a <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029e8:	053a      	lsls	r2, r7, #20
 80029ea:	d502      	bpl.n	80029f2 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029ec:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80029f0:	e753      	b.n	800289a <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029f2:	4628      	mov	r0, r5
 80029f4:	f7ff ff21 	bl	800283a <HAL_CAN_TxMailbox1AbortCallback>
 80029f8:	e74f      	b.n	800289a <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029fa:	0379      	lsls	r1, r7, #13
 80029fc:	d502      	bpl.n	8002a04 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029fe:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002a02:	e756      	b.n	80028b2 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a04:	033a      	lsls	r2, r7, #12
 8002a06:	d502      	bpl.n	8002a0e <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a08:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002a0c:	e751      	b.n	80028b2 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7ff ff14 	bl	800283c <HAL_CAN_TxMailbox2AbortCallback>
 8002a14:	e74d      	b.n	80028b2 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8002a16:	2b50      	cmp	r3, #80	; 0x50
 8002a18:	d00f      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x1f0>
 8002a1a:	2b60      	cmp	r3, #96	; 0x60
 8002a1c:	d010      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x1f6>
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d1c0      	bne.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a22:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8002a26:	e7bd      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a28:	f044 0408 	orr.w	r4, r4, #8
            break;
 8002a2c:	e7ba      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a2e:	f044 0410 	orr.w	r4, r4, #16
            break;
 8002a32:	e7b7      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a34:	f044 0420 	orr.w	r4, r4, #32
            break;
 8002a38:	e7b4      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a3a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8002a3e:	e7b1      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a40:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8002a44:	e7ae      	b.n	80029a4 <HAL_CAN_IRQHandler+0x15a>
	...

08002a48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002a58:	0200      	lsls	r0, r0, #8
 8002a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002a62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002a64:	60d3      	str	r3, [r2, #12]
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6e:	b530      	push	{r4, r5, lr}
 8002a70:	68dc      	ldr	r4, [r3, #12]
 8002a72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	bf28      	it	cs
 8002a80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 0501 	mov.w	r5, #1
 8002a88:	fa05 f303 	lsl.w	r3, r5, r3
 8002a8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a90:	bf8c      	ite	hi
 8002a92:	3c03      	subhi	r4, #3
 8002a94:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a96:	4019      	ands	r1, r3
 8002a98:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9a:	fa05 f404 	lsl.w	r4, r5, r4
 8002a9e:	3c01      	subs	r4, #1
 8002aa0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002aa2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	ea42 0201 	orr.w	r2, r2, r1
 8002aa8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	bfaf      	iteee	ge
 8002aae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	f000 000f 	andlt.w	r0, r0, #15
 8002ab6:	4b06      	ldrlt	r3, [pc, #24]	; (8002ad0 <HAL_NVIC_SetPriority+0x64>)
 8002ab8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	bfa5      	ittet	ge
 8002abc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002ac0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002ac8:	bd30      	pop	{r4, r5, pc}
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	e000ed14 	.word	0xe000ed14

08002ad4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ad4:	0942      	lsrs	r2, r0, #5
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f000 001f 	and.w	r0, r0, #31
 8002adc:	fa03 f000 	lsl.w	r0, r3, r0
 8002ae0:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <HAL_NVIC_EnableIRQ+0x14>)
 8002ae2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	3801      	subs	r0, #1
 8002aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002af2:	d20a      	bcs.n	8002b0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	21f0      	movs	r1, #240	; 0xf0
 8002afc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b18:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b1a:	b330      	cbz	r0, 8002b6a <HAL_DMA_Init+0x52>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b1c:	6884      	ldr	r4, [r0, #8]
 8002b1e:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8002b20:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8002b22:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8002b26:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	4323      	orrs	r3, r4
 8002b2a:	6904      	ldr	r4, [r0, #16]
 8002b2c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	6944      	ldr	r4, [r0, #20]
 8002b30:	4323      	orrs	r3, r4
 8002b32:	6984      	ldr	r4, [r0, #24]
 8002b34:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b38:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002b3c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002b42:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b44:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_DMA_Init+0x58>)
 8002b48:	2214      	movs	r2, #20
 8002b4a:	440b      	add	r3, r1
 8002b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_DMA_Init+0x5c>)
 8002b56:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002b58:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002b62:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
}  
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	bf00      	nop
 8002b70:	bffdfff8 	.word	0xbffdfff8
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_DMA_Start_IT>:
{
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002b7a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002b7e:	2c01      	cmp	r4, #1
 8002b80:	d035      	beq.n	8002bee <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b82:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002b86:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b88:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8002b8a:	f880 4020 	strb.w	r4, [r0, #32]
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b96:	d128      	bne.n	8002bea <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b9c:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9e:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba0:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ba2:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba4:	f026 0601 	bic.w	r6, r6, #1
 8002ba8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002baa:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002bac:	40bd      	lsls	r5, r7
 8002bae:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002bb0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb2:	6843      	ldr	r3, [r0, #4]
 8002bb4:	6805      	ldr	r5, [r0, #0]
 8002bb6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8002bb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8002bba:	bf0b      	itete	eq
 8002bbc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002bbe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002bc0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002bc2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002bc4:	b14b      	cbz	r3, 8002bda <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bcc:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002bce:	682b      	ldr	r3, [r5, #0]
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	f043 030a 	orr.w	r3, r3, #10
 8002be0:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	e7f0      	b.n	8002bcc <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8002bea:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8002bee:	2002      	movs	r0, #2
} 
 8002bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bf2 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bf4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002bf6:	6803      	ldr	r3, [r0, #0]
{
 8002bf8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bfa:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002bfc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bfe:	2404      	movs	r4, #4
 8002c00:	4094      	lsls	r4, r2
 8002c02:	4226      	tst	r6, r4
 8002c04:	d00e      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x32>
 8002c06:	f015 0f04 	tst.w	r5, #4
 8002c0a:	d00b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c10:	bf5e      	ittt	pl
 8002c12:	681a      	ldrpl	r2, [r3, #0]
 8002c14:	f022 0204 	bicpl.w	r2, r2, #4
 8002c18:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c1c:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8002c1e:	b373      	cbz	r3, 8002c7e <HAL_DMA_IRQHandler+0x8c>
}  
 8002c20:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8002c22:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c24:	2402      	movs	r4, #2
 8002c26:	4094      	lsls	r4, r2
 8002c28:	4226      	tst	r6, r4
 8002c2a:	d012      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x60>
 8002c2c:	f015 0f02 	tst.w	r5, #2
 8002c30:	d00f      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	0695      	lsls	r5, r2, #26
 8002c36:	d406      	bmi.n	8002c46 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f022 020a 	bic.w	r2, r2, #10
 8002c3e:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8002c46:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c48:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8002c4a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002c4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c50:	e7e5      	b.n	8002c1e <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c52:	2408      	movs	r4, #8
 8002c54:	4094      	lsls	r4, r2
 8002c56:	4234      	tst	r4, r6
 8002c58:	d011      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x8c>
 8002c5a:	072c      	lsls	r4, r5, #28
 8002c5c:	d50f      	bpl.n	8002c7e <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c5e:	681c      	ldr	r4, [r3, #0]
 8002c60:	f024 040e 	bic.w	r4, r4, #14
 8002c64:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c66:	2301      	movs	r3, #1
 8002c68:	fa03 f202 	lsl.w	r2, r3, r2
 8002c6c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002c70:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002c74:	2300      	movs	r3, #0
 8002c76:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002c7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c7c:	e7cf      	b.n	8002c1e <HAL_DMA_IRQHandler+0x2c>
}  
 8002c7e:	bc70      	pop	{r4, r5, r6}
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002c8a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8002df4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002c92:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002c94:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8002c98:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002c9a:	9c01      	ldr	r4, [sp, #4]
 8002c9c:	40dc      	lsrs	r4, r3
 8002c9e:	d102      	bne.n	8002ca6 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8002ca0:	b005      	add	sp, #20
 8002ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8002cac:	9c01      	ldr	r4, [sp, #4]
 8002cae:	ea14 050a 	ands.w	r5, r4, sl
 8002cb2:	f000 8093 	beq.w	8002ddc <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb6:	684c      	ldr	r4, [r1, #4]
 8002cb8:	f024 0b10 	bic.w	fp, r4, #16
 8002cbc:	f1bb 0f02 	cmp.w	fp, #2
 8002cc0:	d111      	bne.n	8002ce6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8002cc2:	08df      	lsrs	r7, r3, #3
 8002cc4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002ccc:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002cd2:	fa09 fc0e 	lsl.w	ip, r9, lr
 8002cd6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cda:	690e      	ldr	r6, [r1, #16]
 8002cdc:	fa06 f60e 	lsl.w	r6, r6, lr
 8002ce0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8002ce4:	623e      	str	r6, [r7, #32]
 8002ce6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cea:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8002cec:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cee:	fa07 f70c 	lsl.w	r7, r7, ip
 8002cf2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfa:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cfe:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d02:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d06:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8002d0a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0c:	d811      	bhi.n	8002d32 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8002d0e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d14:	68ce      	ldr	r6, [r1, #12]
 8002d16:	fa06 fe0c 	lsl.w	lr, r6, ip
 8002d1a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8002d1e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d20:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d22:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d26:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002d2a:	409e      	lsls	r6, r3
 8002d2c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8002d30:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d32:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d34:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d36:	688e      	ldr	r6, [r1, #8]
 8002d38:	fa06 f60c 	lsl.w	r6, r6, ip
 8002d3c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d3e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8002d40:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d42:	d54b      	bpl.n	8002ddc <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d44:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8002d48:	f046 0601 	orr.w	r6, r6, #1
 8002d4c:	f8c8 6018 	str.w	r6, [r8, #24]
 8002d50:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8002d54:	f023 0703 	bic.w	r7, r3, #3
 8002d58:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002d5c:	f006 0601 	and.w	r6, r6, #1
 8002d60:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002d64:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002d66:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8002d6c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002d6e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002d72:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d76:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002d7a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d7e:	d02f      	beq.n	8002de0 <HAL_GPIO_Init+0x15c>
 8002d80:	4e1b      	ldr	r6, [pc, #108]	; (8002df0 <HAL_GPIO_Init+0x16c>)
 8002d82:	42b0      	cmp	r0, r6
 8002d84:	d02e      	beq.n	8002de4 <HAL_GPIO_Init+0x160>
 8002d86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d8a:	42b0      	cmp	r0, r6
 8002d8c:	d02c      	beq.n	8002de8 <HAL_GPIO_Init+0x164>
 8002d8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d92:	42b0      	cmp	r0, r6
 8002d94:	bf14      	ite	ne
 8002d96:	2605      	movne	r6, #5
 8002d98:	2603      	moveq	r6, #3
 8002d9a:	fa06 f60e 	lsl.w	r6, r6, lr
 8002d9e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8002da4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002dac:	bf0c      	ite	eq
 8002dae:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002db0:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8002db2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8002db4:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002dba:	bf0c      	ite	eq
 8002dbc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002dbe:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8002dc0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8002dc2:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002dc8:	bf0c      	ite	eq
 8002dca:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002dcc:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8002dce:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8002dd0:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	bf54      	ite	pl
 8002dd6:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002dd8:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8002dda:	60d6      	str	r6, [r2, #12]
    position++;
 8002ddc:	3301      	adds	r3, #1
 8002dde:	e75c      	b.n	8002c9a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002de0:	2600      	movs	r6, #0
 8002de2:	e7da      	b.n	8002d9a <HAL_GPIO_Init+0x116>
 8002de4:	2601      	movs	r6, #1
 8002de6:	e7d8      	b.n	8002d9a <HAL_GPIO_Init+0x116>
 8002de8:	2602      	movs	r6, #2
 8002dea:	e7d6      	b.n	8002d9a <HAL_GPIO_Init+0x116>
 8002dec:	40010400 	.word	0x40010400
 8002df0:	48000400 	.word	0x48000400
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	b10a      	cbz	r2, 8002dfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	6181      	str	r1, [r0, #24]
 8002dfc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dfe:	6281      	str	r1, [r0, #40]	; 0x28
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	4605      	mov	r5, r0
 8002e0a:	b918      	cbnz	r0, 8002e14 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002e0e:	b002      	add	sp, #8
 8002e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	07da      	lsls	r2, r3, #31
 8002e18:	d411      	bmi.n	8002e3e <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	682b      	ldr	r3, [r5, #0]
 8002e1c:	079b      	lsls	r3, r3, #30
 8002e1e:	f100 8085 	bmi.w	8002f2c <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	071c      	lsls	r4, r3, #28
 8002e26:	f100 80f6 	bmi.w	8003016 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2a:	682b      	ldr	r3, [r5, #0]
 8002e2c:	0758      	lsls	r0, r3, #29
 8002e2e:	f100 813f 	bmi.w	80030b0 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	69ea      	ldr	r2, [r5, #28]
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	f040 81d6 	bne.w	80031e6 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e7e7      	b.n	8002e0e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e3e:	4cba      	ldr	r4, [pc, #744]	; (8003128 <HAL_RCC_OscConfig+0x324>)
 8002e40:	6863      	ldr	r3, [r4, #4]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d007      	beq.n	8002e5a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e4a:	6863      	ldr	r3, [r4, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d116      	bne.n	8002e82 <HAL_RCC_OscConfig+0x7e>
 8002e54:	6863      	ldr	r3, [r4, #4]
 8002e56:	03df      	lsls	r7, r3, #15
 8002e58:	d513      	bpl.n	8002e82 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2201      	movs	r2, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	420b      	tst	r3, r1
 8002e78:	d0cf      	beq.n	8002e1a <HAL_RCC_OscConfig+0x16>
 8002e7a:	686b      	ldr	r3, [r5, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1cc      	bne.n	8002e1a <HAL_RCC_OscConfig+0x16>
 8002e80:	e7c4      	b.n	8002e0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e82:	686a      	ldr	r2, [r5, #4]
 8002e84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e88:	d125      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e94:	68a9      	ldr	r1, [r5, #8]
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9e:	b352      	cbz	r2, 8002ef6 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8002ea0:	f7fe ffc4 	bl	8001e2c <HAL_GetTick>
 8002ea4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002ea8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	2701      	movs	r7, #1
 8002eac:	fa96 f3a6 	rbit	r3, r6
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	fa96 f3a6 	rbit	r3, r6
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	fa07 f303 	lsl.w	r3, r7, r3
 8002ec2:	4213      	tst	r3, r2
 8002ec4:	d1a9      	bne.n	8002e1a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec6:	f7fe ffb1 	bl	8001e2c <HAL_GetTick>
 8002eca:	eba0 0008 	sub.w	r0, r0, r8
 8002ece:	2864      	cmp	r0, #100	; 0x64
 8002ed0:	d9ec      	bls.n	8002eac <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	e79b      	b.n	8002e0e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	b932      	cbnz	r2, 8002ee8 <HAL_RCC_OscConfig+0xe4>
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee6:	e7d3      	b.n	8002e90 <HAL_RCC_OscConfig+0x8c>
 8002ee8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002eec:	d1f5      	bne.n	8002eda <HAL_RCC_OscConfig+0xd6>
 8002eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	e7c9      	b.n	8002e8a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002ef6:	f7fe ff99 	bl	8001e2c <HAL_GetTick>
 8002efa:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002efe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f00:	2701      	movs	r7, #1
 8002f02:	fa96 f3a6 	rbit	r3, r6
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	fa96 f3a6 	rbit	r3, r6
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa07 f303 	lsl.w	r3, r7, r3
 8002f18:	4213      	tst	r3, r2
 8002f1a:	f43f af7e 	beq.w	8002e1a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1e:	f7fe ff85 	bl	8001e2c <HAL_GetTick>
 8002f22:	eba0 0008 	sub.w	r0, r0, r8
 8002f26:	2864      	cmp	r0, #100	; 0x64
 8002f28:	d9eb      	bls.n	8002f02 <HAL_RCC_OscConfig+0xfe>
 8002f2a:	e7d2      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f2c:	4c7e      	ldr	r4, [pc, #504]	; (8003128 <HAL_RCC_OscConfig+0x324>)
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	f013 0f0c 	tst.w	r3, #12
 8002f34:	d007      	beq.n	8002f46 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f36:	6863      	ldr	r3, [r4, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d122      	bne.n	8002f86 <HAL_RCC_OscConfig+0x182>
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	03de      	lsls	r6, r3, #15
 8002f44:	d41f      	bmi.n	8002f86 <HAL_RCC_OscConfig+0x182>
 8002f46:	2302      	movs	r3, #2
 8002f48:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4c:	6821      	ldr	r1, [r4, #0]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	420b      	tst	r3, r1
 8002f62:	d003      	beq.n	8002f6c <HAL_RCC_OscConfig+0x168>
 8002f64:	692b      	ldr	r3, [r5, #16]
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f47f af50 	bne.w	8002e0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	6821      	ldr	r1, [r4, #0]
 8002f6e:	23f8      	movs	r3, #248	; 0xf8
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	fab3 f283 	clz	r2, r3
 8002f78:	696b      	ldr	r3, [r5, #20]
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002f80:	4313      	orrs	r3, r2
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	e74d      	b.n	8002e22 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f86:	692a      	ldr	r2, [r5, #16]
 8002f88:	2601      	movs	r6, #1
 8002f8a:	b30a      	cbz	r2, 8002fd0 <HAL_RCC_OscConfig+0x1cc>
 8002f8c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	2702      	movs	r7, #2
 8002fa0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002fa2:	f7fe ff43 	bl	8001e2c <HAL_GetTick>
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	fa97 f3a7 	rbit	r3, r7
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	fa06 f303 	lsl.w	r3, r6, r3
 8002fbe:	4213      	tst	r3, r2
 8002fc0:	d1d4      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc2:	f7fe ff33 	bl	8001e2c <HAL_GetTick>
 8002fc6:	eba0 0008 	sub.w	r0, r0, r8
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9ec      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1a4>
 8002fce:	e780      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
 8002fd0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	2702      	movs	r7, #2
 8002fe4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fe6:	f7fe ff21 	bl	8001e2c <HAL_GetTick>
 8002fea:	4680      	mov	r8, r0
 8002fec:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	fa97 f3a7 	rbit	r3, r7
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	fa06 f303 	lsl.w	r3, r6, r3
 8003002:	4213      	tst	r3, r2
 8003004:	f43f af0d 	beq.w	8002e22 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe ff10 	bl	8001e2c <HAL_GetTick>
 800300c:	eba0 0008 	sub.w	r0, r0, r8
 8003010:	2802      	cmp	r0, #2
 8003012:	d9eb      	bls.n	8002fec <HAL_RCC_OscConfig+0x1e8>
 8003014:	e75d      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	69aa      	ldr	r2, [r5, #24]
 8003018:	4e43      	ldr	r6, [pc, #268]	; (8003128 <HAL_RCC_OscConfig+0x324>)
 800301a:	4944      	ldr	r1, [pc, #272]	; (800312c <HAL_RCC_OscConfig+0x328>)
 800301c:	2401      	movs	r4, #1
 800301e:	b31a      	cbz	r2, 8003068 <HAL_RCC_OscConfig+0x264>
 8003020:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	440b      	add	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	2702      	movs	r7, #2
 800302e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8003030:	f7fe fefc 	bl	8001e2c <HAL_GetTick>
 8003034:	4680      	mov	r8, r0
 8003036:	fa97 f3a7 	rbit	r3, r7
 800303a:	fa97 f3a7 	rbit	r3, r7
 800303e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003044:	fa97 f3a7 	rbit	r3, r7
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa04 f303 	lsl.w	r3, r4, r3
 8003054:	4213      	tst	r3, r2
 8003056:	f47f aee8 	bne.w	8002e2a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe fee7 	bl	8001e2c <HAL_GetTick>
 800305e:	eba0 0008 	sub.w	r0, r0, r8
 8003062:	2802      	cmp	r0, #2
 8003064:	d9e7      	bls.n	8003036 <HAL_RCC_OscConfig+0x232>
 8003066:	e734      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
 8003068:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	440b      	add	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	2702      	movs	r7, #2
 8003076:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003078:	f7fe fed8 	bl	8001e2c <HAL_GetTick>
 800307c:	4680      	mov	r8, r0
 800307e:	fa97 f3a7 	rbit	r3, r7
 8003082:	fa97 f3a7 	rbit	r3, r7
 8003086:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800308c:	fa97 f3a7 	rbit	r3, r7
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa04 f303 	lsl.w	r3, r4, r3
 800309c:	4213      	tst	r3, r2
 800309e:	f43f aec4 	beq.w	8002e2a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fe fec3 	bl	8001e2c <HAL_GetTick>
 80030a6:	eba0 0008 	sub.w	r0, r0, r8
 80030aa:	2802      	cmp	r0, #2
 80030ac:	d9e7      	bls.n	800307e <HAL_RCC_OscConfig+0x27a>
 80030ae:	e710      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b0:	4c1d      	ldr	r4, [pc, #116]	; (8003128 <HAL_RCC_OscConfig+0x324>)
 80030b2:	69e3      	ldr	r3, [r4, #28]
 80030b4:	00d9      	lsls	r1, r3, #3
 80030b6:	d434      	bmi.n	8003122 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	69e3      	ldr	r3, [r4, #28]
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	61e3      	str	r3, [r4, #28]
 80030c0:	69e3      	ldr	r3, [r4, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80030ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4f18      	ldr	r7, [pc, #96]	; (8003130 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	05da      	lsls	r2, r3, #23
 80030d2:	d52f      	bpl.n	8003134 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	68eb      	ldr	r3, [r5, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d13d      	bne.n	8003156 <HAL_RCC_OscConfig+0x352>
 80030da:	6a23      	ldr	r3, [r4, #32]
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80030e2:	f7fe fea3 	bl	8001e2c <HAL_GetTick>
 80030e6:	2702      	movs	r7, #2
 80030e8:	4682      	mov	sl, r0
 80030ea:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	f04f 0801 	mov.w	r8, #1
 80030f0:	fa97 f3a7 	rbit	r3, r7
 80030f4:	fa97 f3a7 	rbit	r3, r7
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d06c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
 80030fc:	6a22      	ldr	r2, [r4, #32]
 80030fe:	fa99 f3a9 	rbit	r3, r9
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa08 f303 	lsl.w	r3, r8, r3
 800310e:	4213      	tst	r3, r2
 8003110:	d058      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8003112:	2e00      	cmp	r6, #0
 8003114:	f43f ae8d 	beq.w	8002e32 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	69e3      	ldr	r3, [r4, #28]
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	61e3      	str	r3, [r4, #28]
 8003120:	e687      	b.n	8002e32 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2600      	movs	r6, #0
 8003124:	e7d2      	b.n	80030cc <HAL_RCC_OscConfig+0x2c8>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	10908120 	.word	0x10908120
 8003130:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800313c:	f7fe fe76 	bl	8001e2c <HAL_GetTick>
 8003140:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	d4c5      	bmi.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe fe70 	bl	8001e2c <HAL_GetTick>
 800314c:	eba0 0008 	sub.w	r0, r0, r8
 8003150:	2864      	cmp	r0, #100	; 0x64
 8003152:	d9f6      	bls.n	8003142 <HAL_RCC_OscConfig+0x33e>
 8003154:	e6bd      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	bb3b      	cbnz	r3, 80031a8 <HAL_RCC_OscConfig+0x3a4>
 8003158:	6a23      	ldr	r3, [r4, #32]
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6223      	str	r3, [r4, #32]
 8003160:	6a23      	ldr	r3, [r4, #32]
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003168:	f7fe fe60 	bl	8001e2c <HAL_GetTick>
 800316c:	2702      	movs	r7, #2
 800316e:	4682      	mov	sl, r0
 8003170:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003172:	f04f 0801 	mov.w	r8, #1
 8003176:	fa97 f3a7 	rbit	r3, r7
 800317a:	fa97 f3a7 	rbit	r3, r7
 800317e:	b373      	cbz	r3, 80031de <HAL_RCC_OscConfig+0x3da>
 8003180:	6a22      	ldr	r2, [r4, #32]
 8003182:	fa99 f3a9 	rbit	r3, r9
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	fa08 f303 	lsl.w	r3, r8, r3
 8003192:	4213      	tst	r3, r2
 8003194:	d0bd      	beq.n	8003112 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fe49 	bl	8001e2c <HAL_GetTick>
 800319a:	f241 3388 	movw	r3, #5000	; 0x1388
 800319e:	eba0 000a 	sub.w	r0, r0, sl
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d9e7      	bls.n	8003176 <HAL_RCC_OscConfig+0x372>
 80031a6:	e694      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	6a23      	ldr	r3, [r4, #32]
 80031ac:	d103      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3b2>
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6223      	str	r3, [r4, #32]
 80031b4:	e791      	b.n	80030da <HAL_RCC_OscConfig+0x2d6>
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6223      	str	r3, [r4, #32]
 80031bc:	6a23      	ldr	r3, [r4, #32]
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	e78d      	b.n	80030e0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe fe32 	bl	8001e2c <HAL_GetTick>
 80031c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80031cc:	eba0 000a 	sub.w	r0, r0, sl
 80031d0:	4298      	cmp	r0, r3
 80031d2:	d98d      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2ec>
 80031d4:	e67d      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
 80031d6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031dc:	e78f      	b.n	80030fe <HAL_RCC_OscConfig+0x2fa>
 80031de:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031e4:	e7cd      	b.n	8003182 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e6:	4c41      	ldr	r4, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	f43f ae0c 	beq.w	8002e0c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	2a02      	cmp	r2, #2
 80031f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031fa:	d152      	bne.n	80032a2 <HAL_RCC_OscConfig+0x49e>
 80031fc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003212:	f7fe fe0b 	bl	8001e2c <HAL_GetTick>
 8003216:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800321a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	2601      	movs	r6, #1
 800321e:	fa97 f3a7 	rbit	r3, r7
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	fa97 f3a7 	rbit	r3, r7
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa06 f303 	lsl.w	r3, r6, r3
 8003234:	4213      	tst	r3, r2
 8003236:	d12d      	bne.n	8003294 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	6862      	ldr	r2, [r4, #4]
 800323a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800323c:	6a29      	ldr	r1, [r5, #32]
 800323e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003242:	430b      	orrs	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8003262:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003264:	f7fe fde2 	bl	8001e2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800326a:	4607      	mov	r7, r0
 800326c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	fa95 f3a5 	rbit	r3, r5
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	fa06 f303 	lsl.w	r3, r6, r3
 8003282:	4213      	tst	r3, r2
 8003284:	f47f add9 	bne.w	8002e3a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fdd0 	bl	8001e2c <HAL_GetTick>
 800328c:	1bc0      	subs	r0, r0, r7
 800328e:	2802      	cmp	r0, #2
 8003290:	d9ec      	bls.n	800326c <HAL_RCC_OscConfig+0x468>
 8003292:	e61e      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fdca 	bl	8001e2c <HAL_GetTick>
 8003298:	eba0 0008 	sub.w	r0, r0, r8
 800329c:	2802      	cmp	r0, #2
 800329e:	d9be      	bls.n	800321e <HAL_RCC_OscConfig+0x41a>
 80032a0:	e617      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
 80032a2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032b8:	f7fe fdb8 	bl	8001e2c <HAL_GetTick>
 80032bc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80032c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c2:	2601      	movs	r6, #1
 80032c4:	fa95 f3a5 	rbit	r3, r5
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	fa95 f3a5 	rbit	r3, r5
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	fa06 f303 	lsl.w	r3, r6, r3
 80032da:	4213      	tst	r3, r2
 80032dc:	f43f adad 	beq.w	8002e3a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe fda4 	bl	8001e2c <HAL_GetTick>
 80032e4:	1bc0      	subs	r0, r0, r7
 80032e6:	2802      	cmp	r0, #2
 80032e8:	d9ec      	bls.n	80032c4 <HAL_RCC_OscConfig+0x4c0>
 80032ea:	e5f2      	b.n	8002ed2 <HAL_RCC_OscConfig+0xce>
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80032f2:	4c13      	ldr	r4, [pc, #76]	; (8003340 <HAL_RCC_GetSysClockFreq+0x50>)
 80032f4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f6:	f001 030c 	and.w	r3, r1, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11e      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x4c>
 80032fe:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003302:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003306:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <HAL_RCC_GetSysClockFreq+0x54>)
 8003314:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003318:	220f      	movs	r2, #15
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	40d3      	lsrs	r3, r2
 8003328:	4a07      	ldr	r2, [pc, #28]	; (8003348 <HAL_RCC_GetSysClockFreq+0x58>)
 800332a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800332c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800332e:	bf4a      	itet	mi
 8003330:	4b06      	ldrmi	r3, [pc, #24]	; (800334c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003332:	4b07      	ldrpl	r3, [pc, #28]	; (8003350 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003334:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003338:	4358      	muls	r0, r3
 800333a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800333e:	bd10      	pop	{r4, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	08008585 	.word	0x08008585
 8003348:	08008595 	.word	0x08008595
 800334c:	007a1200 	.word	0x007a1200
 8003350:	003d0900 	.word	0x003d0900

08003354 <HAL_RCC_ClockConfig>:
{
 8003354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003358:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800335a:	4604      	mov	r4, r0
 800335c:	b910      	cbnz	r0, 8003364 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800335e:	2001      	movs	r0, #1
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_RCC_ClockConfig+0x144>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	428b      	cmp	r3, r1
 800336e:	d32e      	bcc.n	80033ce <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	6822      	ldr	r2, [r4, #0]
 8003372:	0791      	lsls	r1, r2, #30
 8003374:	d436      	bmi.n	80033e4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	07d2      	lsls	r2, r2, #31
 8003378:	d43c      	bmi.n	80033f4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337a:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_RCC_ClockConfig+0x144>)
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	429d      	cmp	r5, r3
 8003384:	d375      	bcc.n	8003472 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	4d44      	ldr	r5, [pc, #272]	; (800349c <HAL_RCC_ClockConfig+0x148>)
 800338a:	f012 0f04 	tst.w	r2, #4
 800338e:	d17c      	bne.n	800348a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	0713      	lsls	r3, r2, #28
 8003392:	d506      	bpl.n	80033a2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003394:	686b      	ldr	r3, [r5, #4]
 8003396:	6922      	ldr	r2, [r4, #16]
 8003398:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800339c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033a0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033a2:	f7ff ffa5 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80033a6:	686b      	ldr	r3, [r5, #4]
 80033a8:	22f0      	movs	r2, #240	; 0xf0
 80033aa:	fa92 f2a2 	rbit	r2, r2
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b6:	40d3      	lsrs	r3, r2
 80033b8:	4a39      	ldr	r2, [pc, #228]	; (80034a0 <HAL_RCC_ClockConfig+0x14c>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	40d8      	lsrs	r0, r3
 80033be:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <HAL_RCC_ClockConfig+0x150>)
 80033c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fe fcf0 	bl	8001da8 <HAL_InitTick>
  return HAL_OK;
 80033c8:	2000      	movs	r0, #0
 80033ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	f023 0307 	bic.w	r3, r3, #7
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	4299      	cmp	r1, r3
 80033e0:	d1bd      	bne.n	800335e <HAL_RCC_ClockConfig+0xa>
 80033e2:	e7c5      	b.n	8003370 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	492d      	ldr	r1, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x148>)
 80033e6:	68a0      	ldr	r0, [r4, #8]
 80033e8:	684b      	ldr	r3, [r1, #4]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ee:	4303      	orrs	r3, r0
 80033f0:	604b      	str	r3, [r1, #4]
 80033f2:	e7c0      	b.n	8003376 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	6862      	ldr	r2, [r4, #4]
 80033f6:	4e29      	ldr	r6, [pc, #164]	; (800349c <HAL_RCC_ClockConfig+0x148>)
 80033f8:	2a01      	cmp	r2, #1
 80033fa:	d127      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
 80033fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003400:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	6831      	ldr	r1, [r6, #0]
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	d0a1      	beq.n	800335e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	6873      	ldr	r3, [r6, #4]
 800341c:	f023 0303 	bic.w	r3, r3, #3
 8003420:	431a      	orrs	r2, r3
 8003422:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8003424:	f7fe fd02 	bl	8001e2c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800342c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	6873      	ldr	r3, [r6, #4]
 8003430:	6862      	ldr	r2, [r4, #4]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800343a:	d09e      	beq.n	800337a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe fcf6 	bl	8001e2c <HAL_GetTick>
 8003440:	1bc0      	subs	r0, r0, r7
 8003442:	4540      	cmp	r0, r8
 8003444:	d9f3      	bls.n	800342e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8003446:	2003      	movs	r0, #3
}
 8003448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	2a02      	cmp	r2, #2
 800344e:	bf0c      	ite	eq
 8003450:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8003454:	2302      	movne	r3, #2
 8003456:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	6830      	ldr	r0, [r6, #0]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	4203      	tst	r3, r0
 8003470:	e7d2      	b.n	8003418 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	432b      	orrs	r3, r5
 800347a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	429d      	cmp	r5, r3
 8003484:	f47f af6b 	bne.w	800335e <HAL_RCC_ClockConfig+0xa>
 8003488:	e77d      	b.n	8003386 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348a:	686b      	ldr	r3, [r5, #4]
 800348c:	68e1      	ldr	r1, [r4, #12]
 800348e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003492:	430b      	orrs	r3, r1
 8003494:	606b      	str	r3, [r5, #4]
 8003496:	e77b      	b.n	8003390 <HAL_RCC_ClockConfig+0x3c>
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	080085a9 	.word	0x080085a9
 80034a4:	20000008 	.word	0x20000008

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034bc:	40d3      	lsrs	r3, r2
 80034be:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034c0:	5cd3      	ldrb	r3, [r2, r3]
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80034c4:	6810      	ldr	r0, [r2, #0]
}    
 80034c6:	40d8      	lsrs	r0, r3
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	080085b9 	.word	0x080085b9
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034ec:	40d3      	lsrs	r3, r2
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80034f4:	6810      	ldr	r0, [r2, #0]
} 
 80034f6:	40d8      	lsrs	r0, r3
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	080085b9 	.word	0x080085b9
 8003504:	20000008 	.word	0x20000008

08003508 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003508:	6803      	ldr	r3, [r0, #0]
{
 800350a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800350e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003510:	03d8      	lsls	r0, r3, #15
 8003512:	d520      	bpl.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003514:	4c50      	ldr	r4, [pc, #320]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003516:	69e3      	ldr	r3, [r4, #28]
 8003518:	00d9      	lsls	r1, r3, #3
 800351a:	d444      	bmi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	69e3      	ldr	r3, [r4, #28]
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	61e3      	str	r3, [r4, #28]
 8003524:	69e3      	ldr	r3, [r4, #28]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800352e:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	4f4a      	ldr	r7, [pc, #296]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	05da      	lsls	r2, r3, #23
 8003536:	d538      	bpl.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003538:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800353a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800353e:	d148      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003540:	6a23      	ldr	r3, [r4, #32]
 8003542:	686a      	ldr	r2, [r5, #4]
 8003544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003548:	4313      	orrs	r3, r2
 800354a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800354c:	b11e      	cbz	r6, 8003556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	69e3      	ldr	r3, [r4, #28]
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	6828      	ldr	r0, [r5, #0]
 8003558:	07c1      	lsls	r1, r0, #31
 800355a:	d506      	bpl.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355c:	4a3e      	ldr	r2, [pc, #248]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800355e:	68a9      	ldr	r1, [r5, #8]
 8003560:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	430b      	orrs	r3, r1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	0682      	lsls	r2, r0, #26
 800356c:	d506      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003570:	68e9      	ldr	r1, [r5, #12]
 8003572:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003574:	f023 0310 	bic.w	r3, r3, #16
 8003578:	430b      	orrs	r3, r1
 800357a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800357c:	0603      	lsls	r3, r0, #24
 800357e:	d506      	bpl.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003580:	4a35      	ldr	r2, [pc, #212]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003582:	6929      	ldr	r1, [r5, #16]
 8003584:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003586:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800358a:	430b      	orrs	r3, r1
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800358e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8003592:	d01b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003596:	6969      	ldr	r1, [r5, #20]
 8003598:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800359a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359e:	430b      	orrs	r3, r1
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035a2:	2000      	movs	r0, #0
 80035a4:	e012      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2600      	movs	r6, #0
 80035a8:	e7c2      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80035b2:	f7fe fc3b 	bl	8001e2c <HAL_GetTick>
 80035b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	05db      	lsls	r3, r3, #23
 80035bc:	d4bc      	bmi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe fc35 	bl	8001e2c <HAL_GetTick>
 80035c2:	eba0 0008 	sub.w	r0, r0, r8
 80035c6:	2864      	cmp	r0, #100	; 0x64
 80035c8:	d9f6      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 80035ca:	2003      	movs	r0, #3
}
 80035cc:	b002      	add	sp, #8
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d2:	686a      	ldr	r2, [r5, #4]
 80035d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80035d8:	4293      	cmp	r3, r2
 80035da:	d0b1      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035dc:	6a21      	ldr	r1, [r4, #32]
 80035de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80035e6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	f8df e074 	ldr.w	lr, [pc, #116]	; 8003660 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	4472      	add	r2, lr
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	2701      	movs	r7, #1
 80035f8:	6017      	str	r7, [r2, #0]
 80035fa:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	4473      	add	r3, lr
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800360a:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800360c:	07c8      	lsls	r0, r1, #31
 800360e:	d597      	bpl.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003610:	f7fe fc0c 	bl	8001e2c <HAL_GetTick>
 8003614:	f04f 0802 	mov.w	r8, #2
 8003618:	4682      	mov	sl, r0
 800361a:	46c1      	mov	r9, r8
 800361c:	fa98 f3a8 	rbit	r3, r8
 8003620:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	b19b      	cbz	r3, 800364e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8003626:	6a22      	ldr	r2, [r4, #32]
 8003628:	fa99 f3a9 	rbit	r3, r9
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa07 f303 	lsl.w	r3, r7, r3
 8003638:	4213      	tst	r3, r2
 800363a:	d181      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe fbf6 	bl	8001e2c <HAL_GetTick>
 8003640:	f241 3388 	movw	r3, #5000	; 0x1388
 8003644:	eba0 000a 	sub.w	r0, r0, sl
 8003648:	4298      	cmp	r0, r3
 800364a:	d9e7      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800364c:	e7bd      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800364e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003654:	e7e8      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
 8003660:	10908100 	.word	0x10908100

08003664 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	6803      	ldr	r3, [r0, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003676:	2000      	movs	r0, #0
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_OC_DelayElapsedCallback>:
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_IC_CaptureCallback>:
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_PWM_PulseFinishedCallback>:
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_TriggerCallback>:
 8003680:	4770      	bx	lr

08003682 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	0791      	lsls	r1, r2, #30
{
 8003688:	b510      	push	{r4, lr}
 800368a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800368c:	d50f      	bpl.n	80036ae <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	0792      	lsls	r2, r2, #30
 8003692:	d50c      	bpl.n	80036ae <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003694:	f06f 0202 	mvn.w	r2, #2
 8003698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800369a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800369e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036a0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a2:	f000 8085 	beq.w	80037b0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	f7ff ffe9 	bl	800367c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	2300      	movs	r3, #0
 80036ac:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	0752      	lsls	r2, r2, #29
 80036b4:	d510      	bpl.n	80036d8 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	0750      	lsls	r0, r2, #29
 80036ba:	d50d      	bpl.n	80036d8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036bc:	f06f 0204 	mvn.w	r2, #4
 80036c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ca:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80036cc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ce:	d075      	beq.n	80037bc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80036d0:	f7ff ffd4 	bl	800367c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d4:	2300      	movs	r3, #0
 80036d6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	0711      	lsls	r1, r2, #28
 80036de:	d50f      	bpl.n	8003700 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	0712      	lsls	r2, r2, #28
 80036e4:	d50c      	bpl.n	8003700 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e6:	f06f 0208 	mvn.w	r2, #8
 80036ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ec:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ee:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f0:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f2:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80036f4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f6:	d067      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80036f8:	f7ff ffc0 	bl	800367c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fc:	2300      	movs	r3, #0
 80036fe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	06d0      	lsls	r0, r2, #27
 8003706:	d510      	bpl.n	800372a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	06d1      	lsls	r1, r2, #27
 800370c:	d50d      	bpl.n	800372a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800370e:	f06f 0210 	mvn.w	r2, #16
 8003712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003716:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003718:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	d058      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	f7ff ffab 	bl	800367c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	2300      	movs	r3, #0
 8003728:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	07d2      	lsls	r2, r2, #31
 8003730:	d508      	bpl.n	8003744 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	07d0      	lsls	r0, r2, #31
 8003736:	d505      	bpl.n	8003744 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003738:	f06f 0201 	mvn.w	r2, #1
 800373c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800373e:	4620      	mov	r0, r4
 8003740:	f000 fb88 	bl	8003e54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	0611      	lsls	r1, r2, #24
 800374a:	d508      	bpl.n	800375e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	0612      	lsls	r2, r2, #24
 8003750:	d505      	bpl.n	800375e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003752:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003756:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003758:	4620      	mov	r0, r4
 800375a:	f000 f8ca 	bl	80038f2 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	05d0      	lsls	r0, r2, #23
 8003764:	d508      	bpl.n	8003778 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	0611      	lsls	r1, r2, #24
 800376a:	d505      	bpl.n	8003778 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800376c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003770:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003772:	4620      	mov	r0, r4
 8003774:	f000 f8be 	bl	80038f4 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	0652      	lsls	r2, r2, #25
 800377e:	d508      	bpl.n	8003792 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	0650      	lsls	r0, r2, #25
 8003784:	d505      	bpl.n	8003792 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800378a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff ff77 	bl	8003680 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	0691      	lsls	r1, r2, #26
 8003798:	d522      	bpl.n	80037e0 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	0692      	lsls	r2, r2, #26
 800379e:	d51f      	bpl.n	80037e0 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037a0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80037a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037a6:	611a      	str	r2, [r3, #16]
    }
  }
}
 80037a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80037ac:	f000 b8a0 	b.w	80038f0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b0:	f7ff ff63 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff ff62 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
 80037ba:	e776      	b.n	80036aa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037bc:	f7ff ff5d 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff ff5c 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
 80037c6:	e785      	b.n	80036d4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c8:	f7ff ff57 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80037cc:	4620      	mov	r0, r4
 80037ce:	f7ff ff56 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
 80037d2:	e793      	b.n	80036fc <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	f7ff ff51 	bl	800367a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	4620      	mov	r0, r4
 80037da:	f7ff ff50 	bl	800367e <HAL_TIM_PWM_PulseFinishedCallback>
 80037de:	e7a2      	b.n	8003726 <HAL_TIM_IRQHandler+0xa4>
 80037e0:	bd10      	pop	{r4, pc}
	...

080037e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	4a21      	ldr	r2, [pc, #132]	; (800386c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80037e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	4290      	cmp	r0, r2
{
 80037ea:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	d005      	beq.n	80037fa <TIM_Base_SetConfig+0x16>
 80037ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037f2:	d002      	beq.n	80037fa <TIM_Base_SetConfig+0x16>
 80037f4:	4c1e      	ldr	r4, [pc, #120]	; (8003870 <TIM_Base_SetConfig+0x8c>)
 80037f6:	42a0      	cmp	r0, r4
 80037f8:	d10c      	bne.n	8003814 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80037fa:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003800:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8003802:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	d010      	beq.n	800382a <TIM_Base_SetConfig+0x46>
 8003808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800380c:	d00d      	beq.n	800382a <TIM_Base_SetConfig+0x46>
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <TIM_Base_SetConfig+0x8c>)
 8003810:	4290      	cmp	r0, r2
 8003812:	d00a      	beq.n	800382a <TIM_Base_SetConfig+0x46>
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_Base_SetConfig+0x90>)
 8003816:	4290      	cmp	r0, r2
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0x46>
 800381a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800381e:	4290      	cmp	r0, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0x46>
 8003822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003826:	4290      	cmp	r0, r2
 8003828:	d103      	bne.n	8003832 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003830:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003832:	694a      	ldr	r2, [r1, #20]
 8003834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003838:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800383a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	688b      	ldr	r3, [r1, #8]
 800383e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <TIM_Base_SetConfig+0x88>)
 8003846:	4298      	cmp	r0, r3
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0x7e>
 800384a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800384e:	4298      	cmp	r0, r3
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0x7e>
 8003852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003856:	4298      	cmp	r0, r3
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0x7e>
 800385a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385e:	4298      	cmp	r0, r3
 8003860:	d101      	bne.n	8003866 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003866:	2301      	movs	r3, #1
 8003868:	6143      	str	r3, [r0, #20]
 800386a:	bd10      	pop	{r4, pc}
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40000400 	.word	0x40000400
 8003874:	40014000 	.word	0x40014000

08003878 <HAL_TIM_Base_Init>:
{ 
 8003878:	b510      	push	{r4, lr}
  if(htim == NULL)
 800387a:	4604      	mov	r4, r0
 800387c:	b1a0      	cbz	r0, 80038a8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800387e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003882:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003886:	b91b      	cbnz	r3, 8003890 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003888:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800388c:	f001 f814 	bl	80048b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	1d21      	adds	r1, r4, #4
 800389a:	f7ff ffa3 	bl	80037e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800389e:	2301      	movs	r3, #1
 80038a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80038a4:	2000      	movs	r0, #0
 80038a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	bd10      	pop	{r4, pc}

080038ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80038ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
{
 80038b2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80038b4:	d018      	beq.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038b8:	4d0c      	ldr	r5, [pc, #48]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 80038ba:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038be:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c0:	bf02      	ittt	eq
 80038c2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038c4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c8:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ca:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038cc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80038d4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80038dc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80038de:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80038e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80038e8:	2002      	movs	r0, #2
} 
 80038ea:	bd30      	pop	{r4, r5, pc}
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <HAL_TIMEx_CommutationCallback>:
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIMEx_BreakCallback>:
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f4:	4770      	bx	lr
	...

080038f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80038fc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038fe:	6921      	ldr	r1, [r4, #16]
 8003900:	68a3      	ldr	r3, [r4, #8]
 8003902:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003904:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003906:	430b      	orrs	r3, r1
 8003908:	6961      	ldr	r1, [r4, #20]
 800390a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800390c:	4949      	ldr	r1, [pc, #292]	; (8003a34 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800390e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003910:	4001      	ands	r1, r0
 8003912:	430b      	orrs	r3, r1
 8003914:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003916:	686b      	ldr	r3, [r5, #4]
 8003918:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800391a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003920:	430b      	orrs	r3, r1
 8003922:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003924:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003926:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003928:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800392c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800392e:	430b      	orrs	r3, r1
 8003930:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <UART_SetConfig+0x140>)
 8003934:	429d      	cmp	r5, r3
 8003936:	d112      	bne.n	800395e <UART_SetConfig+0x66>
 8003938:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800393c:	493f      	ldr	r1, [pc, #252]	; (8003a3c <UART_SetConfig+0x144>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003944:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	d13b      	bne.n	80039c4 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 800394c:	2b08      	cmp	r3, #8
 800394e:	d836      	bhi.n	80039be <UART_SetConfig+0xc6>
 8003950:	e8df f003 	tbb	[pc, r3]
 8003954:	3524210f 	.word	0x3524210f
 8003958:	3535352d 	.word	0x3535352d
 800395c:	30          	.byte	0x30
 800395d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395e:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <UART_SetConfig+0x148>)
 8003960:	429d      	cmp	r5, r3
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x74>
 8003964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003968:	429d      	cmp	r5, r3
 800396a:	d15e      	bne.n	8003a2a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003970:	d131      	bne.n	80039d6 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003972:	f7ff fd99 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003976:	6861      	ldr	r1, [r4, #4]
 8003978:	084a      	lsrs	r2, r1, #1
 800397a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003982:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003984:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003986:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800398a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003996:	f7ff fd9f 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 800399a:	e7ec      	b.n	8003976 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800399c:	6860      	ldr	r0, [r4, #4]
 800399e:	0843      	lsrs	r3, r0, #1
 80039a0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80039a4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80039ac:	e7e9      	b.n	8003982 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80039ae:	f7ff fc9f 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80039b2:	e7e0      	b.n	8003976 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039b4:	6860      	ldr	r0, [r4, #4]
 80039b6:	0843      	lsrs	r3, r0, #1
 80039b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80039bc:	e7f4      	b.n	80039a8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80039be:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e7e0      	b.n	8003986 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d833      	bhi.n	8003a30 <UART_SetConfig+0x138>
 80039c8:	e8df f003 	tbb	[pc, r3]
 80039cc:	321b1005 	.word	0x321b1005
 80039d0:	32323227 	.word	0x32323227
 80039d4:	2a          	.byte	0x2a
 80039d5:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80039d6:	f7ff fd67 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 80039da:	6863      	ldr	r3, [r4, #4]
 80039dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80039e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80039e4:	b280      	uxth	r0, r0
 80039e6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039e8:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80039ec:	f7ff fd74 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80039f0:	6863      	ldr	r3, [r4, #4]
 80039f2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80039f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <UART_SetConfig+0x140>)
 80039fc:	b280      	uxth	r0, r0
 80039fe:	60d8      	str	r0, [r3, #12]
 8003a00:	e7f2      	b.n	80039e8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	0853      	lsrs	r3, r2, #1
 8003a06:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003a0a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <UART_SetConfig+0x140>)
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	60d3      	str	r3, [r2, #12]
 8003a18:	e7e6      	b.n	80039e8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a1a:	f7ff fc69 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8003a1e:	e7e7      	b.n	80039f0 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	0853      	lsrs	r3, r2, #1
 8003a24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a28:	e7f1      	b.n	8003a0e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a2e:	d0c6      	beq.n	80039be <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	efff69f3 	.word	0xefff69f3
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	080085a5 	.word	0x080085a5
 8003a40:	40004400 	.word	0x40004400

08003a44 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a46:	07da      	lsls	r2, r3, #31
{
 8003a48:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a4a:	d506      	bpl.n	8003a5a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4c:	6801      	ldr	r1, [r0, #0]
 8003a4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003a50:	684a      	ldr	r2, [r1, #4]
 8003a52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a56:	4322      	orrs	r2, r4
 8003a58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5a:	079c      	lsls	r4, r3, #30
 8003a5c:	d506      	bpl.n	8003a6c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5e:	6801      	ldr	r1, [r0, #0]
 8003a60:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003a62:	684a      	ldr	r2, [r1, #4]
 8003a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a68:	4322      	orrs	r2, r4
 8003a6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a6c:	0759      	lsls	r1, r3, #29
 8003a6e:	d506      	bpl.n	8003a7e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a70:	6801      	ldr	r1, [r0, #0]
 8003a72:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003a74:	684a      	ldr	r2, [r1, #4]
 8003a76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a7a:	4322      	orrs	r2, r4
 8003a7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a7e:	071a      	lsls	r2, r3, #28
 8003a80:	d506      	bpl.n	8003a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a82:	6801      	ldr	r1, [r0, #0]
 8003a84:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003a86:	684a      	ldr	r2, [r1, #4]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8c:	4322      	orrs	r2, r4
 8003a8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a90:	06dc      	lsls	r4, r3, #27
 8003a92:	d506      	bpl.n	8003aa2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a94:	6801      	ldr	r1, [r0, #0]
 8003a96:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a9e:	4322      	orrs	r2, r4
 8003aa0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	0699      	lsls	r1, r3, #26
 8003aa4:	d506      	bpl.n	8003ab4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa6:	6801      	ldr	r1, [r0, #0]
 8003aa8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003aaa:	688a      	ldr	r2, [r1, #8]
 8003aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab0:	4322      	orrs	r2, r4
 8003ab2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab4:	065a      	lsls	r2, r3, #25
 8003ab6:	d50f      	bpl.n	8003ad8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab8:	6801      	ldr	r1, [r0, #0]
 8003aba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003abc:	684a      	ldr	r2, [r1, #4]
 8003abe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003ac2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aca:	d105      	bne.n	8003ad8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003acc:	684a      	ldr	r2, [r1, #4]
 8003ace:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003ad0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003ad4:	4322      	orrs	r2, r4
 8003ad6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	d506      	bpl.n	8003aea <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003ae0:	6853      	ldr	r3, [r2, #4]
 8003ae2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6053      	str	r3, [r2, #4]
 8003aea:	bd10      	pop	{r4, pc}

08003aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af0:	9d06      	ldr	r5, [sp, #24]
 8003af2:	4604      	mov	r4, r0
 8003af4:	460f      	mov	r7, r1
 8003af6:	4616      	mov	r6, r2
 8003af8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	69ca      	ldr	r2, [r1, #28]
 8003afe:	ea37 0302 	bics.w	r3, r7, r2
 8003b02:	bf0c      	ite	eq
 8003b04:	2201      	moveq	r2, #1
 8003b06:	2200      	movne	r2, #0
 8003b08:	42b2      	cmp	r2, r6
 8003b0a:	d002      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003b0c:	2000      	movs	r0, #0
}
 8003b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003b12:	1c6b      	adds	r3, r5, #1
 8003b14:	d0f2      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003b16:	b99d      	cbnz	r5, 8003b40 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003b30:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003b34:	2300      	movs	r3, #0
 8003b36:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003b3a:	2003      	movs	r0, #3
 8003b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003b40:	f7fe f974 	bl	8001e2c <HAL_GetTick>
 8003b44:	eba0 0008 	sub.w	r0, r0, r8
 8003b48:	4285      	cmp	r5, r0
 8003b4a:	d2d6      	bcs.n	8003afa <UART_WaitOnFlagUntilTimeout+0xe>
 8003b4c:	e7e4      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x2c>

08003b4e <HAL_UART_Transmit>:
{
 8003b4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b52:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003b54:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003b58:	2b20      	cmp	r3, #32
{
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003b60:	d14c      	bne.n	8003bfc <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003b62:	2900      	cmp	r1, #0
 8003b64:	d048      	beq.n	8003bf8 <HAL_UART_Transmit+0xaa>
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d046      	beq.n	8003bf8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8003b6a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d044      	beq.n	8003bfc <HAL_UART_Transmit+0xae>
 8003b72:	2301      	movs	r3, #1
 8003b74:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7c:	2321      	movs	r3, #33	; 0x21
 8003b7e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003b82:	f7fe f953 	bl	8001e2c <HAL_GetTick>
    huart->TxXferSize = Size;
 8003b86:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8003b8a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003b8c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003b90:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003b94:	b292      	uxth	r2, r2
 8003b96:	b962      	cbnz	r2, 8003bb2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b98:	9700      	str	r7, [sp, #0]
 8003b9a:	4633      	mov	r3, r6
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff ffa4 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003ba4:	b998      	cbnz	r0, 8003bce <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8003bac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8003bb0:	e00e      	b.n	8003bd0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8003bb2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4633      	mov	r3, r6
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff ff90 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003bcc:	b118      	cbz	r0, 8003bd6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003bce:	2003      	movs	r0, #3
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd6:	68a3      	ldr	r3, [r4, #8]
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bde:	d107      	bne.n	8003bf0 <HAL_UART_Transmit+0xa2>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	b92b      	cbnz	r3, 8003bf0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003be4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8003bee:	e7cf      	b.n	8003b90 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003bf0:	782b      	ldrb	r3, [r5, #0]
 8003bf2:	8513      	strh	r3, [r2, #40]	; 0x28
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7cb      	b.n	8003b90 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	e7e9      	b.n	8003bd0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003bfc:	2002      	movs	r0, #2
 8003bfe:	e7e7      	b.n	8003bd0 <HAL_UART_Transmit+0x82>

08003c00 <HAL_UART_Receive>:
{
 8003c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c04:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8003c06:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003c0a:	2b20      	cmp	r3, #32
{
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	460d      	mov	r5, r1
 8003c10:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003c12:	d160      	bne.n	8003cd6 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8003c14:	2900      	cmp	r1, #0
 8003c16:	d05c      	beq.n	8003cd2 <HAL_UART_Receive+0xd2>
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	d05a      	beq.n	8003cd2 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8003c1c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d058      	beq.n	8003cd6 <HAL_UART_Receive+0xd6>
 8003c24:	2301      	movs	r3, #1
 8003c26:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c2e:	2322      	movs	r3, #34	; 0x22
 8003c30:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8003c34:	f7fe f8fa 	bl	8001e2c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003c38:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8003c3a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003c42:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8003c44:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003c48:	d115      	bne.n	8003c76 <HAL_UART_Receive+0x76>
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	b98b      	cbnz	r3, 8003c72 <HAL_UART_Receive+0x72>
 8003c4e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003c52:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8003c56:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8003c5a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8003c5e:	b280      	uxth	r0, r0
 8003c60:	b9b8      	cbnz	r0, 8003c92 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8003c62:	2320      	movs	r3, #32
 8003c64:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8003c68:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8003c6c:	b002      	add	sp, #8
 8003c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003c72:	23ff      	movs	r3, #255	; 0xff
 8003c74:	e7ed      	b.n	8003c52 <HAL_UART_Receive+0x52>
 8003c76:	b923      	cbnz	r3, 8003c82 <HAL_UART_Receive+0x82>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f9      	beq.n	8003c72 <HAL_UART_Receive+0x72>
 8003c7e:	237f      	movs	r3, #127	; 0x7f
 8003c80:	e7e7      	b.n	8003c52 <HAL_UART_Receive+0x52>
 8003c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c86:	d1e6      	bne.n	8003c56 <HAL_UART_Receive+0x56>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f7      	beq.n	8003c7e <HAL_UART_Receive+0x7e>
 8003c8e:	233f      	movs	r3, #63	; 0x3f
 8003c90:	e7df      	b.n	8003c52 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8003c92:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff1f 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003cae:	b9a0      	cbnz	r0, 8003cda <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_Receive+0xc8>
 8003cba:	6922      	ldr	r2, [r4, #16]
 8003cbc:	b922      	cbnz	r2, 8003cc8 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003cbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cc0:	4033      	ands	r3, r6
 8003cc2:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003cc6:	e7c8      	b.n	8003c5a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cca:	4033      	ands	r3, r6
 8003ccc:	702b      	strb	r3, [r5, #0]
 8003cce:	3501      	adds	r5, #1
 8003cd0:	e7c3      	b.n	8003c5a <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	e7ca      	b.n	8003c6c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	e7c8      	b.n	8003c6c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8003cda:	2003      	movs	r0, #3
 8003cdc:	e7c6      	b.n	8003c6c <HAL_UART_Receive+0x6c>

08003cde <UART_CheckIdleState>:
{
 8003cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ce0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8003ce6:	f7fe f8a1 	bl	8001e2c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003cf0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf2:	d417      	bmi.n	8003d24 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	075b      	lsls	r3, r3, #29
 8003cfa:	d50a      	bpl.n	8003d12 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	462b      	mov	r3, r5
 8003d06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7ff feee 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003d10:	b9a0      	cbnz	r0, 8003d3c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8003d12:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003d14:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8003d16:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003d1a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8003d22:	e00c      	b.n	8003d3e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff feda 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d0db      	beq.n	8003cf4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003d3c:	2003      	movs	r0, #3
}
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd70      	pop	{r4, r5, r6, pc}

08003d42 <HAL_UART_Init>:
{
 8003d42:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003d44:	4604      	mov	r4, r0
 8003d46:	b360      	cbz	r0, 8003da2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003d48:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d50:	b91b      	cbnz	r3, 8003d5a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003d52:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003d56:	f000 fdeb 	bl	8004930 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003d5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	2324      	movs	r3, #36	; 0x24
 8003d5e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff fdc4 	bl	80038f8 <UART_SetConfig>
 8003d70:	2801      	cmp	r0, #1
 8003d72:	d016      	beq.n	8003da2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d76:	b113      	cbz	r3, 8003d7e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7ff fe63 	bl	8003a44 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003d96:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003d9e:	f7ff bf9e 	b.w	8003cde <UART_CheckIdleState>
}
 8003da2:	2001      	movs	r0, #1
 8003da4:	bd10      	pop	{r4, pc}
	...

08003da8 <_ZN3ADC5StartEv>:
uint16_t adcValue2[6];



void ADC::Start()
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue1, 3);
 8003dac:	2203      	movs	r2, #3
 8003dae:	4905      	ldr	r1, [pc, #20]	; (8003dc4 <_ZN3ADC5StartEv+0x1c>)
 8003db0:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <_ZN3ADC5StartEv+0x20>)
 8003db2:	f7fe f9d1 	bl	8002158 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adcValue2, 3);
 8003db6:	2203      	movs	r2, #3
 8003db8:	4904      	ldr	r1, [pc, #16]	; (8003dcc <_ZN3ADC5StartEv+0x24>)
 8003dba:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <_ZN3ADC5StartEv+0x28>)
 8003dbc:	f7fe f9cc 	bl	8002158 <HAL_ADC_Start_DMA>
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000698 	.word	0x20000698
 8003dc8:	20000774 	.word	0x20000774
 8003dcc:	200006a4 	.word	0x200006a4
 8003dd0:	20000720 	.word	0x20000720

08003dd4 <_ZN3ADC8GetValueEv>:

unsigned short ADC::GetValue()
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	if(adc_x==1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <_ZN3ADC8GetValueEv+0x22>
	{
		return adcValue1[this->channel-1];
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <_ZN3ADC8GetValueEv+0x48>)
 8003df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df4:	e00c      	b.n	8003e10 <_ZN3ADC8GetValueEv+0x3c>
	}
	else if(adc_x==2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d107      	bne.n	8003e10 <_ZN3ADC8GetValueEv+0x3c>
	{
		return adcValue2[this->channel-1];
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <_ZN3ADC8GetValueEv+0x4c>)
 8003e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e0e:	e7ff      	b.n	8003e10 <_ZN3ADC8GetValueEv+0x3c>
	}
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	20000698 	.word	0x20000698
 8003e20:	200006a4 	.word	0x200006a4

08003e24 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_Start(&hcan);
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe fc87 	bl	8002746 <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
 }
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200006b0 	.word	0x200006b0
 8003e4c:	200006b8 	.word	0x200006b8
 8003e50:	200006d4 	.word	0x200006d4

08003e54 <HAL_TIM_PeriodElapsedCallback>:
#include "LowlayerHandel.hpp"
extern LowlayerHandelTypedef *plow;
bool IntFlag=false;
int warikan=0;
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 			{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	 	 	 	if(htim->Instance==TIM6)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d102      	bne.n	8003e6c <HAL_TIM_PeriodElapsedCallback+0x18>
	 	 	 		{
 					IntFlag=true;
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]

 					}

 			}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40001000 	.word	0x40001000
 8003e7c:	200006d8 	.word	0x200006d8

08003e80 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003e80:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 8003e82:	2400      	movs	r4, #0
{
 8003e84:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e86:	2218      	movs	r2, #24
 8003e88:	4621      	mov	r1, r4
 8003e8a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8003e8c:	9401      	str	r4, [sp, #4]
 8003e8e:	9402      	str	r4, [sp, #8]
 8003e90:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e92:	f000 fdd3 	bl	8004a3c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003e96:	4823      	ldr	r0, [pc, #140]	; (8003f24 <MX_ADC1_Init+0xa4>)
 8003e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e9c:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ea4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
 8003ea6:	2203      	movs	r2, #3
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003ea8:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eaa:	2304      	movs	r3, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003eac:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003eae:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003eb0:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003eb2:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003eb4:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003eb6:	6202      	str	r2, [r0, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eb8:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003eba:	6184      	str	r4, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003ebc:	6384      	str	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ebe:	f7fe f853 	bl	8001f68 <HAL_ADC_Init>
 8003ec2:	b108      	cbz	r0, 8003ec8 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 8003ec4:	f000 fbe0 	bl	8004688 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ec8:	a901      	add	r1, sp, #4
 8003eca:	4816      	ldr	r0, [pc, #88]	; (8003f24 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ecc:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ece:	f7fe fb4b 	bl	8002568 <HAL_ADCEx_MultiModeConfigChannel>
 8003ed2:	b108      	cbz	r0, 8003ed8 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 8003ed4:	f000 fbd8 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003edc:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ede:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ee0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ee2:	4810      	ldr	r0, [pc, #64]	; (8003f24 <MX_ADC1_Init+0xa4>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ee4:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ee6:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ee8:	9308      	str	r3, [sp, #32]
  sConfig.Offset = 0;
 8003eea:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eec:	f7fe f9bc 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003ef0:	b108      	cbz	r0, 8003ef6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8003ef2:	f000 fbc9 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003ef6:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	480a      	ldr	r0, [pc, #40]	; (8003f24 <MX_ADC1_Init+0xa4>)
  sConfig.Channel = ADC_CHANNEL_2;
 8003efc:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003efe:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f00:	f7fe f9b2 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003f04:	b108      	cbz	r0, 8003f0a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003f06:	f000 fbbf 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0e:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f10:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f12:	4804      	ldr	r0, [pc, #16]	; (8003f24 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f14:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f16:	f7fe f9a7 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003f1a:	b108      	cbz	r0, 8003f20 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003f1c:	f000 fbb4 	bl	8004688 <Error_Handler>
  }

}
 8003f20:	b00a      	add	sp, #40	; 0x28
 8003f22:	bd10      	pop	{r4, pc}
 8003f24:	20000774 	.word	0x20000774

08003f28 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	b086      	sub	sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f2c:	2218      	movs	r2, #24
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4668      	mov	r0, sp
 8003f32:	f000 fd83 	bl	8004a3c <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8003f36:	481f      	ldr	r0, [pc, #124]	; (8003fb4 <MX_ADC2_Init+0x8c>)
 8003f38:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <MX_ADC2_Init+0x90>)
 8003f3a:	6003      	str	r3, [r0, #0]
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 3;
 8003f3c:	2203      	movs	r2, #3
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f3e:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f40:	2401      	movs	r4, #1
  hadc2.Init.NbrOfConversion = 3;
 8003f42:	6202      	str	r2, [r0, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f44:	2204      	movs	r2, #4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f46:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f48:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f4a:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003f4c:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f4e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f50:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f52:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f54:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003f56:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f58:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003f5a:	6183      	str	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003f5c:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f5e:	f7fe f803 	bl	8001f68 <HAL_ADC_Init>
 8003f62:	b108      	cbz	r0, 8003f68 <MX_ADC2_Init+0x40>
  {
    Error_Handler();
 8003f64:	f000 fb90 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f68:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8003f6a:	2203      	movs	r2, #3
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f6c:	4669      	mov	r1, sp
 8003f6e:	4811      	ldr	r0, [pc, #68]	; (8003fb4 <MX_ADC2_Init+0x8c>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003f70:	9400      	str	r4, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f72:	9401      	str	r4, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f74:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8003f76:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f78:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8003f7a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f7c:	f7fe f974 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003f80:	b108      	cbz	r0, 8003f86 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8003f82:	f000 fb81 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003f86:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f88:	4669      	mov	r1, sp
 8003f8a:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <MX_ADC2_Init+0x8c>)
  sConfig.Channel = ADC_CHANNEL_2;
 8003f8c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f8e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f90:	f7fe f96a 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003f94:	b108      	cbz	r0, 8003f9a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8003f96:	f000 fb77 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f9a:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f9c:	4669      	mov	r1, sp
 8003f9e:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <MX_ADC2_Init+0x8c>)
  sConfig.Channel = ADC_CHANNEL_3;
 8003fa0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003fa2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fa4:	f7fe f960 	bl	8002268 <HAL_ADC_ConfigChannel>
 8003fa8:	b108      	cbz	r0, 8003fae <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8003faa:	f000 fb6d 	bl	8004688 <Error_Handler>
  }

}
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000720 	.word	0x20000720
 8003fb8:	50000100 	.word	0x50000100

08003fbc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003fbc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbe:	2214      	movs	r2, #20
{
 8003fc0:	b08b      	sub	sp, #44	; 0x2c
 8003fc2:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	eb0d 0002 	add.w	r0, sp, r2
 8003fca:	f000 fd37 	bl	8004a3c <memset>
  if(adcHandle->Instance==ADC1)
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd4:	d13c      	bne.n	8004050 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_ADC_MspInit+0xe4>)
 8003fd8:	6813      	ldr	r3, [r2, #0]
 8003fda:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003fdc:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_ADC_MspInit+0xe8>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003fe2:	d108      	bne.n	8003ff6 <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003ff2:	9201      	str	r2, [sp, #4]
 8003ff4:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003ff8:	4c2b      	ldr	r4, [pc, #172]	; (80040a8 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ffe:	615a      	str	r2, [r3, #20]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	9302      	str	r3, [sp, #8]
 8004008:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800400a:	230b      	movs	r3, #11
 800400c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004010:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004016:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004018:	f7fe fe34 	bl	8002c84 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800401c:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800401e:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	60e2      	str	r2, [r4, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004028:	6122      	str	r2, [r4, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800402a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800402e:	2300      	movs	r3, #0
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004030:	6162      	str	r2, [r4, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004032:	2220      	movs	r2, #32
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004034:	6063      	str	r3, [r4, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004036:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004038:	61a2      	str	r2, [r4, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800403a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800403c:	4620      	mov	r0, r4
 800403e:	f7fe fd6b 	bl	8002b18 <HAL_DMA_Init>
 8004042:	b108      	cbz	r0, 8004048 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
 8004044:	f000 fb20 	bl	8004688 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004048:	63ec      	str	r4, [r5, #60]	; 0x3c
 800404a:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800404c:	b00b      	add	sp, #44	; 0x2c
 800404e:	bd30      	pop	{r4, r5, pc}
  else if(adcHandle->Instance==ADC2)
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_ADC_MspInit+0xf4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d1fa      	bne.n	800404c <HAL_ADC_MspInit+0x90>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <HAL_ADC_MspInit+0xe4>)
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800405c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_ADC_MspInit+0xe8>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004062:	d108      	bne.n	8004076 <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800406a:	615a      	str	r2, [r3, #20]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004076:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA1_Channel2;
 8004078:	4c0e      	ldr	r4, [pc, #56]	; (80040b4 <HAL_ADC_MspInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800407e:	615a      	str	r2, [r3, #20]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800408a:	2370      	movs	r3, #112	; 0x70
 800408c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004090:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004096:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	f7fe fdf4 	bl	8002c84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_ADC_MspInit+0xfc>)
 800409e:	e7be      	b.n	800401e <HAL_ADC_MspInit+0x62>
 80040a0:	200006e0 	.word	0x200006e0
 80040a4:	40021000 	.word	0x40021000
 80040a8:	200007c8 	.word	0x200007c8
 80040ac:	40020008 	.word	0x40020008
 80040b0:	50000100 	.word	0x50000100
 80040b4:	2000080c 	.word	0x2000080c
 80040b8:	4002001c 	.word	0x4002001c

080040bc <MX_CAN_Init>:

/* CAN init function */
void MX_CAN_Init(void)
{

  hcan.Instance = CAN;
 80040bc:	480e      	ldr	r0, [pc, #56]	; (80040f8 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 80040be:	490f      	ldr	r1, [pc, #60]	; (80040fc <MX_CAN_Init+0x40>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80040c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
{
 80040c4:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 4;
 80040c6:	2304      	movs	r3, #4
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80040c8:	60c2      	str	r2, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80040ca:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
  hcan.Init.Prescaler = 4;
 80040ce:	e880 000a 	stmia.w	r0, {r1, r3}
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80040d2:	6102      	str	r2, [r0, #16]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80040d4:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = ENABLE;
 80040d6:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80040d8:	6083      	str	r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80040da:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80040dc:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80040de:	7642      	strb	r2, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80040e0:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80040e2:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80040e4:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80040e6:	7742      	strb	r2, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80040e8:	f7fe fab2 	bl	8002650 <HAL_CAN_Init>
 80040ec:	b118      	cbz	r0, 80040f6 <MX_CAN_Init+0x3a>
  {
    Error_Handler();
  }

}
 80040ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80040f2:	f000 bac9 	b.w	8004688 <Error_Handler>
 80040f6:	bd08      	pop	{r3, pc}
 80040f8:	20000850 	.word	0x20000850
 80040fc:	40006400 	.word	0x40006400

08004100 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004106:	2214      	movs	r2, #20
 8004108:	2100      	movs	r1, #0
 800410a:	a803      	add	r0, sp, #12
 800410c:	f000 fc96 	bl	8004a3c <memset>
  if(canHandle->Instance==CAN)
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_CAN_MspInit+0x80>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d131      	bne.n	800417c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004118:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004124:	61da      	str	r2, [r3, #28]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800412c:	9201      	str	r2, [sp, #4]
 800412e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004136:	615a      	str	r2, [r3, #20]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004154:	2309      	movs	r3, #9
 8004156:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f7fe fd94 	bl	8002c84 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	4611      	mov	r1, r2
 8004160:	2014      	movs	r0, #20
 8004162:	f7fe fc83 	bl	8002a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8004166:	2014      	movs	r0, #20
 8004168:	f7fe fcb4 	bl	8002ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800416c:	2200      	movs	r2, #0
 800416e:	2015      	movs	r0, #21
 8004170:	4611      	mov	r1, r2
 8004172:	f7fe fc7b 	bl	8002a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8004176:	2015      	movs	r0, #21
 8004178:	f7fe fcac 	bl	8002ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800417c:	b008      	add	sp, #32
 800417e:	bd10      	pop	{r4, pc}
 8004180:	40006400 	.word	0x40006400

08004184 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <MX_DMA_Init+0x3c>)
{
 8004186:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	615a      	str	r2, [r3, #20]
 8004190:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004192:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004194:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004198:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800419a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800419c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800419e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041a0:	f7fe fc64 	bl	8002a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80041a4:	200b      	movs	r0, #11
 80041a6:	f7fe fc95 	bl	8002ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	4611      	mov	r1, r2
 80041ae:	200c      	movs	r0, #12
 80041b0:	f7fe fc5c 	bl	8002a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80041b4:	200c      	movs	r0, #12
 80041b6:	f7fe fc8d 	bl	8002ad4 <HAL_NVIC_EnableIRQ>

}
 80041ba:	b003      	add	sp, #12
 80041bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80041c0:	40021000 	.word	0x40021000

080041c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	2214      	movs	r2, #20
 80041ca:	2100      	movs	r1, #0
 80041cc:	a803      	add	r0, sp, #12
 80041ce:	f000 fc35 	bl	8004a3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80041d4:	4d20      	ldr	r5, [pc, #128]	; (8004258 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80041dc:	615a      	str	r2, [r3, #20]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80041e4:	9200      	str	r2, [sp, #0]
 80041e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80041f6:	9201      	str	r2, [sp, #4]
 80041f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004200:	615a      	str	r2, [r3, #20]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004208:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800420a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800420c:	4628      	mov	r0, r5
 800420e:	2108      	movs	r1, #8

  /*Configure GPIO pins : PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004210:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004212:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004214:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004216:	f7fe fdef 	bl	8002df8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800421a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421e:	a903      	add	r1, sp, #12
 8004220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004224:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004226:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004228:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f7fe fd2b 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800422e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004230:	a903      	add	r1, sp, #12
 8004232:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004234:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004236:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004238:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423a:	f7fe fd23 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800423e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004240:	a903      	add	r1, sp, #12
 8004242:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LD3_Pin;
 8004244:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004246:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800424c:	f7fe fd1a 	bl	8002c84 <HAL_GPIO_Init>

}
 8004250:	b008      	add	sp, #32
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	48000400 	.word	0x48000400

0800425c <_ZN6CanBusC1Emm>:
	bool txend=false;
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3318      	adds	r3, #24
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2020 	strb.w	r2, [r3, #32]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

	}
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>:
class MicroSw
{
	GPIO_TypeDef *GPIOx;
	unsigned short pin;
public:
	MicroSw(GPIO_TypeDef *_GPIOx,unsigned short _pin):GPIOx(_GPIOx),pin(_pin)
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	809a      	strh	r2, [r3, #4]
	{

	}
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_ZN3ADCC1Ess>:
class ADC
{
	short channel=0;
	short adc_x=0;
public:
	ADC(short _adc_x,short _channel):channel(_channel),adc_x(_adc_x)
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	807b      	strh	r3, [r7, #2]
 80042de:	4613      	mov	r3, r2
 80042e0:	803b      	strh	r3, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	883a      	ldrh	r2, [r7, #0]
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	805a      	strh	r2, [r3, #2]
	{

	}
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_ZN21LowlayerHandelTypedefC1Ev>:
public:
	CanBus extcan;
	MicroSw sw1,sw2,sw3,sw4,sw5,sw6;
	ADC ad1,ad2,ad3,ad4,ad5,ad6;

	LowlayerHandelTypedef():
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	sw1(GPIOA,GPIO_PIN_7),sw2(GPIOA,GPIO_PIN_9),sw3(GPIOA,GPIO_PIN_10),sw4(GPIOB,GPIO_PIN_0),sw5(GPIOB,GPIO_PIN_1),
	sw6(GPIOA,GPIO_PIN_8),ad1(2,3),ad2(2,2),ad3(2,1),ad4(1,4),ad5(1,2),ad6(1,1),
	extcan(CAN_ID_EXT,CAN_RTR_DATA)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	2104      	movs	r1, #4
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ffa6 	bl	800425c <_ZN6CanBusC1Emm>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3330      	adds	r3, #48	; 0x30
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ffc5 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3338      	adds	r3, #56	; 0x38
 8004324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004328:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffbc 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3340      	adds	r3, #64	; 0x40
 8004336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffb3 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3348      	adds	r3, #72	; 0x48
 8004348:	2201      	movs	r2, #1
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <_ZN21LowlayerHandelTypedefC1Ev+0xd4>)
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ffac 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3350      	adds	r3, #80	; 0x50
 8004356:	2202      	movs	r2, #2
 8004358:	491d      	ldr	r1, [pc, #116]	; (80043d0 <_ZN21LowlayerHandelTypedefC1Ev+0xd4>)
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ffa5 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3358      	adds	r3, #88	; 0x58
 8004364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004368:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff9c 	bl	80042aa <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3360      	adds	r3, #96	; 0x60
 8004376:	2203      	movs	r2, #3
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ffa9 	bl	80042d2 <_ZN3ADCC1Ess>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3364      	adds	r3, #100	; 0x64
 8004384:	2202      	movs	r2, #2
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ffa2 	bl	80042d2 <_ZN3ADCC1Ess>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3368      	adds	r3, #104	; 0x68
 8004392:	2201      	movs	r2, #1
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff9b 	bl	80042d2 <_ZN3ADCC1Ess>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	336c      	adds	r3, #108	; 0x6c
 80043a0:	2204      	movs	r2, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff94 	bl	80042d2 <_ZN3ADCC1Ess>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3370      	adds	r3, #112	; 0x70
 80043ae:	2202      	movs	r2, #2
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff ff8d 	bl	80042d2 <_ZN3ADCC1Ess>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3374      	adds	r3, #116	; 0x74
 80043bc:	2201      	movs	r2, #1
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff86 	bl	80042d2 <_ZN3ADCC1Ess>
	{

	}
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	48000400 	.word	0x48000400

080043d4 <_ZN3AppC1EP21LowlayerHandelTypedef>:
	unsigned char txbuf2[8]={0,};
	unsigned char txbuf3[1]={0,};
	void DivideData();
	float distance[6];
public:
	App(LowlayerHandelTypedef *_plow):plow(_plow)
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	809a      	strh	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3306      	adds	r3, #6
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	330e      	adds	r3, #14
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	759a      	strb	r2, [r3, #22]
	{
	}
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <_ZN6Timer1C1EP17TIM_HandleTypeDeff>:
	unsigned short Prescaler=0;
	float ajustperiod;

	TIM_HandleTypeDef *htim;
public:
	Timer1(TIM_HandleTypeDef *timhandle,float p):period(p/1000),htim(timhandle),ajustperiod(0)
 8004414:	b580      	push	{r7, lr}
 8004416:	ed2d 8b02 	vpush	{d8}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	ed87 0a01 	vstr	s0, [r7, #4]
 8004426:	ed97 7a01 	vldr	s14, [r7, #4]
 800442a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004510 <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0xfc>
 800442e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	edc3 7a00 	vstr	s15, [r3]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	809a      	strh	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	80da      	strh	r2, [r3, #6]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	60da      	str	r2, [r3, #12]
	{
		/**************initialization******************/
		while(ajustperiod!=period)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	ed93 7a02 	vldr	s14, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d040      	beq.n	80044ea <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0xd6>
		{
			Prescaler++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88db      	ldrh	r3, [r3, #6]
 800446c:	3301      	adds	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	80da      	strh	r2, [r3, #6]
			for(counterperiod=0;counterperiod<65535;counterperiod++)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	809a      	strh	r2, [r3, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	889b      	ldrh	r3, [r3, #4]
 800447e:	461a      	mov	r2, r3
 8004480:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004484:	429a      	cmp	r2, r3
 8004486:	dce4      	bgt.n	8004452 <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0x3e>
			{
			ajustperiod=((float)Prescaler*((float)counterperiod+1))/HAL_RCC_GetPCLK1Freq();
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88db      	ldrh	r3, [r3, #6]
 800448c:	ee07 3a90 	vmov	s15, r3
 8004490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	889b      	ldrh	r3, [r3, #4]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80044ac:	f7fe fffc 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 80044b0:	ee07 0a90 	vmov	s15, r0
 80044b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044b8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	edc3 7a02 	vstr	s15, [r3, #8]
				if(ajustperiod==period)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d006      	beq.n	80044e6 <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0xd2>
			for(counterperiod=0;counterperiod<65535;counterperiod++)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	889b      	ldrh	r3, [r3, #4]
 80044dc:	3301      	adds	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	809a      	strh	r2, [r3, #4]
 80044e4:	e7c9      	b.n	800447a <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0x66>
				{
					break;
 80044e6:	bf00      	nop
		while(ajustperiod!=period)
 80044e8:	e7b3      	b.n	8004452 <_ZN6Timer1C1EP17TIM_HandleTypeDeff+0x3e>
				}
			}
		}
		timhandle->Init.Prescaler=(unsigned short)Prescaler-1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88db      	ldrh	r3, [r3, #6]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	605a      	str	r2, [r3, #4]
		timhandle->Init.Period=(unsigned short)counterperiod;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	889b      	ldrh	r3, [r3, #4]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	60da      	str	r2, [r3, #12]

		/***********************************************/
	}
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	ecbd 8b02 	vpop	{d8}
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	447a0000 	.word	0x447a0000

08004514 <_ZN6Timer15StartEv>:
	void Start()
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
		{
			HAL_TIM_Base_Start_IT(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f89f 	bl	8003664 <HAL_TIM_Base_Start_IT>
		}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b0ae      	sub	sp, #184	; 0xb8
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004536:	f7fd fc5b 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800453a:	f000 f839 	bl	80045b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800453e:	f7ff fe41 	bl	80041c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004542:	f7ff fe1f 	bl	8004184 <MX_DMA_Init>
  MX_ADC1_Init();
 8004546:	f7ff fc9b 	bl	8003e80 <MX_ADC1_Init>
  MX_ADC2_Init();
 800454a:	f7ff fced 	bl	8003f28 <MX_ADC2_Init>
  MX_CAN_Init();
 800454e:	f7ff fdb5 	bl	80040bc <MX_CAN_Init>
  MX_USART2_UART_Init();
 8004552:	f000 f9cf 	bl	80048f4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8004556:	f000 f98f 	bl	8004878 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LowlayerHandelTypedef hlow;
 800455a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fecc 	bl	80042fc <_ZN21LowlayerHandelTypedefC1Ev>
  Timer1 LoopInt(&htim6,20);
 8004564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004568:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800456c:	490e      	ldr	r1, [pc, #56]	; (80045a8 <main+0x78>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ff50 	bl	8004414 <_ZN6Timer1C1EP17TIM_HandleTypeDeff>
  LoopInt.Start();
 8004574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ffcb 	bl	8004514 <_ZN6Timer15StartEv>
  hlow.ad1.Start();
 800457e:	f7ff fc13 	bl	8003da8 <_ZN3ADC5StartEv>
  App app(&hlow);
 8004582:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004586:	463b      	mov	r3, r7
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ff22 	bl	80043d4 <_ZN3AppC1EP21LowlayerHandelTypedef>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //app.TaskShift();
	  printf("%d\n\r",hlow.ad1.GetValue());
 8004590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fc1c 	bl	8003dd4 <_ZN3ADC8GetValueEv>
 800459c:	4603      	mov	r3, r0
 800459e:	4619      	mov	r1, r3
 80045a0:	4802      	ldr	r0, [pc, #8]	; (80045ac <main+0x7c>)
 80045a2:	f000 fa53 	bl	8004a4c <printf>
 80045a6:	e7f3      	b.n	8004590 <main+0x60>
 80045a8:	20000878 	.word	0x20000878
 80045ac:	08008580 	.word	0x08008580

080045b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b096      	sub	sp, #88	; 0x58
 80045b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045ba:	2228      	movs	r2, #40	; 0x28
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fa3c 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c4:	f107 031c 	add.w	r3, r7, #28
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80045e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80045ee:	2300      	movs	r3, #0
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045f2:	2301      	movs	r3, #1
 80045f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045f6:	2302      	movs	r3, #2
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004600:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004604:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fbfa 	bl	8002e04 <HAL_RCC_OscConfig>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8004620:	f000 f832 	bl	8004688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004624:	230f      	movs	r3, #15
 8004626:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004628:	2302      	movs	r3, #2
 800462a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800463a:	f107 031c 	add.w	r3, r7, #28
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fe87 	bl	8003354 <HAL_RCC_ClockConfig>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8004656:	f000 f817 	bl	8004688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800465e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004662:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe ff4e 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 800467c:	f000 f804 	bl	8004688 <Error_Handler>
  }
}
 8004680:	bf00      	nop
 8004682:	3758      	adds	r7, #88	; 0x58
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 8004698:	b507      	push	{r0, r1, r2, lr}
 800469a:	a902      	add	r1, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800469c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80046a0:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80046a4:	2201      	movs	r2, #1
 80046a6:	4803      	ldr	r0, [pc, #12]	; (80046b4 <__io_putchar+0x1c>)
 80046a8:	f7ff fa51 	bl	8003b4e <HAL_UART_Transmit>

  return ch;
}
 80046ac:	9801      	ldr	r0, [sp, #4]
 80046ae:	b003      	add	sp, #12
 80046b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046b4:	200008b8 	.word	0x200008b8

080046b8 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80046b8:	b507      	push	{r0, r1, r2, lr}
  uint8_t ch = 0;
 80046ba:	a902      	add	r1, sp, #8
 80046bc:	2300      	movs	r3, #0
 80046be:	f801 3d01 	strb.w	r3, [r1, #-1]!
  HAL_UART_Receive(&huart2,(uint8_t *)&ch, 1, 0xFFFF);
 80046c2:	2201      	movs	r2, #1
 80046c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c8:	4809      	ldr	r0, [pc, #36]	; (80046f0 <__io_getchar+0x38>)
 80046ca:	f7ff fa99 	bl	8003c00 <HAL_UART_Receive>

  if (ch == '\r')
 80046ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80046d2:	280d      	cmp	r0, #13
 80046d4:	d104      	bne.n	80046e0 <__io_getchar+0x28>
  {
      __io_putchar('\r');
 80046d6:	f7ff ffdf 	bl	8004698 <__io_putchar>
      ch = '\n';
 80046da:	230a      	movs	r3, #10
 80046dc:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return __io_putchar(ch);
 80046e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80046e4:	f7ff ffd8 	bl	8004698 <__io_putchar>
//  return ch;
}
 80046e8:	b003      	add	sp, #12
 80046ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ee:	bf00      	nop
 80046f0:	200008b8 	.word	0x200008b8

080046f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_MspInit+0x2c>)
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	619a      	str	r2, [r3, #24]
 80046fe:	699a      	ldr	r2, [r3, #24]
{
 8004700:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004702:	f002 0201 	and.w	r2, r2, #1
 8004706:	9200      	str	r2, [sp, #0]
 8004708:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800471c:	b002      	add	sp, #8
 800471e:	4770      	bx	lr
 8004720:	40021000 	.word	0x40021000

08004724 <NMI_Handler>:
 8004724:	4770      	bx	lr

08004726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004726:	e7fe      	b.n	8004726 <HardFault_Handler>

08004728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004728:	e7fe      	b.n	8004728 <MemManage_Handler>

0800472a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800472a:	e7fe      	b.n	800472a <BusFault_Handler>

0800472c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800472c:	e7fe      	b.n	800472c <UsageFault_Handler>

0800472e <SVC_Handler>:
 800472e:	4770      	bx	lr

08004730 <DebugMon_Handler>:
 8004730:	4770      	bx	lr

08004732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004732:	4770      	bx	lr

08004734 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004734:	f7fd bb6e 	b.w	8001e14 <HAL_IncTick>

08004738 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <DMA1_Channel1_IRQHandler+0x8>)
 800473a:	f7fe ba5a 	b.w	8002bf2 <HAL_DMA_IRQHandler>
 800473e:	bf00      	nop
 8004740:	200007c8 	.word	0x200007c8

08004744 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <DMA1_Channel2_IRQHandler+0x8>)
 8004746:	f7fe ba54 	b.w	8002bf2 <HAL_DMA_IRQHandler>
 800474a:	bf00      	nop
 800474c:	2000080c 	.word	0x2000080c

08004750 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <CAN_RX1_IRQHandler+0x8>)
 8004752:	f7fe b87a 	b.w	800284a <HAL_CAN_IRQHandler>
 8004756:	bf00      	nop
 8004758:	20000850 	.word	0x20000850

0800475c <CAN_RX0_IRQHandler>:
 800475c:	f7ff bff8 	b.w	8004750 <CAN_RX1_IRQHandler>

08004760 <TIM6_DAC1_IRQHandler>:
void TIM6_DAC1_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <TIM6_DAC1_IRQHandler+0x8>)
 8004762:	f7fe bf8e 	b.w	8003682 <HAL_TIM_IRQHandler>
 8004766:	bf00      	nop
 8004768:	20000878 	.word	0x20000878

0800476c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800476c:	2001      	movs	r0, #1
 800476e:	4770      	bx	lr

08004770 <_kill>:

int _kill(int pid, int sig)
{
 8004770:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004772:	f000 f939 	bl	80049e8 <__errno>
 8004776:	2316      	movs	r3, #22
 8004778:	6003      	str	r3, [r0, #0]
	return -1;
}
 800477a:	f04f 30ff 	mov.w	r0, #4294967295
 800477e:	bd08      	pop	{r3, pc}

08004780 <_exit>:

void _exit (int status)
{
 8004780:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004782:	f000 f931 	bl	80049e8 <__errno>
 8004786:	2316      	movs	r3, #22
 8004788:	6003      	str	r3, [r0, #0]
 800478a:	e7fe      	b.n	800478a <_exit+0xa>

0800478c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	460e      	mov	r6, r1
 8004790:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004792:	460c      	mov	r4, r1
 8004794:	1ba3      	subs	r3, r4, r6
 8004796:	429d      	cmp	r5, r3
 8004798:	dc01      	bgt.n	800479e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800479a:	4628      	mov	r0, r5
 800479c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800479e:	f7ff ff8b 	bl	80046b8 <__io_getchar>
 80047a2:	f804 0b01 	strb.w	r0, [r4], #1
 80047a6:	e7f5      	b.n	8004794 <_read+0x8>

080047a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	460e      	mov	r6, r1
 80047ac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ae:	460c      	mov	r4, r1
 80047b0:	1ba3      	subs	r3, r4, r6
 80047b2:	429d      	cmp	r5, r3
 80047b4:	dc01      	bgt.n	80047ba <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80047b6:	4628      	mov	r0, r5
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80047ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80047be:	f7ff ff6b 	bl	8004698 <__io_putchar>
 80047c2:	e7f5      	b.n	80047b0 <_write+0x8>

080047c4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80047c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <_sbrk+0x2c>)
 80047c8:	6819      	ldr	r1, [r3, #0]
{
 80047ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80047cc:	b909      	cbnz	r1, 80047d2 <_sbrk+0xe>
		heap_end = &end;
 80047ce:	4909      	ldr	r1, [pc, #36]	; (80047f4 <_sbrk+0x30>)
 80047d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80047d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80047d4:	4669      	mov	r1, sp
 80047d6:	4402      	add	r2, r0
 80047d8:	428a      	cmp	r2, r1
 80047da:	d906      	bls.n	80047ea <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80047dc:	f000 f904 	bl	80049e8 <__errno>
 80047e0:	230c      	movs	r3, #12
 80047e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80047ea:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop
 80047f0:	200006e4 	.word	0x200006e4
 80047f4:	20000938 	.word	0x20000938

080047f8 <_close>:

int _close(int file)
{
	return -1;
}
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	4770      	bx	lr

080047fe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80047fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004802:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004804:	2000      	movs	r0, #0
 8004806:	4770      	bx	lr

08004808 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004808:	2001      	movs	r0, #1
 800480a:	4770      	bx	lr

0800480c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800480c:	2000      	movs	r0, #0
 800480e:	4770      	bx	lr

08004810 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004810:	4915      	ldr	r1, [pc, #84]	; (8004868 <SystemInit+0x58>)
 8004812:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <SystemInit+0x5c>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004828:	6858      	ldr	r0, [r3, #4]
 800482a:	4a11      	ldr	r2, [pc, #68]	; (8004870 <SystemInit+0x60>)
 800482c:	4002      	ands	r2, r0
 800482e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800483a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004842:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800484a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	f022 020f 	bic.w	r2, r2, #15
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004854:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004856:	4a07      	ldr	r2, [pc, #28]	; (8004874 <SystemInit+0x64>)
 8004858:	4002      	ands	r2, r0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	40021000 	.word	0x40021000
 8004870:	f87fc00c 	.word	0xf87fc00c
 8004874:	ff00fccc 	.word	0xff00fccc

08004878 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 800487a:	480d      	ldr	r0, [pc, #52]	; (80048b0 <MX_TIM6_Init+0x38>)
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <MX_TIM6_Init+0x3c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800487e:	2400      	movs	r4, #0
 8004880:	9401      	str	r4, [sp, #4]
 8004882:	9402      	str	r4, [sp, #8]
 8004884:	9403      	str	r4, [sp, #12]
  htim6.Init.Prescaler = 0;
 8004886:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800488a:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 0;
 800488c:	60c4      	str	r4, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004890:	f7fe fff2 	bl	8003878 <HAL_TIM_Base_Init>
 8004894:	b108      	cbz	r0, 800489a <MX_TIM6_Init+0x22>
  {
    Error_Handler();
 8004896:	f7ff fef7 	bl	8004688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800489a:	a901      	add	r1, sp, #4
 800489c:	4804      	ldr	r0, [pc, #16]	; (80048b0 <MX_TIM6_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800489e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048a0:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80048a2:	f7ff f803 	bl	80038ac <HAL_TIMEx_MasterConfigSynchronization>
 80048a6:	b108      	cbz	r0, 80048ac <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80048a8:	f7ff feee 	bl	8004688 <Error_Handler>
  }

}
 80048ac:	b004      	add	sp, #16
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	20000878 	.word	0x20000878
 80048b4:	40001000 	.word	0x40001000

080048b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048b8:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <HAL_TIM_Base_MspInit+0x38>)
 80048bc:	6802      	ldr	r2, [r0, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d112      	bne.n	80048e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80048c6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	f042 0210 	orr.w	r2, r2, #16
 80048ce:	61da      	str	r2, [r3, #28]
 80048d0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80048da:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80048de:	f7fe f8c5 	bl	8002a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80048e2:	2036      	movs	r0, #54	; 0x36
 80048e4:	f7fe f8f6 	bl	8002ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80048e8:	b003      	add	sp, #12
 80048ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ee:	bf00      	nop
 80048f0:	40001000 	.word	0x40001000

080048f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048f4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80048f6:	480c      	ldr	r0, [pc, #48]	; (8004928 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <MX_USART2_UART_Init+0x38>)
 80048fa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80048fe:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004902:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004904:	2300      	movs	r3, #0
 8004906:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004908:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800490a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800490c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800490e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004910:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004912:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004914:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004916:	f7ff fa14 	bl	8003d42 <HAL_UART_Init>
 800491a:	b118      	cbz	r0, 8004924 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800491c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004920:	f7ff beb2 	b.w	8004688 <Error_Handler>
 8004924:	bd08      	pop	{r3, pc}
 8004926:	bf00      	nop
 8004928:	200008b8 	.word	0x200008b8
 800492c:	40004400 	.word	0x40004400

08004930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004930:	b510      	push	{r4, lr}
 8004932:	4604      	mov	r4, r0
 8004934:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004936:	2214      	movs	r2, #20
 8004938:	2100      	movs	r1, #0
 800493a:	a803      	add	r0, sp, #12
 800493c:	f000 f87e 	bl	8004a3c <memset>
  if(uartHandle->Instance==USART2)
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <HAL_UART_MspInit+0x60>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d121      	bne.n	800498c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004948:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004954:	61da      	str	r2, [r3, #28]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800495c:	9201      	str	r2, [sp, #4]
 800495e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004966:	615a      	str	r2, [r3, #20]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004972:	f248 0304 	movw	r3, #32772	; 0x8004
 8004976:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004978:	2302      	movs	r3, #2
 800497a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800497c:	2303      	movs	r3, #3
 800497e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004984:	2307      	movs	r3, #7
 8004986:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004988:	f7fe f97c 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800498c:	b008      	add	sp, #32
 800498e:	bd10      	pop	{r4, pc}
 8004990:	40004400 	.word	0x40004400

08004994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004998:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800499a:	e003      	b.n	80049a4 <LoopCopyDataInit>

0800499c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800499e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80049a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80049a2:	3104      	adds	r1, #4

080049a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80049a4:	480b      	ldr	r0, [pc, #44]	; (80049d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80049a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80049aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049ac:	d3f6      	bcc.n	800499c <CopyDataInit>
	ldr	r2, =_sbss
 80049ae:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80049b0:	e002      	b.n	80049b8 <LoopFillZerobss>

080049b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049b4:	f842 3b04 	str.w	r3, [r2], #4

080049b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <LoopForever+0x16>)
	cmp	r2, r3
 80049ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049bc:	d3f9      	bcc.n	80049b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049be:	f7ff ff27 	bl	8004810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049c2:	f000 f817 	bl	80049f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049c6:	f7ff fdb3 	bl	8004530 <main>

080049ca <LoopForever>:

LoopForever:
    b LoopForever
 80049ca:	e7fe      	b.n	80049ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80049cc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80049d0:	080089f4 	.word	0x080089f4
	ldr	r0, =_sdata
 80049d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049d8:	2000067c 	.word	0x2000067c
	ldr	r2, =_sbss
 80049dc:	2000067c 	.word	0x2000067c
	ldr	r3, = _ebss
 80049e0:	20000938 	.word	0x20000938

080049e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049e4:	e7fe      	b.n	80049e4 <ADC1_2_IRQHandler>
	...

080049e8 <__errno>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <__errno+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2000000c 	.word	0x2000000c

080049f4 <__libc_init_array>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4e0d      	ldr	r6, [pc, #52]	; (8004a2c <__libc_init_array+0x38>)
 80049f8:	4c0d      	ldr	r4, [pc, #52]	; (8004a30 <__libc_init_array+0x3c>)
 80049fa:	1ba4      	subs	r4, r4, r6
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	2500      	movs	r5, #0
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	d109      	bne.n	8004a18 <__libc_init_array+0x24>
 8004a04:	4e0b      	ldr	r6, [pc, #44]	; (8004a34 <__libc_init_array+0x40>)
 8004a06:	4c0c      	ldr	r4, [pc, #48]	; (8004a38 <__libc_init_array+0x44>)
 8004a08:	f003 fdac 	bl	8008564 <_init>
 8004a0c:	1ba4      	subs	r4, r4, r6
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	2500      	movs	r5, #0
 8004a12:	42a5      	cmp	r5, r4
 8004a14:	d105      	bne.n	8004a22 <__libc_init_array+0x2e>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1c:	4798      	blx	r3
 8004a1e:	3501      	adds	r5, #1
 8004a20:	e7ee      	b.n	8004a00 <__libc_init_array+0xc>
 8004a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a26:	4798      	blx	r3
 8004a28:	3501      	adds	r5, #1
 8004a2a:	e7f2      	b.n	8004a12 <__libc_init_array+0x1e>
 8004a2c:	080089ec 	.word	0x080089ec
 8004a30:	080089ec 	.word	0x080089ec
 8004a34:	080089ec 	.word	0x080089ec
 8004a38:	080089f0 	.word	0x080089f0

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <printf>:
 8004a4c:	b40f      	push	{r0, r1, r2, r3}
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <printf+0x2c>)
 8004a50:	b513      	push	{r0, r1, r4, lr}
 8004a52:	681c      	ldr	r4, [r3, #0]
 8004a54:	b124      	cbz	r4, 8004a60 <printf+0x14>
 8004a56:	69a3      	ldr	r3, [r4, #24]
 8004a58:	b913      	cbnz	r3, 8004a60 <printf+0x14>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f002 f87c 	bl	8006b58 <__sinit>
 8004a60:	ab05      	add	r3, sp, #20
 8004a62:	9a04      	ldr	r2, [sp, #16]
 8004a64:	68a1      	ldr	r1, [r4, #8]
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f809 	bl	8004a80 <_vfprintf_r>
 8004a6e:	b002      	add	sp, #8
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	b004      	add	sp, #16
 8004a76:	4770      	bx	lr
 8004a78:	2000000c 	.word	0x2000000c
 8004a7c:	00000000 	.word	0x00000000

08004a80 <_vfprintf_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	b0bd      	sub	sp, #244	; 0xf4
 8004a86:	4688      	mov	r8, r1
 8004a88:	4615      	mov	r5, r2
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	461f      	mov	r7, r3
 8004a8e:	4683      	mov	fp, r0
 8004a90:	f002 fa12 	bl	8006eb8 <_localeconv_r>
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	930d      	str	r3, [sp, #52]	; 0x34
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fbe9 	bl	8000270 <strlen>
 8004a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8004aa0:	f1bb 0f00 	cmp.w	fp, #0
 8004aa4:	d005      	beq.n	8004ab2 <_vfprintf_r+0x32>
 8004aa6:	f8db 3018 	ldr.w	r3, [fp, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <_vfprintf_r+0x32>
 8004aac:	4658      	mov	r0, fp
 8004aae:	f002 f853 	bl	8006b58 <__sinit>
 8004ab2:	4b99      	ldr	r3, [pc, #612]	; (8004d18 <_vfprintf_r+0x298>)
 8004ab4:	4598      	cmp	r8, r3
 8004ab6:	d137      	bne.n	8004b28 <_vfprintf_r+0xa8>
 8004ab8:	f8db 8004 	ldr.w	r8, [fp, #4]
 8004abc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004ac0:	07d8      	lsls	r0, r3, #31
 8004ac2:	d407      	bmi.n	8004ad4 <_vfprintf_r+0x54>
 8004ac4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004ac8:	0599      	lsls	r1, r3, #22
 8004aca:	d403      	bmi.n	8004ad4 <_vfprintf_r+0x54>
 8004acc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004ad0:	f002 fa02 	bl	8006ed8 <__retarget_lock_acquire_recursive>
 8004ad4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8004ad8:	049a      	lsls	r2, r3, #18
 8004ada:	d409      	bmi.n	8004af0 <_vfprintf_r+0x70>
 8004adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ae0:	f8a8 300c 	strh.w	r3, [r8, #12]
 8004ae4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aec:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8004af0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004af4:	071e      	lsls	r6, r3, #28
 8004af6:	d502      	bpl.n	8004afe <_vfprintf_r+0x7e>
 8004af8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004afc:	bb03      	cbnz	r3, 8004b40 <_vfprintf_r+0xc0>
 8004afe:	4641      	mov	r1, r8
 8004b00:	4658      	mov	r0, fp
 8004b02:	f001 f839 	bl	8005b78 <__swsetup_r>
 8004b06:	b1d8      	cbz	r0, 8004b40 <_vfprintf_r+0xc0>
 8004b08:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8004b0c:	07dd      	lsls	r5, r3, #31
 8004b0e:	d407      	bmi.n	8004b20 <_vfprintf_r+0xa0>
 8004b10:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004b14:	059c      	lsls	r4, r3, #22
 8004b16:	d403      	bmi.n	8004b20 <_vfprintf_r+0xa0>
 8004b18:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004b1c:	f002 f9dd 	bl	8006eda <__retarget_lock_release_recursive>
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	930a      	str	r3, [sp, #40]	; 0x28
 8004b26:	e026      	b.n	8004b76 <_vfprintf_r+0xf6>
 8004b28:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <_vfprintf_r+0x29c>)
 8004b2a:	4598      	cmp	r8, r3
 8004b2c:	d102      	bne.n	8004b34 <_vfprintf_r+0xb4>
 8004b2e:	f8db 8008 	ldr.w	r8, [fp, #8]
 8004b32:	e7c3      	b.n	8004abc <_vfprintf_r+0x3c>
 8004b34:	4b7a      	ldr	r3, [pc, #488]	; (8004d20 <_vfprintf_r+0x2a0>)
 8004b36:	4598      	cmp	r8, r3
 8004b38:	bf08      	it	eq
 8004b3a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8004b3e:	e7bd      	b.n	8004abc <_vfprintf_r+0x3c>
 8004b40:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004b44:	f003 021a 	and.w	r2, r3, #26
 8004b48:	2a0a      	cmp	r2, #10
 8004b4a:	d118      	bne.n	8004b7e <_vfprintf_r+0xfe>
 8004b4c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	db14      	blt.n	8004b7e <_vfprintf_r+0xfe>
 8004b54:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8004b58:	07d0      	lsls	r0, r2, #31
 8004b5a:	d405      	bmi.n	8004b68 <_vfprintf_r+0xe8>
 8004b5c:	0599      	lsls	r1, r3, #22
 8004b5e:	d403      	bmi.n	8004b68 <_vfprintf_r+0xe8>
 8004b60:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004b64:	f002 f9b9 	bl	8006eda <__retarget_lock_release_recursive>
 8004b68:	4623      	mov	r3, r4
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	4658      	mov	r0, fp
 8004b70:	f000 ffc2 	bl	8005af8 <__sbprintf>
 8004b74:	900a      	str	r0, [sp, #40]	; 0x28
 8004b76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b78:	b03d      	add	sp, #244	; 0xf4
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8004d10 <_vfprintf_r+0x290>
 8004b82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b86:	2300      	movs	r3, #0
 8004b88:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b8a:	941f      	str	r4, [sp, #124]	; 0x7c
 8004b8c:	9321      	str	r3, [sp, #132]	; 0x84
 8004b8e:	9320      	str	r3, [sp, #128]	; 0x80
 8004b90:	9505      	str	r5, [sp, #20]
 8004b92:	9303      	str	r3, [sp, #12]
 8004b94:	9311      	str	r3, [sp, #68]	; 0x44
 8004b96:	9310      	str	r3, [sp, #64]	; 0x40
 8004b98:	930a      	str	r3, [sp, #40]	; 0x28
 8004b9a:	9d05      	ldr	r5, [sp, #20]
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba2:	b112      	cbz	r2, 8004baa <_vfprintf_r+0x12a>
 8004ba4:	2a25      	cmp	r2, #37	; 0x25
 8004ba6:	f040 8083 	bne.w	8004cb0 <_vfprintf_r+0x230>
 8004baa:	9b05      	ldr	r3, [sp, #20]
 8004bac:	1aee      	subs	r6, r5, r3
 8004bae:	d00d      	beq.n	8004bcc <_vfprintf_r+0x14c>
 8004bb0:	e884 0048 	stmia.w	r4, {r3, r6}
 8004bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb6:	4433      	add	r3, r6
 8004bb8:	9321      	str	r3, [sp, #132]	; 0x84
 8004bba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	9320      	str	r3, [sp, #128]	; 0x80
 8004bc2:	dc77      	bgt.n	8004cb4 <_vfprintf_r+0x234>
 8004bc4:	3408      	adds	r4, #8
 8004bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc8:	4433      	add	r3, r6
 8004bca:	930a      	str	r3, [sp, #40]	; 0x28
 8004bcc:	782b      	ldrb	r3, [r5, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8739 	beq.w	8005a46 <_vfprintf_r+0xfc6>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	1c69      	adds	r1, r5, #1
 8004bd8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 3aff 	mov.w	sl, #4294967295
 8004be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be4:	461d      	mov	r5, r3
 8004be6:	200a      	movs	r0, #10
 8004be8:	1c4e      	adds	r6, r1, #1
 8004bea:	7809      	ldrb	r1, [r1, #0]
 8004bec:	9605      	str	r6, [sp, #20]
 8004bee:	9102      	str	r1, [sp, #8]
 8004bf0:	9902      	ldr	r1, [sp, #8]
 8004bf2:	3920      	subs	r1, #32
 8004bf4:	2958      	cmp	r1, #88	; 0x58
 8004bf6:	f200 841d 	bhi.w	8005434 <_vfprintf_r+0x9b4>
 8004bfa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004bfe:	00b3      	.short	0x00b3
 8004c00:	041b041b 	.word	0x041b041b
 8004c04:	041b00b8 	.word	0x041b00b8
 8004c08:	041b041b 	.word	0x041b041b
 8004c0c:	041b041b 	.word	0x041b041b
 8004c10:	00bb041b 	.word	0x00bb041b
 8004c14:	041b0065 	.word	0x041b0065
 8004c18:	00c700c4 	.word	0x00c700c4
 8004c1c:	00e4041b 	.word	0x00e4041b
 8004c20:	00e700e7 	.word	0x00e700e7
 8004c24:	00e700e7 	.word	0x00e700e7
 8004c28:	00e700e7 	.word	0x00e700e7
 8004c2c:	00e700e7 	.word	0x00e700e7
 8004c30:	041b00e7 	.word	0x041b00e7
 8004c34:	041b041b 	.word	0x041b041b
 8004c38:	041b041b 	.word	0x041b041b
 8004c3c:	041b041b 	.word	0x041b041b
 8004c40:	041b041b 	.word	0x041b041b
 8004c44:	011b041b 	.word	0x011b041b
 8004c48:	041b0131 	.word	0x041b0131
 8004c4c:	041b0131 	.word	0x041b0131
 8004c50:	041b041b 	.word	0x041b041b
 8004c54:	00fa041b 	.word	0x00fa041b
 8004c58:	041b041b 	.word	0x041b041b
 8004c5c:	041b0346 	.word	0x041b0346
 8004c60:	041b041b 	.word	0x041b041b
 8004c64:	041b041b 	.word	0x041b041b
 8004c68:	041b03ad 	.word	0x041b03ad
 8004c6c:	0093041b 	.word	0x0093041b
 8004c70:	041b041b 	.word	0x041b041b
 8004c74:	041b041b 	.word	0x041b041b
 8004c78:	041b041b 	.word	0x041b041b
 8004c7c:	041b041b 	.word	0x041b041b
 8004c80:	041b041b 	.word	0x041b041b
 8004c84:	006b010d 	.word	0x006b010d
 8004c88:	01310131 	.word	0x01310131
 8004c8c:	00fd0131 	.word	0x00fd0131
 8004c90:	041b006b 	.word	0x041b006b
 8004c94:	0100041b 	.word	0x0100041b
 8004c98:	0328041b 	.word	0x0328041b
 8004c9c:	037c0348 	.word	0x037c0348
 8004ca0:	041b0107 	.word	0x041b0107
 8004ca4:	041b038d 	.word	0x041b038d
 8004ca8:	041b03af 	.word	0x041b03af
 8004cac:	03c7041b 	.word	0x03c7041b
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	e773      	b.n	8004b9c <_vfprintf_r+0x11c>
 8004cb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	4658      	mov	r0, fp
 8004cba:	f002 fecc 	bl	8007a56 <__sprint_r>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f040 8699 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8004cc4:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cc6:	e77e      	b.n	8004bc6 <_vfprintf_r+0x146>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	222b      	movs	r2, #43	; 0x2b
 8004ccc:	9905      	ldr	r1, [sp, #20]
 8004cce:	e78b      	b.n	8004be8 <_vfprintf_r+0x168>
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	e7fb      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004cd4:	b10b      	cbz	r3, 8004cda <_vfprintf_r+0x25a>
 8004cd6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004cda:	06aa      	lsls	r2, r5, #26
 8004cdc:	f140 80b0 	bpl.w	8004e40 <_vfprintf_r+0x3c0>
 8004ce0:	3707      	adds	r7, #7
 8004ce2:	f027 0707 	bic.w	r7, r7, #7
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	f177 0300 	sbcs.w	r3, r7, #0
 8004cf6:	da06      	bge.n	8004d06 <_vfprintf_r+0x286>
 8004cf8:	4276      	negs	r6, r6
 8004cfa:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004cfe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004d02:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004d06:	2301      	movs	r3, #1
 8004d08:	e2d0      	b.n	80052ac <_vfprintf_r+0x82c>
 8004d0a:	bf00      	nop
 8004d0c:	f3af 8000 	nop.w
	...
 8004d18:	0800864c 	.word	0x0800864c
 8004d1c:	0800866c 	.word	0x0800866c
 8004d20:	0800862c 	.word	0x0800862c
 8004d24:	b10b      	cbz	r3, 8004d2a <_vfprintf_r+0x2aa>
 8004d26:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004d2a:	4ba2      	ldr	r3, [pc, #648]	; (8004fb4 <_vfprintf_r+0x534>)
 8004d2c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d2e:	06a9      	lsls	r1, r5, #26
 8004d30:	f140 8331 	bpl.w	8005396 <_vfprintf_r+0x916>
 8004d34:	3707      	adds	r7, #7
 8004d36:	f027 0707 	bic.w	r7, r7, #7
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	07eb      	lsls	r3, r5, #31
 8004d46:	d50b      	bpl.n	8004d60 <_vfprintf_r+0x2e0>
 8004d48:	ea56 0307 	orrs.w	r3, r6, r7
 8004d4c:	d008      	beq.n	8004d60 <_vfprintf_r+0x2e0>
 8004d4e:	2330      	movs	r3, #48	; 0x30
 8004d50:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004d54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004d58:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004d5c:	f045 0502 	orr.w	r5, r5, #2
 8004d60:	2302      	movs	r3, #2
 8004d62:	e2a0      	b.n	80052a6 <_vfprintf_r+0x826>
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	d1b1      	bne.n	8004ccc <_vfprintf_r+0x24c>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	e7ae      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004d6e:	f045 0501 	orr.w	r5, r5, #1
 8004d72:	e7ab      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004d74:	683e      	ldr	r6, [r7, #0]
 8004d76:	960b      	str	r6, [sp, #44]	; 0x2c
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	f107 0104 	add.w	r1, r7, #4
 8004d7e:	daa7      	bge.n	8004cd0 <_vfprintf_r+0x250>
 8004d80:	4276      	negs	r6, r6
 8004d82:	960b      	str	r6, [sp, #44]	; 0x2c
 8004d84:	460f      	mov	r7, r1
 8004d86:	f045 0504 	orr.w	r5, r5, #4
 8004d8a:	e79f      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004d8c:	9905      	ldr	r1, [sp, #20]
 8004d8e:	1c4e      	adds	r6, r1, #1
 8004d90:	7809      	ldrb	r1, [r1, #0]
 8004d92:	9102      	str	r1, [sp, #8]
 8004d94:	292a      	cmp	r1, #42	; 0x2a
 8004d96:	d010      	beq.n	8004dba <_vfprintf_r+0x33a>
 8004d98:	f04f 0a00 	mov.w	sl, #0
 8004d9c:	9605      	str	r6, [sp, #20]
 8004d9e:	9902      	ldr	r1, [sp, #8]
 8004da0:	3930      	subs	r1, #48	; 0x30
 8004da2:	2909      	cmp	r1, #9
 8004da4:	f63f af24 	bhi.w	8004bf0 <_vfprintf_r+0x170>
 8004da8:	fb00 1a0a 	mla	sl, r0, sl, r1
 8004dac:	9905      	ldr	r1, [sp, #20]
 8004dae:	460e      	mov	r6, r1
 8004db0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004db4:	9102      	str	r1, [sp, #8]
 8004db6:	9605      	str	r6, [sp, #20]
 8004db8:	e7f1      	b.n	8004d9e <_vfprintf_r+0x31e>
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	9605      	str	r6, [sp, #20]
 8004dbe:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8004dc2:	3704      	adds	r7, #4
 8004dc4:	e782      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004dc6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004dca:	e77f      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004dcc:	2100      	movs	r1, #0
 8004dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8004dd0:	9902      	ldr	r1, [sp, #8]
 8004dd2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004dd4:	3930      	subs	r1, #48	; 0x30
 8004dd6:	fb00 1106 	mla	r1, r0, r6, r1
 8004dda:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ddc:	9905      	ldr	r1, [sp, #20]
 8004dde:	460e      	mov	r6, r1
 8004de0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004de4:	9102      	str	r1, [sp, #8]
 8004de6:	9902      	ldr	r1, [sp, #8]
 8004de8:	9605      	str	r6, [sp, #20]
 8004dea:	3930      	subs	r1, #48	; 0x30
 8004dec:	2909      	cmp	r1, #9
 8004dee:	d9ef      	bls.n	8004dd0 <_vfprintf_r+0x350>
 8004df0:	e6fe      	b.n	8004bf0 <_vfprintf_r+0x170>
 8004df2:	f045 0508 	orr.w	r5, r5, #8
 8004df6:	e769      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004df8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004dfc:	e766      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004dfe:	9905      	ldr	r1, [sp, #20]
 8004e00:	7809      	ldrb	r1, [r1, #0]
 8004e02:	296c      	cmp	r1, #108	; 0x6c
 8004e04:	d105      	bne.n	8004e12 <_vfprintf_r+0x392>
 8004e06:	9905      	ldr	r1, [sp, #20]
 8004e08:	3101      	adds	r1, #1
 8004e0a:	9105      	str	r1, [sp, #20]
 8004e0c:	f045 0520 	orr.w	r5, r5, #32
 8004e10:	e75c      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004e12:	f045 0510 	orr.w	r5, r5, #16
 8004e16:	e759      	b.n	8004ccc <_vfprintf_r+0x24c>
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004e24:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004e28:	f04f 0a01 	mov.w	sl, #1
 8004e2c:	9608      	str	r6, [sp, #32]
 8004e2e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8004e32:	e11e      	b.n	8005072 <_vfprintf_r+0x5f2>
 8004e34:	b10b      	cbz	r3, 8004e3a <_vfprintf_r+0x3ba>
 8004e36:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004e3a:	f045 0510 	orr.w	r5, r5, #16
 8004e3e:	e74c      	b.n	8004cda <_vfprintf_r+0x25a>
 8004e40:	f015 0f10 	tst.w	r5, #16
 8004e44:	f107 0304 	add.w	r3, r7, #4
 8004e48:	d003      	beq.n	8004e52 <_vfprintf_r+0x3d2>
 8004e4a:	683e      	ldr	r6, [r7, #0]
 8004e4c:	9304      	str	r3, [sp, #16]
 8004e4e:	17f7      	asrs	r7, r6, #31
 8004e50:	e74e      	b.n	8004cf0 <_vfprintf_r+0x270>
 8004e52:	683e      	ldr	r6, [r7, #0]
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e5a:	bf18      	it	ne
 8004e5c:	b236      	sxthne	r6, r6
 8004e5e:	e7f6      	b.n	8004e4e <_vfprintf_r+0x3ce>
 8004e60:	b10b      	cbz	r3, 8004e66 <_vfprintf_r+0x3e6>
 8004e62:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004e66:	3707      	adds	r7, #7
 8004e68:	f027 0707 	bic.w	r7, r7, #7
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	ed97 7b00 	vldr	d7, [r7]
 8004e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	9312      	str	r3, [sp, #72]	; 0x48
 8004e7e:	9b07      	ldr	r3, [sp, #28]
 8004e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <_vfprintf_r+0x538>)
 8004e8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004e90:	f7fb fe48 	bl	8000b24 <__aeabi_dcmpun>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	f040 85e3 	bne.w	8005a60 <_vfprintf_r+0xfe0>
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <_vfprintf_r+0x538>)
 8004ea0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004ea4:	f7fb fe20 	bl	8000ae8 <__aeabi_dcmple>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f040 85d9 	bne.w	8005a60 <_vfprintf_r+0xfe0>
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb6:	f7fb fe0d 	bl	8000ad4 <__aeabi_dcmplt>
 8004eba:	b110      	cbz	r0, 8004ec2 <_vfprintf_r+0x442>
 8004ebc:	232d      	movs	r3, #45	; 0x2d
 8004ebe:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <_vfprintf_r+0x53c>)
 8004ec4:	4a3e      	ldr	r2, [pc, #248]	; (8004fc0 <_vfprintf_r+0x540>)
 8004ec6:	9902      	ldr	r1, [sp, #8]
 8004ec8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004ecc:	2947      	cmp	r1, #71	; 0x47
 8004ece:	bfcc      	ite	gt
 8004ed0:	4691      	movgt	r9, r2
 8004ed2:	4699      	movle	r9, r3
 8004ed4:	f04f 0a03 	mov.w	sl, #3
 8004ed8:	2600      	movs	r6, #0
 8004eda:	9608      	str	r6, [sp, #32]
 8004edc:	e0c9      	b.n	8005072 <_vfprintf_r+0x5f2>
 8004ede:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004ee2:	d022      	beq.n	8004f2a <_vfprintf_r+0x4aa>
 8004ee4:	9b02      	ldr	r3, [sp, #8]
 8004ee6:	f023 0320 	bic.w	r3, r3, #32
 8004eea:	2b47      	cmp	r3, #71	; 0x47
 8004eec:	d104      	bne.n	8004ef8 <_vfprintf_r+0x478>
 8004eee:	f1ba 0f00 	cmp.w	sl, #0
 8004ef2:	bf08      	it	eq
 8004ef4:	f04f 0a01 	moveq.w	sl, #1
 8004ef8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004efc:	9314      	str	r3, [sp, #80]	; 0x50
 8004efe:	9b07      	ldr	r3, [sp, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da15      	bge.n	8004f30 <_vfprintf_r+0x4b0>
 8004f04:	9b06      	ldr	r3, [sp, #24]
 8004f06:	930e      	str	r3, [sp, #56]	; 0x38
 8004f08:	9b07      	ldr	r3, [sp, #28]
 8004f0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f10:	232d      	movs	r3, #45	; 0x2d
 8004f12:	930c      	str	r3, [sp, #48]	; 0x30
 8004f14:	9b02      	ldr	r3, [sp, #8]
 8004f16:	f023 0720 	bic.w	r7, r3, #32
 8004f1a:	2f46      	cmp	r7, #70	; 0x46
 8004f1c:	d00e      	beq.n	8004f3c <_vfprintf_r+0x4bc>
 8004f1e:	2f45      	cmp	r7, #69	; 0x45
 8004f20:	d146      	bne.n	8004fb0 <_vfprintf_r+0x530>
 8004f22:	f10a 0601 	add.w	r6, sl, #1
 8004f26:	2102      	movs	r1, #2
 8004f28:	e00a      	b.n	8004f40 <_vfprintf_r+0x4c0>
 8004f2a:	f04f 0a06 	mov.w	sl, #6
 8004f2e:	e7e3      	b.n	8004ef8 <_vfprintf_r+0x478>
 8004f30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004f34:	2300      	movs	r3, #0
 8004f36:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004f3a:	e7ea      	b.n	8004f12 <_vfprintf_r+0x492>
 8004f3c:	4656      	mov	r6, sl
 8004f3e:	2103      	movs	r1, #3
 8004f40:	ab1d      	add	r3, sp, #116	; 0x74
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	ab1a      	add	r3, sp, #104	; 0x68
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	ab19      	add	r3, sp, #100	; 0x64
 8004f4c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004f50:	4658      	mov	r0, fp
 8004f52:	f000 ff0d 	bl	8005d70 <_dtoa_r>
 8004f56:	2f47      	cmp	r7, #71	; 0x47
 8004f58:	4681      	mov	r9, r0
 8004f5a:	d102      	bne.n	8004f62 <_vfprintf_r+0x4e2>
 8004f5c:	07eb      	lsls	r3, r5, #31
 8004f5e:	f140 858c 	bpl.w	8005a7a <_vfprintf_r+0xffa>
 8004f62:	eb09 0306 	add.w	r3, r9, r6
 8004f66:	2f46      	cmp	r7, #70	; 0x46
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	d111      	bne.n	8004f90 <_vfprintf_r+0x510>
 8004f6c:	f899 3000 	ldrb.w	r3, [r9]
 8004f70:	2b30      	cmp	r3, #48	; 0x30
 8004f72:	d109      	bne.n	8004f88 <_vfprintf_r+0x508>
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f7c:	f7fb fda0 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f80:	b910      	cbnz	r0, 8004f88 <_vfprintf_r+0x508>
 8004f82:	f1c6 0601 	rsb	r6, r6, #1
 8004f86:	9619      	str	r6, [sp, #100]	; 0x64
 8004f88:	9a03      	ldr	r2, [sp, #12]
 8004f8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f8c:	441a      	add	r2, r3
 8004f8e:	9203      	str	r2, [sp, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f98:	f7fb fd92 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f9c:	b990      	cbnz	r0, 8004fc4 <_vfprintf_r+0x544>
 8004f9e:	2230      	movs	r2, #48	; 0x30
 8004fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fa2:	9903      	ldr	r1, [sp, #12]
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	d90f      	bls.n	8004fc8 <_vfprintf_r+0x548>
 8004fa8:	1c59      	adds	r1, r3, #1
 8004faa:	911d      	str	r1, [sp, #116]	; 0x74
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e7f7      	b.n	8004fa0 <_vfprintf_r+0x520>
 8004fb0:	4656      	mov	r6, sl
 8004fb2:	e7b8      	b.n	8004f26 <_vfprintf_r+0x4a6>
 8004fb4:	080085d8 	.word	0x080085d8
 8004fb8:	7fefffff 	.word	0x7fefffff
 8004fbc:	080085c8 	.word	0x080085c8
 8004fc0:	080085cc 	.word	0x080085cc
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	931d      	str	r3, [sp, #116]	; 0x74
 8004fc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fca:	2f47      	cmp	r7, #71	; 0x47
 8004fcc:	eba3 0309 	sub.w	r3, r3, r9
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	f040 80f8 	bne.w	80051c6 <_vfprintf_r+0x746>
 8004fd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fd8:	1cdf      	adds	r7, r3, #3
 8004fda:	db02      	blt.n	8004fe2 <_vfprintf_r+0x562>
 8004fdc:	459a      	cmp	sl, r3
 8004fde:	f280 811f 	bge.w	8005220 <_vfprintf_r+0x7a0>
 8004fe2:	9b02      	ldr	r3, [sp, #8]
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	9302      	str	r3, [sp, #8]
 8004fe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004fea:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004fee:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8004ff2:	1e53      	subs	r3, r2, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	9319      	str	r3, [sp, #100]	; 0x64
 8004ff8:	bfb6      	itet	lt
 8004ffa:	f1c2 0301 	rsblt	r3, r2, #1
 8004ffe:	222b      	movge	r2, #43	; 0x2b
 8005000:	222d      	movlt	r2, #45	; 0x2d
 8005002:	2b09      	cmp	r3, #9
 8005004:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005008:	f340 80fa 	ble.w	8005200 <_vfprintf_r+0x780>
 800500c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005010:	260a      	movs	r6, #10
 8005012:	fb93 f0f6 	sdiv	r0, r3, r6
 8005016:	fb06 3310 	mls	r3, r6, r0, r3
 800501a:	3330      	adds	r3, #48	; 0x30
 800501c:	2809      	cmp	r0, #9
 800501e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005022:	f102 31ff 	add.w	r1, r2, #4294967295
 8005026:	4603      	mov	r3, r0
 8005028:	f300 80e3 	bgt.w	80051f2 <_vfprintf_r+0x772>
 800502c:	3330      	adds	r3, #48	; 0x30
 800502e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005032:	3a02      	subs	r2, #2
 8005034:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005038:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800503c:	4282      	cmp	r2, r0
 800503e:	4619      	mov	r1, r3
 8005040:	f0c0 80d9 	bcc.w	80051f6 <_vfprintf_r+0x776>
 8005044:	9a03      	ldr	r2, [sp, #12]
 8005046:	ab1b      	add	r3, sp, #108	; 0x6c
 8005048:	1acb      	subs	r3, r1, r3
 800504a:	2a01      	cmp	r2, #1
 800504c:	9310      	str	r3, [sp, #64]	; 0x40
 800504e:	eb03 0a02 	add.w	sl, r3, r2
 8005052:	dc03      	bgt.n	800505c <_vfprintf_r+0x5dc>
 8005054:	f015 0301 	ands.w	r3, r5, #1
 8005058:	9308      	str	r3, [sp, #32]
 800505a:	d003      	beq.n	8005064 <_vfprintf_r+0x5e4>
 800505c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505e:	449a      	add	sl, r3
 8005060:	2300      	movs	r3, #0
 8005062:	9308      	str	r3, [sp, #32]
 8005064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005066:	b113      	cbz	r3, 800506e <_vfprintf_r+0x5ee>
 8005068:	232d      	movs	r3, #45	; 0x2d
 800506a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800506e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005070:	2600      	movs	r6, #0
 8005072:	4556      	cmp	r6, sl
 8005074:	4633      	mov	r3, r6
 8005076:	bfb8      	it	lt
 8005078:	4653      	movlt	r3, sl
 800507a:	930c      	str	r3, [sp, #48]	; 0x30
 800507c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005080:	b113      	cbz	r3, 8005088 <_vfprintf_r+0x608>
 8005082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005084:	3301      	adds	r3, #1
 8005086:	930c      	str	r3, [sp, #48]	; 0x30
 8005088:	f015 0302 	ands.w	r3, r5, #2
 800508c:	9314      	str	r3, [sp, #80]	; 0x50
 800508e:	bf1e      	ittt	ne
 8005090:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8005092:	3302      	addne	r3, #2
 8005094:	930c      	strne	r3, [sp, #48]	; 0x30
 8005096:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800509a:	9315      	str	r3, [sp, #84]	; 0x54
 800509c:	d114      	bne.n	80050c8 <_vfprintf_r+0x648>
 800509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050a2:	1a9f      	subs	r7, r3, r2
 80050a4:	2f00      	cmp	r7, #0
 80050a6:	dd0f      	ble.n	80050c8 <_vfprintf_r+0x648>
 80050a8:	4ba8      	ldr	r3, [pc, #672]	; (800534c <_vfprintf_r+0x8cc>)
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	2f10      	cmp	r7, #16
 80050ae:	f300 81d3 	bgt.w	8005458 <_vfprintf_r+0x9d8>
 80050b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050b4:	6067      	str	r7, [r4, #4]
 80050b6:	441f      	add	r7, r3
 80050b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050ba:	9721      	str	r7, [sp, #132]	; 0x84
 80050bc:	3301      	adds	r3, #1
 80050be:	2b07      	cmp	r3, #7
 80050c0:	9320      	str	r3, [sp, #128]	; 0x80
 80050c2:	f300 81e0 	bgt.w	8005486 <_vfprintf_r+0xa06>
 80050c6:	3408      	adds	r4, #8
 80050c8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80050cc:	b173      	cbz	r3, 80050ec <_vfprintf_r+0x66c>
 80050ce:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	2301      	movs	r3, #1
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050da:	3301      	adds	r3, #1
 80050dc:	9321      	str	r3, [sp, #132]	; 0x84
 80050de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050e0:	3301      	adds	r3, #1
 80050e2:	2b07      	cmp	r3, #7
 80050e4:	9320      	str	r3, [sp, #128]	; 0x80
 80050e6:	f300 81d8 	bgt.w	800549a <_vfprintf_r+0xa1a>
 80050ea:	3408      	adds	r4, #8
 80050ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050ee:	b16b      	cbz	r3, 800510c <_vfprintf_r+0x68c>
 80050f0:	ab18      	add	r3, sp, #96	; 0x60
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	2302      	movs	r3, #2
 80050f6:	6063      	str	r3, [r4, #4]
 80050f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050fa:	3302      	adds	r3, #2
 80050fc:	9321      	str	r3, [sp, #132]	; 0x84
 80050fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005100:	3301      	adds	r3, #1
 8005102:	2b07      	cmp	r3, #7
 8005104:	9320      	str	r3, [sp, #128]	; 0x80
 8005106:	f300 81d2 	bgt.w	80054ae <_vfprintf_r+0xa2e>
 800510a:	3408      	adds	r4, #8
 800510c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d114      	bne.n	800513c <_vfprintf_r+0x6bc>
 8005112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005116:	1a9f      	subs	r7, r3, r2
 8005118:	2f00      	cmp	r7, #0
 800511a:	dd0f      	ble.n	800513c <_vfprintf_r+0x6bc>
 800511c:	4b8c      	ldr	r3, [pc, #560]	; (8005350 <_vfprintf_r+0x8d0>)
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2f10      	cmp	r7, #16
 8005122:	f300 81ce 	bgt.w	80054c2 <_vfprintf_r+0xa42>
 8005126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005128:	6067      	str	r7, [r4, #4]
 800512a:	441f      	add	r7, r3
 800512c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800512e:	9721      	str	r7, [sp, #132]	; 0x84
 8005130:	3301      	adds	r3, #1
 8005132:	2b07      	cmp	r3, #7
 8005134:	9320      	str	r3, [sp, #128]	; 0x80
 8005136:	f300 81dd 	bgt.w	80054f4 <_vfprintf_r+0xa74>
 800513a:	3408      	adds	r4, #8
 800513c:	eba6 060a 	sub.w	r6, r6, sl
 8005140:	2e00      	cmp	r6, #0
 8005142:	dd0f      	ble.n	8005164 <_vfprintf_r+0x6e4>
 8005144:	4f82      	ldr	r7, [pc, #520]	; (8005350 <_vfprintf_r+0x8d0>)
 8005146:	6027      	str	r7, [r4, #0]
 8005148:	2e10      	cmp	r6, #16
 800514a:	f300 81dd 	bgt.w	8005508 <_vfprintf_r+0xa88>
 800514e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005150:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005152:	6066      	str	r6, [r4, #4]
 8005154:	3301      	adds	r3, #1
 8005156:	4406      	add	r6, r0
 8005158:	2b07      	cmp	r3, #7
 800515a:	9621      	str	r6, [sp, #132]	; 0x84
 800515c:	9320      	str	r3, [sp, #128]	; 0x80
 800515e:	f300 81ea 	bgt.w	8005536 <_vfprintf_r+0xab6>
 8005162:	3408      	adds	r4, #8
 8005164:	05e9      	lsls	r1, r5, #23
 8005166:	f100 81f0 	bmi.w	800554a <_vfprintf_r+0xaca>
 800516a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800516c:	e884 0600 	stmia.w	r4, {r9, sl}
 8005170:	4453      	add	r3, sl
 8005172:	9321      	str	r3, [sp, #132]	; 0x84
 8005174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005176:	3301      	adds	r3, #1
 8005178:	2b07      	cmp	r3, #7
 800517a:	9320      	str	r3, [sp, #128]	; 0x80
 800517c:	f340 841b 	ble.w	80059b6 <_vfprintf_r+0xf36>
 8005180:	aa1f      	add	r2, sp, #124	; 0x7c
 8005182:	4641      	mov	r1, r8
 8005184:	4658      	mov	r0, fp
 8005186:	f002 fc66 	bl	8007a56 <__sprint_r>
 800518a:	2800      	cmp	r0, #0
 800518c:	f040 8433 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005190:	ac2c      	add	r4, sp, #176	; 0xb0
 8005192:	0768      	lsls	r0, r5, #29
 8005194:	f100 8412 	bmi.w	80059bc <_vfprintf_r+0xf3c>
 8005198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800519c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800519e:	428a      	cmp	r2, r1
 80051a0:	bfac      	ite	ge
 80051a2:	189b      	addge	r3, r3, r2
 80051a4:	185b      	addlt	r3, r3, r1
 80051a6:	930a      	str	r3, [sp, #40]	; 0x28
 80051a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051aa:	b13b      	cbz	r3, 80051bc <_vfprintf_r+0x73c>
 80051ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80051ae:	4641      	mov	r1, r8
 80051b0:	4658      	mov	r0, fp
 80051b2:	f002 fc50 	bl	8007a56 <__sprint_r>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f040 841d 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80051bc:	2300      	movs	r3, #0
 80051be:	9320      	str	r3, [sp, #128]	; 0x80
 80051c0:	9f04      	ldr	r7, [sp, #16]
 80051c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80051c4:	e4e9      	b.n	8004b9a <_vfprintf_r+0x11a>
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	2b65      	cmp	r3, #101	; 0x65
 80051ca:	f77f af0d 	ble.w	8004fe8 <_vfprintf_r+0x568>
 80051ce:	9b02      	ldr	r3, [sp, #8]
 80051d0:	2b66      	cmp	r3, #102	; 0x66
 80051d2:	d125      	bne.n	8005220 <_vfprintf_r+0x7a0>
 80051d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	dd1a      	ble.n	8005210 <_vfprintf_r+0x790>
 80051da:	f1ba 0f00 	cmp.w	sl, #0
 80051de:	d101      	bne.n	80051e4 <_vfprintf_r+0x764>
 80051e0:	07ee      	lsls	r6, r5, #31
 80051e2:	d502      	bpl.n	80051ea <_vfprintf_r+0x76a>
 80051e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e6:	4413      	add	r3, r2
 80051e8:	4453      	add	r3, sl
 80051ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051ec:	9208      	str	r2, [sp, #32]
 80051ee:	469a      	mov	sl, r3
 80051f0:	e738      	b.n	8005064 <_vfprintf_r+0x5e4>
 80051f2:	460a      	mov	r2, r1
 80051f4:	e70d      	b.n	8005012 <_vfprintf_r+0x592>
 80051f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e71d      	b.n	800503c <_vfprintf_r+0x5bc>
 8005200:	2230      	movs	r2, #48	; 0x30
 8005202:	4413      	add	r3, r2
 8005204:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005208:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800520c:	a91c      	add	r1, sp, #112	; 0x70
 800520e:	e719      	b.n	8005044 <_vfprintf_r+0x5c4>
 8005210:	f1ba 0f00 	cmp.w	sl, #0
 8005214:	d101      	bne.n	800521a <_vfprintf_r+0x79a>
 8005216:	07ed      	lsls	r5, r5, #31
 8005218:	d515      	bpl.n	8005246 <_vfprintf_r+0x7c6>
 800521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	e7e3      	b.n	80051e8 <_vfprintf_r+0x768>
 8005220:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	429a      	cmp	r2, r3
 8005226:	db06      	blt.n	8005236 <_vfprintf_r+0x7b6>
 8005228:	07e8      	lsls	r0, r5, #31
 800522a:	d50e      	bpl.n	800524a <_vfprintf_r+0x7ca>
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	4413      	add	r3, r2
 8005230:	2267      	movs	r2, #103	; 0x67
 8005232:	9202      	str	r2, [sp, #8]
 8005234:	e7d9      	b.n	80051ea <_vfprintf_r+0x76a>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800523a:	2a00      	cmp	r2, #0
 800523c:	440b      	add	r3, r1
 800523e:	dcf7      	bgt.n	8005230 <_vfprintf_r+0x7b0>
 8005240:	f1c2 0201 	rsb	r2, r2, #1
 8005244:	e7f3      	b.n	800522e <_vfprintf_r+0x7ae>
 8005246:	2301      	movs	r3, #1
 8005248:	e7cf      	b.n	80051ea <_vfprintf_r+0x76a>
 800524a:	4613      	mov	r3, r2
 800524c:	e7f0      	b.n	8005230 <_vfprintf_r+0x7b0>
 800524e:	b10b      	cbz	r3, 8005254 <_vfprintf_r+0x7d4>
 8005250:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005254:	f015 0f20 	tst.w	r5, #32
 8005258:	f107 0304 	add.w	r3, r7, #4
 800525c:	d008      	beq.n	8005270 <_vfprintf_r+0x7f0>
 800525e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	17ce      	asrs	r6, r1, #31
 8005264:	4608      	mov	r0, r1
 8005266:	4631      	mov	r1, r6
 8005268:	e9c2 0100 	strd	r0, r1, [r2]
 800526c:	461f      	mov	r7, r3
 800526e:	e494      	b.n	8004b9a <_vfprintf_r+0x11a>
 8005270:	06e9      	lsls	r1, r5, #27
 8005272:	d503      	bpl.n	800527c <_vfprintf_r+0x7fc>
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	e7f7      	b.n	800526c <_vfprintf_r+0x7ec>
 800527c:	066a      	lsls	r2, r5, #25
 800527e:	d5f9      	bpl.n	8005274 <_vfprintf_r+0x7f4>
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005286:	8011      	strh	r1, [r2, #0]
 8005288:	e7f0      	b.n	800526c <_vfprintf_r+0x7ec>
 800528a:	f045 0510 	orr.w	r5, r5, #16
 800528e:	f015 0320 	ands.w	r3, r5, #32
 8005292:	d022      	beq.n	80052da <_vfprintf_r+0x85a>
 8005294:	3707      	adds	r7, #7
 8005296:	f027 0707 	bic.w	r7, r7, #7
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	2300      	movs	r3, #0
 80052a6:	2200      	movs	r2, #0
 80052a8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80052ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80052b0:	f000 83e8 	beq.w	8005a84 <_vfprintf_r+0x1004>
 80052b4:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80052b8:	9208      	str	r2, [sp, #32]
 80052ba:	ea56 0207 	orrs.w	r2, r6, r7
 80052be:	f040 83e6 	bne.w	8005a8e <_vfprintf_r+0x100e>
 80052c2:	f1ba 0f00 	cmp.w	sl, #0
 80052c6:	f000 80a9 	beq.w	800541c <_vfprintf_r+0x99c>
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d075      	beq.n	80053ba <_vfprintf_r+0x93a>
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	f000 8090 	beq.w	80053f4 <_vfprintf_r+0x974>
 80052d4:	2600      	movs	r6, #0
 80052d6:	2700      	movs	r7, #0
 80052d8:	e3df      	b.n	8005a9a <_vfprintf_r+0x101a>
 80052da:	1d3a      	adds	r2, r7, #4
 80052dc:	f015 0110 	ands.w	r1, r5, #16
 80052e0:	9204      	str	r2, [sp, #16]
 80052e2:	d002      	beq.n	80052ea <_vfprintf_r+0x86a>
 80052e4:	683e      	ldr	r6, [r7, #0]
 80052e6:	2700      	movs	r7, #0
 80052e8:	e7dd      	b.n	80052a6 <_vfprintf_r+0x826>
 80052ea:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80052ee:	d0f9      	beq.n	80052e4 <_vfprintf_r+0x864>
 80052f0:	883e      	ldrh	r6, [r7, #0]
 80052f2:	2700      	movs	r7, #0
 80052f4:	e7d6      	b.n	80052a4 <_vfprintf_r+0x824>
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	2330      	movs	r3, #48	; 0x30
 80052fc:	2278      	movs	r2, #120	; 0x78
 80052fe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005302:	4b14      	ldr	r3, [pc, #80]	; (8005354 <_vfprintf_r+0x8d4>)
 8005304:	683e      	ldr	r6, [r7, #0]
 8005306:	9311      	str	r3, [sp, #68]	; 0x44
 8005308:	2700      	movs	r7, #0
 800530a:	f045 0502 	orr.w	r5, r5, #2
 800530e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005312:	2302      	movs	r3, #2
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	e7c6      	b.n	80052a6 <_vfprintf_r+0x826>
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	2600      	movs	r6, #0
 800531c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005320:	9304      	str	r3, [sp, #16]
 8005322:	f8d7 9000 	ldr.w	r9, [r7]
 8005326:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800532a:	d00a      	beq.n	8005342 <_vfprintf_r+0x8c2>
 800532c:	4652      	mov	r2, sl
 800532e:	4631      	mov	r1, r6
 8005330:	4648      	mov	r0, r9
 8005332:	f7fa ff4d 	bl	80001d0 <memchr>
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 808c 	beq.w	8005454 <_vfprintf_r+0x9d4>
 800533c:	eba0 0a09 	sub.w	sl, r0, r9
 8005340:	e5cb      	b.n	8004eda <_vfprintf_r+0x45a>
 8005342:	4648      	mov	r0, r9
 8005344:	f7fa ff94 	bl	8000270 <strlen>
 8005348:	4682      	mov	sl, r0
 800534a:	e5c6      	b.n	8004eda <_vfprintf_r+0x45a>
 800534c:	080085fc 	.word	0x080085fc
 8005350:	0800860c 	.word	0x0800860c
 8005354:	080085e9 	.word	0x080085e9
 8005358:	f045 0510 	orr.w	r5, r5, #16
 800535c:	06ae      	lsls	r6, r5, #26
 800535e:	d509      	bpl.n	8005374 <_vfprintf_r+0x8f4>
 8005360:	3707      	adds	r7, #7
 8005362:	f027 0707 	bic.w	r7, r7, #7
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	2301      	movs	r3, #1
 8005372:	e798      	b.n	80052a6 <_vfprintf_r+0x826>
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	f015 0f10 	tst.w	r5, #16
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	d001      	beq.n	8005382 <_vfprintf_r+0x902>
 800537e:	683e      	ldr	r6, [r7, #0]
 8005380:	e002      	b.n	8005388 <_vfprintf_r+0x908>
 8005382:	0668      	lsls	r0, r5, #25
 8005384:	d5fb      	bpl.n	800537e <_vfprintf_r+0x8fe>
 8005386:	883e      	ldrh	r6, [r7, #0]
 8005388:	2700      	movs	r7, #0
 800538a:	e7f1      	b.n	8005370 <_vfprintf_r+0x8f0>
 800538c:	b10b      	cbz	r3, 8005392 <_vfprintf_r+0x912>
 800538e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005392:	4ba2      	ldr	r3, [pc, #648]	; (800561c <_vfprintf_r+0xb9c>)
 8005394:	e4ca      	b.n	8004d2c <_vfprintf_r+0x2ac>
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	f015 0f10 	tst.w	r5, #16
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	d001      	beq.n	80053a4 <_vfprintf_r+0x924>
 80053a0:	683e      	ldr	r6, [r7, #0]
 80053a2:	e002      	b.n	80053aa <_vfprintf_r+0x92a>
 80053a4:	066a      	lsls	r2, r5, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_vfprintf_r+0x920>
 80053a8:	883e      	ldrh	r6, [r7, #0]
 80053aa:	2700      	movs	r7, #0
 80053ac:	e4ca      	b.n	8004d44 <_vfprintf_r+0x2c4>
 80053ae:	464b      	mov	r3, r9
 80053b0:	e374      	b.n	8005a9c <_vfprintf_r+0x101c>
 80053b2:	2f00      	cmp	r7, #0
 80053b4:	bf08      	it	eq
 80053b6:	2e0a      	cmpeq	r6, #10
 80053b8:	d205      	bcs.n	80053c6 <_vfprintf_r+0x946>
 80053ba:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80053be:	3630      	adds	r6, #48	; 0x30
 80053c0:	f809 6d41 	strb.w	r6, [r9, #-65]!
 80053c4:	e385      	b.n	8005ad2 <_vfprintf_r+0x1052>
 80053c6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	220a      	movs	r2, #10
 80053d0:	2300      	movs	r3, #0
 80053d2:	f7fb fbe5 	bl	8000ba0 <__aeabi_uldivmod>
 80053d6:	3230      	adds	r2, #48	; 0x30
 80053d8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80053dc:	2300      	movs	r3, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	220a      	movs	r2, #10
 80053e4:	f7fb fbdc 	bl	8000ba0 <__aeabi_uldivmod>
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	ea56 0307 	orrs.w	r3, r6, r7
 80053f0:	d1eb      	bne.n	80053ca <_vfprintf_r+0x94a>
 80053f2:	e36e      	b.n	8005ad2 <_vfprintf_r+0x1052>
 80053f4:	2600      	movs	r6, #0
 80053f6:	2700      	movs	r7, #0
 80053f8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80053fc:	f006 030f 	and.w	r3, r6, #15
 8005400:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005408:	0933      	lsrs	r3, r6, #4
 800540a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800540e:	093a      	lsrs	r2, r7, #4
 8005410:	461e      	mov	r6, r3
 8005412:	4617      	mov	r7, r2
 8005414:	ea56 0307 	orrs.w	r3, r6, r7
 8005418:	d1f0      	bne.n	80053fc <_vfprintf_r+0x97c>
 800541a:	e35a      	b.n	8005ad2 <_vfprintf_r+0x1052>
 800541c:	b93b      	cbnz	r3, 800542e <_vfprintf_r+0x9ae>
 800541e:	07e8      	lsls	r0, r5, #31
 8005420:	d505      	bpl.n	800542e <_vfprintf_r+0x9ae>
 8005422:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8005426:	2330      	movs	r3, #48	; 0x30
 8005428:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800542c:	e351      	b.n	8005ad2 <_vfprintf_r+0x1052>
 800542e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005432:	e34e      	b.n	8005ad2 <_vfprintf_r+0x1052>
 8005434:	b10b      	cbz	r3, 800543a <_vfprintf_r+0x9ba>
 8005436:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800543a:	9b02      	ldr	r3, [sp, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8302 	beq.w	8005a46 <_vfprintf_r+0xfc6>
 8005442:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005446:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800544a:	2600      	movs	r6, #0
 800544c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005450:	9704      	str	r7, [sp, #16]
 8005452:	e4e9      	b.n	8004e28 <_vfprintf_r+0x3a8>
 8005454:	4606      	mov	r6, r0
 8005456:	e540      	b.n	8004eda <_vfprintf_r+0x45a>
 8005458:	2310      	movs	r3, #16
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800545e:	3310      	adds	r3, #16
 8005460:	9321      	str	r3, [sp, #132]	; 0x84
 8005462:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005464:	3301      	adds	r3, #1
 8005466:	2b07      	cmp	r3, #7
 8005468:	9320      	str	r3, [sp, #128]	; 0x80
 800546a:	dc02      	bgt.n	8005472 <_vfprintf_r+0x9f2>
 800546c:	3408      	adds	r4, #8
 800546e:	3f10      	subs	r7, #16
 8005470:	e61a      	b.n	80050a8 <_vfprintf_r+0x628>
 8005472:	aa1f      	add	r2, sp, #124	; 0x7c
 8005474:	4641      	mov	r1, r8
 8005476:	4658      	mov	r0, fp
 8005478:	f002 faed 	bl	8007a56 <__sprint_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	f040 82ba 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005482:	ac2c      	add	r4, sp, #176	; 0xb0
 8005484:	e7f3      	b.n	800546e <_vfprintf_r+0x9ee>
 8005486:	aa1f      	add	r2, sp, #124	; 0x7c
 8005488:	4641      	mov	r1, r8
 800548a:	4658      	mov	r0, fp
 800548c:	f002 fae3 	bl	8007a56 <__sprint_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	f040 82b0 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005496:	ac2c      	add	r4, sp, #176	; 0xb0
 8005498:	e616      	b.n	80050c8 <_vfprintf_r+0x648>
 800549a:	aa1f      	add	r2, sp, #124	; 0x7c
 800549c:	4641      	mov	r1, r8
 800549e:	4658      	mov	r0, fp
 80054a0:	f002 fad9 	bl	8007a56 <__sprint_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 82a6 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80054aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80054ac:	e61e      	b.n	80050ec <_vfprintf_r+0x66c>
 80054ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80054b0:	4641      	mov	r1, r8
 80054b2:	4658      	mov	r0, fp
 80054b4:	f002 facf 	bl	8007a56 <__sprint_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f040 829c 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80054be:	ac2c      	add	r4, sp, #176	; 0xb0
 80054c0:	e624      	b.n	800510c <_vfprintf_r+0x68c>
 80054c2:	2210      	movs	r2, #16
 80054c4:	6062      	str	r2, [r4, #4]
 80054c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054c8:	3210      	adds	r2, #16
 80054ca:	9221      	str	r2, [sp, #132]	; 0x84
 80054cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054ce:	3201      	adds	r2, #1
 80054d0:	2a07      	cmp	r2, #7
 80054d2:	9220      	str	r2, [sp, #128]	; 0x80
 80054d4:	dc02      	bgt.n	80054dc <_vfprintf_r+0xa5c>
 80054d6:	3408      	adds	r4, #8
 80054d8:	3f10      	subs	r7, #16
 80054da:	e620      	b.n	800511e <_vfprintf_r+0x69e>
 80054dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80054de:	4641      	mov	r1, r8
 80054e0:	4658      	mov	r0, fp
 80054e2:	9314      	str	r3, [sp, #80]	; 0x50
 80054e4:	f002 fab7 	bl	8007a56 <__sprint_r>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f040 8284 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80054ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80054f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054f2:	e7f1      	b.n	80054d8 <_vfprintf_r+0xa58>
 80054f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80054f6:	4641      	mov	r1, r8
 80054f8:	4658      	mov	r0, fp
 80054fa:	f002 faac 	bl	8007a56 <__sprint_r>
 80054fe:	2800      	cmp	r0, #0
 8005500:	f040 8279 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005504:	ac2c      	add	r4, sp, #176	; 0xb0
 8005506:	e619      	b.n	800513c <_vfprintf_r+0x6bc>
 8005508:	2310      	movs	r3, #16
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800550e:	3310      	adds	r3, #16
 8005510:	9321      	str	r3, [sp, #132]	; 0x84
 8005512:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005514:	3301      	adds	r3, #1
 8005516:	2b07      	cmp	r3, #7
 8005518:	9320      	str	r3, [sp, #128]	; 0x80
 800551a:	dc02      	bgt.n	8005522 <_vfprintf_r+0xaa2>
 800551c:	3408      	adds	r4, #8
 800551e:	3e10      	subs	r6, #16
 8005520:	e611      	b.n	8005146 <_vfprintf_r+0x6c6>
 8005522:	aa1f      	add	r2, sp, #124	; 0x7c
 8005524:	4641      	mov	r1, r8
 8005526:	4658      	mov	r0, fp
 8005528:	f002 fa95 	bl	8007a56 <__sprint_r>
 800552c:	2800      	cmp	r0, #0
 800552e:	f040 8262 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005532:	ac2c      	add	r4, sp, #176	; 0xb0
 8005534:	e7f3      	b.n	800551e <_vfprintf_r+0xa9e>
 8005536:	aa1f      	add	r2, sp, #124	; 0x7c
 8005538:	4641      	mov	r1, r8
 800553a:	4658      	mov	r0, fp
 800553c:	f002 fa8b 	bl	8007a56 <__sprint_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	f040 8258 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005546:	ac2c      	add	r4, sp, #176	; 0xb0
 8005548:	e60c      	b.n	8005164 <_vfprintf_r+0x6e4>
 800554a:	9b02      	ldr	r3, [sp, #8]
 800554c:	2b65      	cmp	r3, #101	; 0x65
 800554e:	f340 81ad 	ble.w	80058ac <_vfprintf_r+0xe2c>
 8005552:	2200      	movs	r2, #0
 8005554:	2300      	movs	r3, #0
 8005556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800555a:	f7fb fab1 	bl	8000ac0 <__aeabi_dcmpeq>
 800555e:	2800      	cmp	r0, #0
 8005560:	d062      	beq.n	8005628 <_vfprintf_r+0xba8>
 8005562:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <_vfprintf_r+0xba0>)
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	2301      	movs	r3, #1
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800556c:	3301      	adds	r3, #1
 800556e:	9321      	str	r3, [sp, #132]	; 0x84
 8005570:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005572:	3301      	adds	r3, #1
 8005574:	2b07      	cmp	r3, #7
 8005576:	9320      	str	r3, [sp, #128]	; 0x80
 8005578:	dc25      	bgt.n	80055c6 <_vfprintf_r+0xb46>
 800557a:	3408      	adds	r4, #8
 800557c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800557e:	9a03      	ldr	r2, [sp, #12]
 8005580:	4293      	cmp	r3, r2
 8005582:	db02      	blt.n	800558a <_vfprintf_r+0xb0a>
 8005584:	07ea      	lsls	r2, r5, #31
 8005586:	f57f ae04 	bpl.w	8005192 <_vfprintf_r+0x712>
 800558a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005596:	4413      	add	r3, r2
 8005598:	9321      	str	r3, [sp, #132]	; 0x84
 800559a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800559c:	3301      	adds	r3, #1
 800559e:	2b07      	cmp	r3, #7
 80055a0:	9320      	str	r3, [sp, #128]	; 0x80
 80055a2:	dc1a      	bgt.n	80055da <_vfprintf_r+0xb5a>
 80055a4:	3408      	adds	r4, #8
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	1e5e      	subs	r6, r3, #1
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	f77f adf1 	ble.w	8005192 <_vfprintf_r+0x712>
 80055b0:	4f1c      	ldr	r7, [pc, #112]	; (8005624 <_vfprintf_r+0xba4>)
 80055b2:	f04f 0910 	mov.w	r9, #16
 80055b6:	2e10      	cmp	r6, #16
 80055b8:	6027      	str	r7, [r4, #0]
 80055ba:	dc18      	bgt.n	80055ee <_vfprintf_r+0xb6e>
 80055bc:	6066      	str	r6, [r4, #4]
 80055be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c0:	441e      	add	r6, r3
 80055c2:	9621      	str	r6, [sp, #132]	; 0x84
 80055c4:	e5d6      	b.n	8005174 <_vfprintf_r+0x6f4>
 80055c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80055c8:	4641      	mov	r1, r8
 80055ca:	4658      	mov	r0, fp
 80055cc:	f002 fa43 	bl	8007a56 <__sprint_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f040 8210 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80055d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80055d8:	e7d0      	b.n	800557c <_vfprintf_r+0xafc>
 80055da:	aa1f      	add	r2, sp, #124	; 0x7c
 80055dc:	4641      	mov	r1, r8
 80055de:	4658      	mov	r0, fp
 80055e0:	f002 fa39 	bl	8007a56 <__sprint_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 8206 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80055ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80055ec:	e7db      	b.n	80055a6 <_vfprintf_r+0xb26>
 80055ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055f0:	f8c4 9004 	str.w	r9, [r4, #4]
 80055f4:	3310      	adds	r3, #16
 80055f6:	9321      	str	r3, [sp, #132]	; 0x84
 80055f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055fa:	3301      	adds	r3, #1
 80055fc:	2b07      	cmp	r3, #7
 80055fe:	9320      	str	r3, [sp, #128]	; 0x80
 8005600:	dc02      	bgt.n	8005608 <_vfprintf_r+0xb88>
 8005602:	3408      	adds	r4, #8
 8005604:	3e10      	subs	r6, #16
 8005606:	e7d6      	b.n	80055b6 <_vfprintf_r+0xb36>
 8005608:	aa1f      	add	r2, sp, #124	; 0x7c
 800560a:	4641      	mov	r1, r8
 800560c:	4658      	mov	r0, fp
 800560e:	f002 fa22 	bl	8007a56 <__sprint_r>
 8005612:	2800      	cmp	r0, #0
 8005614:	f040 81ef 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005618:	ac2c      	add	r4, sp, #176	; 0xb0
 800561a:	e7f3      	b.n	8005604 <_vfprintf_r+0xb84>
 800561c:	080085e9 	.word	0x080085e9
 8005620:	080085fa 	.word	0x080085fa
 8005624:	0800860c 	.word	0x0800860c
 8005628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc7a      	bgt.n	8005724 <_vfprintf_r+0xca4>
 800562e:	4b9d      	ldr	r3, [pc, #628]	; (80058a4 <_vfprintf_r+0xe24>)
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	2301      	movs	r3, #1
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005638:	3301      	adds	r3, #1
 800563a:	9321      	str	r3, [sp, #132]	; 0x84
 800563c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800563e:	3301      	adds	r3, #1
 8005640:	2b07      	cmp	r3, #7
 8005642:	9320      	str	r3, [sp, #128]	; 0x80
 8005644:	dc44      	bgt.n	80056d0 <_vfprintf_r+0xc50>
 8005646:	3408      	adds	r4, #8
 8005648:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800564a:	b923      	cbnz	r3, 8005656 <_vfprintf_r+0xbd6>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	b913      	cbnz	r3, 8005656 <_vfprintf_r+0xbd6>
 8005650:	07eb      	lsls	r3, r5, #31
 8005652:	f57f ad9e 	bpl.w	8005192 <_vfprintf_r+0x712>
 8005656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005662:	4413      	add	r3, r2
 8005664:	9321      	str	r3, [sp, #132]	; 0x84
 8005666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005668:	3301      	adds	r3, #1
 800566a:	2b07      	cmp	r3, #7
 800566c:	9320      	str	r3, [sp, #128]	; 0x80
 800566e:	dc39      	bgt.n	80056e4 <_vfprintf_r+0xc64>
 8005670:	f104 0308 	add.w	r3, r4, #8
 8005674:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005676:	2e00      	cmp	r6, #0
 8005678:	da19      	bge.n	80056ae <_vfprintf_r+0xc2e>
 800567a:	4f8b      	ldr	r7, [pc, #556]	; (80058a8 <_vfprintf_r+0xe28>)
 800567c:	4276      	negs	r6, r6
 800567e:	2410      	movs	r4, #16
 8005680:	2e10      	cmp	r6, #16
 8005682:	601f      	str	r7, [r3, #0]
 8005684:	dc38      	bgt.n	80056f8 <_vfprintf_r+0xc78>
 8005686:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005688:	605e      	str	r6, [r3, #4]
 800568a:	4416      	add	r6, r2
 800568c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800568e:	9621      	str	r6, [sp, #132]	; 0x84
 8005690:	3201      	adds	r2, #1
 8005692:	2a07      	cmp	r2, #7
 8005694:	f103 0308 	add.w	r3, r3, #8
 8005698:	9220      	str	r2, [sp, #128]	; 0x80
 800569a:	dd08      	ble.n	80056ae <_vfprintf_r+0xc2e>
 800569c:	aa1f      	add	r2, sp, #124	; 0x7c
 800569e:	4641      	mov	r1, r8
 80056a0:	4658      	mov	r0, fp
 80056a2:	f002 f9d8 	bl	8007a56 <__sprint_r>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f040 81a5 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80056ac:	ab2c      	add	r3, sp, #176	; 0xb0
 80056ae:	9a03      	ldr	r2, [sp, #12]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	9903      	ldr	r1, [sp, #12]
 80056b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b6:	f8c3 9000 	str.w	r9, [r3]
 80056ba:	440a      	add	r2, r1
 80056bc:	9221      	str	r2, [sp, #132]	; 0x84
 80056be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056c0:	3201      	adds	r2, #1
 80056c2:	2a07      	cmp	r2, #7
 80056c4:	9220      	str	r2, [sp, #128]	; 0x80
 80056c6:	f73f ad5b 	bgt.w	8005180 <_vfprintf_r+0x700>
 80056ca:	f103 0408 	add.w	r4, r3, #8
 80056ce:	e560      	b.n	8005192 <_vfprintf_r+0x712>
 80056d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80056d2:	4641      	mov	r1, r8
 80056d4:	4658      	mov	r0, fp
 80056d6:	f002 f9be 	bl	8007a56 <__sprint_r>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 818b 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80056e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80056e2:	e7b1      	b.n	8005648 <_vfprintf_r+0xbc8>
 80056e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80056e6:	4641      	mov	r1, r8
 80056e8:	4658      	mov	r0, fp
 80056ea:	f002 f9b4 	bl	8007a56 <__sprint_r>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f040 8181 	bne.w	80059f6 <_vfprintf_r+0xf76>
 80056f4:	ab2c      	add	r3, sp, #176	; 0xb0
 80056f6:	e7bd      	b.n	8005674 <_vfprintf_r+0xbf4>
 80056f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056fa:	605c      	str	r4, [r3, #4]
 80056fc:	3210      	adds	r2, #16
 80056fe:	9221      	str	r2, [sp, #132]	; 0x84
 8005700:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005702:	3201      	adds	r2, #1
 8005704:	2a07      	cmp	r2, #7
 8005706:	9220      	str	r2, [sp, #128]	; 0x80
 8005708:	dc02      	bgt.n	8005710 <_vfprintf_r+0xc90>
 800570a:	3308      	adds	r3, #8
 800570c:	3e10      	subs	r6, #16
 800570e:	e7b7      	b.n	8005680 <_vfprintf_r+0xc00>
 8005710:	aa1f      	add	r2, sp, #124	; 0x7c
 8005712:	4641      	mov	r1, r8
 8005714:	4658      	mov	r0, fp
 8005716:	f002 f99e 	bl	8007a56 <__sprint_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	f040 816b 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005720:	ab2c      	add	r3, sp, #176	; 0xb0
 8005722:	e7f3      	b.n	800570c <_vfprintf_r+0xc8c>
 8005724:	9b08      	ldr	r3, [sp, #32]
 8005726:	9a03      	ldr	r2, [sp, #12]
 8005728:	4293      	cmp	r3, r2
 800572a:	bfa8      	it	ge
 800572c:	4613      	movge	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	461e      	mov	r6, r3
 8005732:	dd0b      	ble.n	800574c <_vfprintf_r+0xccc>
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005738:	f8c4 9000 	str.w	r9, [r4]
 800573c:	4433      	add	r3, r6
 800573e:	9321      	str	r3, [sp, #132]	; 0x84
 8005740:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005742:	3301      	adds	r3, #1
 8005744:	2b07      	cmp	r3, #7
 8005746:	9320      	str	r3, [sp, #128]	; 0x80
 8005748:	dc62      	bgt.n	8005810 <_vfprintf_r+0xd90>
 800574a:	3408      	adds	r4, #8
 800574c:	9b08      	ldr	r3, [sp, #32]
 800574e:	2e00      	cmp	r6, #0
 8005750:	bfa8      	it	ge
 8005752:	1b9b      	subge	r3, r3, r6
 8005754:	2b00      	cmp	r3, #0
 8005756:	461e      	mov	r6, r3
 8005758:	dd0f      	ble.n	800577a <_vfprintf_r+0xcfa>
 800575a:	4f53      	ldr	r7, [pc, #332]	; (80058a8 <_vfprintf_r+0xe28>)
 800575c:	f04f 0a10 	mov.w	sl, #16
 8005760:	2e10      	cmp	r6, #16
 8005762:	6027      	str	r7, [r4, #0]
 8005764:	dc5e      	bgt.n	8005824 <_vfprintf_r+0xda4>
 8005766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005768:	6066      	str	r6, [r4, #4]
 800576a:	441e      	add	r6, r3
 800576c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800576e:	9621      	str	r6, [sp, #132]	; 0x84
 8005770:	3301      	adds	r3, #1
 8005772:	2b07      	cmp	r3, #7
 8005774:	9320      	str	r3, [sp, #128]	; 0x80
 8005776:	dc6c      	bgt.n	8005852 <_vfprintf_r+0xdd2>
 8005778:	3408      	adds	r4, #8
 800577a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800577c:	9a03      	ldr	r2, [sp, #12]
 800577e:	4293      	cmp	r3, r2
 8005780:	db01      	blt.n	8005786 <_vfprintf_r+0xd06>
 8005782:	07ef      	lsls	r7, r5, #31
 8005784:	d50d      	bpl.n	80057a2 <_vfprintf_r+0xd22>
 8005786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005792:	4413      	add	r3, r2
 8005794:	9321      	str	r3, [sp, #132]	; 0x84
 8005796:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005798:	3301      	adds	r3, #1
 800579a:	2b07      	cmp	r3, #7
 800579c:	9320      	str	r3, [sp, #128]	; 0x80
 800579e:	dc62      	bgt.n	8005866 <_vfprintf_r+0xde6>
 80057a0:	3408      	adds	r4, #8
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	9a08      	ldr	r2, [sp, #32]
 80057a6:	1a9e      	subs	r6, r3, r2
 80057a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057aa:	9a03      	ldr	r2, [sp, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	429e      	cmp	r6, r3
 80057b0:	bfa8      	it	ge
 80057b2:	461e      	movge	r6, r3
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	dd0c      	ble.n	80057d2 <_vfprintf_r+0xd52>
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	444b      	add	r3, r9
 80057bc:	e884 0048 	stmia.w	r4, {r3, r6}
 80057c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c2:	4433      	add	r3, r6
 80057c4:	9321      	str	r3, [sp, #132]	; 0x84
 80057c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057c8:	3301      	adds	r3, #1
 80057ca:	2b07      	cmp	r3, #7
 80057cc:	9320      	str	r3, [sp, #128]	; 0x80
 80057ce:	dc54      	bgt.n	800587a <_vfprintf_r+0xdfa>
 80057d0:	3408      	adds	r4, #8
 80057d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057d4:	9a03      	ldr	r2, [sp, #12]
 80057d6:	2e00      	cmp	r6, #0
 80057d8:	eba2 0303 	sub.w	r3, r2, r3
 80057dc:	bfac      	ite	ge
 80057de:	1b9e      	subge	r6, r3, r6
 80057e0:	461e      	movlt	r6, r3
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	f77f acd5 	ble.w	8005192 <_vfprintf_r+0x712>
 80057e8:	4f2f      	ldr	r7, [pc, #188]	; (80058a8 <_vfprintf_r+0xe28>)
 80057ea:	f04f 0910 	mov.w	r9, #16
 80057ee:	2e10      	cmp	r6, #16
 80057f0:	6027      	str	r7, [r4, #0]
 80057f2:	f77f aee3 	ble.w	80055bc <_vfprintf_r+0xb3c>
 80057f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f8:	f8c4 9004 	str.w	r9, [r4, #4]
 80057fc:	3310      	adds	r3, #16
 80057fe:	9321      	str	r3, [sp, #132]	; 0x84
 8005800:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005802:	3301      	adds	r3, #1
 8005804:	2b07      	cmp	r3, #7
 8005806:	9320      	str	r3, [sp, #128]	; 0x80
 8005808:	dc41      	bgt.n	800588e <_vfprintf_r+0xe0e>
 800580a:	3408      	adds	r4, #8
 800580c:	3e10      	subs	r6, #16
 800580e:	e7ee      	b.n	80057ee <_vfprintf_r+0xd6e>
 8005810:	aa1f      	add	r2, sp, #124	; 0x7c
 8005812:	4641      	mov	r1, r8
 8005814:	4658      	mov	r0, fp
 8005816:	f002 f91e 	bl	8007a56 <__sprint_r>
 800581a:	2800      	cmp	r0, #0
 800581c:	f040 80eb 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005820:	ac2c      	add	r4, sp, #176	; 0xb0
 8005822:	e793      	b.n	800574c <_vfprintf_r+0xccc>
 8005824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005826:	f8c4 a004 	str.w	sl, [r4, #4]
 800582a:	3310      	adds	r3, #16
 800582c:	9321      	str	r3, [sp, #132]	; 0x84
 800582e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005830:	3301      	adds	r3, #1
 8005832:	2b07      	cmp	r3, #7
 8005834:	9320      	str	r3, [sp, #128]	; 0x80
 8005836:	dc02      	bgt.n	800583e <_vfprintf_r+0xdbe>
 8005838:	3408      	adds	r4, #8
 800583a:	3e10      	subs	r6, #16
 800583c:	e790      	b.n	8005760 <_vfprintf_r+0xce0>
 800583e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005840:	4641      	mov	r1, r8
 8005842:	4658      	mov	r0, fp
 8005844:	f002 f907 	bl	8007a56 <__sprint_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	f040 80d4 	bne.w	80059f6 <_vfprintf_r+0xf76>
 800584e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005850:	e7f3      	b.n	800583a <_vfprintf_r+0xdba>
 8005852:	aa1f      	add	r2, sp, #124	; 0x7c
 8005854:	4641      	mov	r1, r8
 8005856:	4658      	mov	r0, fp
 8005858:	f002 f8fd 	bl	8007a56 <__sprint_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	f040 80ca 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005862:	ac2c      	add	r4, sp, #176	; 0xb0
 8005864:	e789      	b.n	800577a <_vfprintf_r+0xcfa>
 8005866:	aa1f      	add	r2, sp, #124	; 0x7c
 8005868:	4641      	mov	r1, r8
 800586a:	4658      	mov	r0, fp
 800586c:	f002 f8f3 	bl	8007a56 <__sprint_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	f040 80c0 	bne.w	80059f6 <_vfprintf_r+0xf76>
 8005876:	ac2c      	add	r4, sp, #176	; 0xb0
 8005878:	e793      	b.n	80057a2 <_vfprintf_r+0xd22>
 800587a:	aa1f      	add	r2, sp, #124	; 0x7c
 800587c:	4641      	mov	r1, r8
 800587e:	4658      	mov	r0, fp
 8005880:	f002 f8e9 	bl	8007a56 <__sprint_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	f040 80b6 	bne.w	80059f6 <_vfprintf_r+0xf76>
 800588a:	ac2c      	add	r4, sp, #176	; 0xb0
 800588c:	e7a1      	b.n	80057d2 <_vfprintf_r+0xd52>
 800588e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005890:	4641      	mov	r1, r8
 8005892:	4658      	mov	r0, fp
 8005894:	f002 f8df 	bl	8007a56 <__sprint_r>
 8005898:	2800      	cmp	r0, #0
 800589a:	f040 80ac 	bne.w	80059f6 <_vfprintf_r+0xf76>
 800589e:	ac2c      	add	r4, sp, #176	; 0xb0
 80058a0:	e7b4      	b.n	800580c <_vfprintf_r+0xd8c>
 80058a2:	bf00      	nop
 80058a4:	080085fa 	.word	0x080085fa
 80058a8:	0800860c 	.word	0x0800860c
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	dc01      	bgt.n	80058b6 <_vfprintf_r+0xe36>
 80058b2:	07ee      	lsls	r6, r5, #31
 80058b4:	d576      	bpl.n	80059a4 <_vfprintf_r+0xf24>
 80058b6:	2301      	movs	r3, #1
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058bc:	f8c4 9000 	str.w	r9, [r4]
 80058c0:	3301      	adds	r3, #1
 80058c2:	9321      	str	r3, [sp, #132]	; 0x84
 80058c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058c6:	3301      	adds	r3, #1
 80058c8:	2b07      	cmp	r3, #7
 80058ca:	9320      	str	r3, [sp, #128]	; 0x80
 80058cc:	dc36      	bgt.n	800593c <_vfprintf_r+0xebc>
 80058ce:	3408      	adds	r4, #8
 80058d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058dc:	4413      	add	r3, r2
 80058de:	9321      	str	r3, [sp, #132]	; 0x84
 80058e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058e2:	3301      	adds	r3, #1
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	9320      	str	r3, [sp, #128]	; 0x80
 80058e8:	dc31      	bgt.n	800594e <_vfprintf_r+0xece>
 80058ea:	3408      	adds	r4, #8
 80058ec:	2300      	movs	r3, #0
 80058ee:	2200      	movs	r2, #0
 80058f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f4:	f7fb f8e4 	bl	8000ac0 <__aeabi_dcmpeq>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	1e5e      	subs	r6, r3, #1
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d12f      	bne.n	8005960 <_vfprintf_r+0xee0>
 8005900:	f109 0301 	add.w	r3, r9, #1
 8005904:	e884 0048 	stmia.w	r4, {r3, r6}
 8005908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800590a:	9a03      	ldr	r2, [sp, #12]
 800590c:	3b01      	subs	r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	9321      	str	r3, [sp, #132]	; 0x84
 8005912:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005914:	3301      	adds	r3, #1
 8005916:	2b07      	cmp	r3, #7
 8005918:	9320      	str	r3, [sp, #128]	; 0x80
 800591a:	dd4a      	ble.n	80059b2 <_vfprintf_r+0xf32>
 800591c:	aa1f      	add	r2, sp, #124	; 0x7c
 800591e:	4641      	mov	r1, r8
 8005920:	4658      	mov	r0, fp
 8005922:	f002 f898 	bl	8007a56 <__sprint_r>
 8005926:	2800      	cmp	r0, #0
 8005928:	d165      	bne.n	80059f6 <_vfprintf_r+0xf76>
 800592a:	ac2c      	add	r4, sp, #176	; 0xb0
 800592c:	ab1b      	add	r3, sp, #108	; 0x6c
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005938:	4413      	add	r3, r2
 800593a:	e41a      	b.n	8005172 <_vfprintf_r+0x6f2>
 800593c:	aa1f      	add	r2, sp, #124	; 0x7c
 800593e:	4641      	mov	r1, r8
 8005940:	4658      	mov	r0, fp
 8005942:	f002 f888 	bl	8007a56 <__sprint_r>
 8005946:	2800      	cmp	r0, #0
 8005948:	d155      	bne.n	80059f6 <_vfprintf_r+0xf76>
 800594a:	ac2c      	add	r4, sp, #176	; 0xb0
 800594c:	e7c0      	b.n	80058d0 <_vfprintf_r+0xe50>
 800594e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005950:	4641      	mov	r1, r8
 8005952:	4658      	mov	r0, fp
 8005954:	f002 f87f 	bl	8007a56 <__sprint_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	d14c      	bne.n	80059f6 <_vfprintf_r+0xf76>
 800595c:	ac2c      	add	r4, sp, #176	; 0xb0
 800595e:	e7c5      	b.n	80058ec <_vfprintf_r+0xe6c>
 8005960:	2e00      	cmp	r6, #0
 8005962:	dde3      	ble.n	800592c <_vfprintf_r+0xeac>
 8005964:	4f60      	ldr	r7, [pc, #384]	; (8005ae8 <_vfprintf_r+0x1068>)
 8005966:	f04f 0910 	mov.w	r9, #16
 800596a:	2e10      	cmp	r6, #16
 800596c:	6027      	str	r7, [r4, #0]
 800596e:	dc04      	bgt.n	800597a <_vfprintf_r+0xefa>
 8005970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005972:	6066      	str	r6, [r4, #4]
 8005974:	441e      	add	r6, r3
 8005976:	9621      	str	r6, [sp, #132]	; 0x84
 8005978:	e7cb      	b.n	8005912 <_vfprintf_r+0xe92>
 800597a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800597c:	f8c4 9004 	str.w	r9, [r4, #4]
 8005980:	3310      	adds	r3, #16
 8005982:	9321      	str	r3, [sp, #132]	; 0x84
 8005984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005986:	3301      	adds	r3, #1
 8005988:	2b07      	cmp	r3, #7
 800598a:	9320      	str	r3, [sp, #128]	; 0x80
 800598c:	dc02      	bgt.n	8005994 <_vfprintf_r+0xf14>
 800598e:	3408      	adds	r4, #8
 8005990:	3e10      	subs	r6, #16
 8005992:	e7ea      	b.n	800596a <_vfprintf_r+0xeea>
 8005994:	aa1f      	add	r2, sp, #124	; 0x7c
 8005996:	4641      	mov	r1, r8
 8005998:	4658      	mov	r0, fp
 800599a:	f002 f85c 	bl	8007a56 <__sprint_r>
 800599e:	bb50      	cbnz	r0, 80059f6 <_vfprintf_r+0xf76>
 80059a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80059a2:	e7f5      	b.n	8005990 <_vfprintf_r+0xf10>
 80059a4:	2301      	movs	r3, #1
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059aa:	f8c4 9000 	str.w	r9, [r4]
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7ae      	b.n	8005910 <_vfprintf_r+0xe90>
 80059b2:	3408      	adds	r4, #8
 80059b4:	e7ba      	b.n	800592c <_vfprintf_r+0xeac>
 80059b6:	3408      	adds	r4, #8
 80059b8:	f7ff bbeb 	b.w	8005192 <_vfprintf_r+0x712>
 80059bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059c0:	1a9d      	subs	r5, r3, r2
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	f77f abe8 	ble.w	8005198 <_vfprintf_r+0x718>
 80059c8:	2610      	movs	r6, #16
 80059ca:	4b48      	ldr	r3, [pc, #288]	; (8005aec <_vfprintf_r+0x106c>)
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	2d10      	cmp	r5, #16
 80059d0:	dc24      	bgt.n	8005a1c <_vfprintf_r+0xf9c>
 80059d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d4:	6065      	str	r5, [r4, #4]
 80059d6:	441d      	add	r5, r3
 80059d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059da:	9521      	str	r5, [sp, #132]	; 0x84
 80059dc:	3301      	adds	r3, #1
 80059de:	2b07      	cmp	r3, #7
 80059e0:	9320      	str	r3, [sp, #128]	; 0x80
 80059e2:	f77f abd9 	ble.w	8005198 <_vfprintf_r+0x718>
 80059e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80059e8:	4641      	mov	r1, r8
 80059ea:	4658      	mov	r0, fp
 80059ec:	f002 f833 	bl	8007a56 <__sprint_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f43f abd1 	beq.w	8005198 <_vfprintf_r+0x718>
 80059f6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80059fa:	07d9      	lsls	r1, r3, #31
 80059fc:	d407      	bmi.n	8005a0e <_vfprintf_r+0xf8e>
 80059fe:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005a02:	059a      	lsls	r2, r3, #22
 8005a04:	d403      	bmi.n	8005a0e <_vfprintf_r+0xf8e>
 8005a06:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8005a0a:	f001 fa66 	bl	8006eda <__retarget_lock_release_recursive>
 8005a0e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005a12:	065b      	lsls	r3, r3, #25
 8005a14:	f57f a8af 	bpl.w	8004b76 <_vfprintf_r+0xf6>
 8005a18:	f7ff b882 	b.w	8004b20 <_vfprintf_r+0xa0>
 8005a1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a1e:	6066      	str	r6, [r4, #4]
 8005a20:	3310      	adds	r3, #16
 8005a22:	9321      	str	r3, [sp, #132]	; 0x84
 8005a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a26:	3301      	adds	r3, #1
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8005a2c:	dc02      	bgt.n	8005a34 <_vfprintf_r+0xfb4>
 8005a2e:	3408      	adds	r4, #8
 8005a30:	3d10      	subs	r5, #16
 8005a32:	e7ca      	b.n	80059ca <_vfprintf_r+0xf4a>
 8005a34:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a36:	4641      	mov	r1, r8
 8005a38:	4658      	mov	r0, fp
 8005a3a:	f002 f80c 	bl	8007a56 <__sprint_r>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d1d9      	bne.n	80059f6 <_vfprintf_r+0xf76>
 8005a42:	ac2c      	add	r4, sp, #176	; 0xb0
 8005a44:	e7f4      	b.n	8005a30 <_vfprintf_r+0xfb0>
 8005a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a48:	b913      	cbnz	r3, 8005a50 <_vfprintf_r+0xfd0>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005a4e:	e7d2      	b.n	80059f6 <_vfprintf_r+0xf76>
 8005a50:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a52:	4641      	mov	r1, r8
 8005a54:	4658      	mov	r0, fp
 8005a56:	f001 fffe 	bl	8007a56 <__sprint_r>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d0f5      	beq.n	8005a4a <_vfprintf_r+0xfca>
 8005a5e:	e7ca      	b.n	80059f6 <_vfprintf_r+0xf76>
 8005a60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	f7fb f85c 	bl	8000b24 <__aeabi_dcmpun>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f43f aa36 	beq.w	8004ede <_vfprintf_r+0x45e>
 8005a72:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <_vfprintf_r+0x1070>)
 8005a74:	4a1f      	ldr	r2, [pc, #124]	; (8005af4 <_vfprintf_r+0x1074>)
 8005a76:	f7ff ba26 	b.w	8004ec6 <_vfprintf_r+0x446>
 8005a7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a7c:	1a1b      	subs	r3, r3, r0
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	f7ff baa9 	b.w	8004fd6 <_vfprintf_r+0x556>
 8005a84:	ea56 0207 	orrs.w	r2, r6, r7
 8005a88:	9508      	str	r5, [sp, #32]
 8005a8a:	f43f ac1e 	beq.w	80052ca <_vfprintf_r+0x84a>
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	f43f ac8f 	beq.w	80053b2 <_vfprintf_r+0x932>
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f43f acaf 	beq.w	80053f8 <_vfprintf_r+0x978>
 8005a9a:	ab2c      	add	r3, sp, #176	; 0xb0
 8005a9c:	08f1      	lsrs	r1, r6, #3
 8005a9e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8005aa2:	08f8      	lsrs	r0, r7, #3
 8005aa4:	f006 0207 	and.w	r2, r6, #7
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	460e      	mov	r6, r1
 8005aac:	3230      	adds	r2, #48	; 0x30
 8005aae:	ea56 0107 	orrs.w	r1, r6, r7
 8005ab2:	f103 39ff 	add.w	r9, r3, #4294967295
 8005ab6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005aba:	f47f ac78 	bne.w	80053ae <_vfprintf_r+0x92e>
 8005abe:	9908      	ldr	r1, [sp, #32]
 8005ac0:	07cd      	lsls	r5, r1, #31
 8005ac2:	d506      	bpl.n	8005ad2 <_vfprintf_r+0x1052>
 8005ac4:	2a30      	cmp	r2, #48	; 0x30
 8005ac6:	d004      	beq.n	8005ad2 <_vfprintf_r+0x1052>
 8005ac8:	2230      	movs	r2, #48	; 0x30
 8005aca:	f809 2c01 	strb.w	r2, [r9, #-1]
 8005ace:	f1a3 0902 	sub.w	r9, r3, #2
 8005ad2:	4656      	mov	r6, sl
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 8005ada:	9d08      	ldr	r5, [sp, #32]
 8005adc:	9308      	str	r3, [sp, #32]
 8005ade:	ebaa 0a09 	sub.w	sl, sl, r9
 8005ae2:	f7ff bac6 	b.w	8005072 <_vfprintf_r+0x5f2>
 8005ae6:	bf00      	nop
 8005ae8:	0800860c 	.word	0x0800860c
 8005aec:	080085fc 	.word	0x080085fc
 8005af0:	080085d0 	.word	0x080085d0
 8005af4:	080085d4 	.word	0x080085d4

08005af8 <__sbprintf>:
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afa:	460c      	mov	r4, r1
 8005afc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8005b00:	461f      	mov	r7, r3
 8005b02:	8989      	ldrh	r1, [r1, #12]
 8005b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b06:	9319      	str	r3, [sp, #100]	; 0x64
 8005b08:	89e3      	ldrh	r3, [r4, #14]
 8005b0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b0e:	f021 0102 	bic.w	r1, r1, #2
 8005b12:	6a23      	ldr	r3, [r4, #32]
 8005b14:	f8ad 100c 	strh.w	r1, [sp, #12]
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	a91a      	add	r1, sp, #104	; 0x68
 8005b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b20:	4615      	mov	r5, r2
 8005b22:	2300      	movs	r3, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	9100      	str	r1, [sp, #0]
 8005b28:	9104      	str	r1, [sp, #16]
 8005b2a:	a816      	add	r0, sp, #88	; 0x58
 8005b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b30:	9102      	str	r1, [sp, #8]
 8005b32:	9105      	str	r1, [sp, #20]
 8005b34:	9306      	str	r3, [sp, #24]
 8005b36:	f001 f9cd 	bl	8006ed4 <__retarget_lock_init_recursive>
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	4669      	mov	r1, sp
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7fe ff9d 	bl	8004a80 <_vfprintf_r>
 8005b46:	1e05      	subs	r5, r0, #0
 8005b48:	db07      	blt.n	8005b5a <__sbprintf+0x62>
 8005b4a:	4669      	mov	r1, sp
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 ff6f 	bl	8006a30 <_fflush_r>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	bf18      	it	ne
 8005b56:	f04f 35ff 	movne.w	r5, #4294967295
 8005b5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005b5e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005b60:	065b      	lsls	r3, r3, #25
 8005b62:	bf42      	ittt	mi
 8005b64:	89a3      	ldrhmi	r3, [r4, #12]
 8005b66:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8005b6a:	81a3      	strhmi	r3, [r4, #12]
 8005b6c:	f001 f9b3 	bl	8006ed6 <__retarget_lock_close_recursive>
 8005b70:	4628      	mov	r0, r5
 8005b72:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b78 <__swsetup_r>:
 8005b78:	4b32      	ldr	r3, [pc, #200]	; (8005c44 <__swsetup_r+0xcc>)
 8005b7a:	b570      	push	{r4, r5, r6, lr}
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	b125      	cbz	r5, 8005b8e <__swsetup_r+0x16>
 8005b84:	69ab      	ldr	r3, [r5, #24]
 8005b86:	b913      	cbnz	r3, 8005b8e <__swsetup_r+0x16>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 ffe5 	bl	8006b58 <__sinit>
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <__swsetup_r+0xd0>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d10f      	bne.n	8005bb4 <__swsetup_r+0x3c>
 8005b94:	686c      	ldr	r4, [r5, #4]
 8005b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	0715      	lsls	r5, r2, #28
 8005b9e:	d42c      	bmi.n	8005bfa <__swsetup_r+0x82>
 8005ba0:	06d0      	lsls	r0, r2, #27
 8005ba2:	d411      	bmi.n	8005bc8 <__swsetup_r+0x50>
 8005ba4:	2209      	movs	r2, #9
 8005ba6:	6032      	str	r2, [r6, #0]
 8005ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <__swsetup_r+0xd4>)
 8005bb6:	429c      	cmp	r4, r3
 8005bb8:	d101      	bne.n	8005bbe <__swsetup_r+0x46>
 8005bba:	68ac      	ldr	r4, [r5, #8]
 8005bbc:	e7eb      	b.n	8005b96 <__swsetup_r+0x1e>
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <__swsetup_r+0xd8>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	bf08      	it	eq
 8005bc4:	68ec      	ldreq	r4, [r5, #12]
 8005bc6:	e7e6      	b.n	8005b96 <__swsetup_r+0x1e>
 8005bc8:	0751      	lsls	r1, r2, #29
 8005bca:	d512      	bpl.n	8005bf2 <__swsetup_r+0x7a>
 8005bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bce:	b141      	cbz	r1, 8005be2 <__swsetup_r+0x6a>
 8005bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	d002      	beq.n	8005bde <__swsetup_r+0x66>
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f001 f893 	bl	8006d04 <_free_r>
 8005bde:	2300      	movs	r3, #0
 8005be0:	6363      	str	r3, [r4, #52]	; 0x34
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f043 0308 	orr.w	r3, r3, #8
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	b94b      	cbnz	r3, 8005c12 <__swsetup_r+0x9a>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d003      	beq.n	8005c12 <__swsetup_r+0x9a>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f001 f991 	bl	8006f34 <__smakebuf_r>
 8005c12:	89a2      	ldrh	r2, [r4, #12]
 8005c14:	f012 0301 	ands.w	r3, r2, #1
 8005c18:	d00c      	beq.n	8005c34 <__swsetup_r+0xbc>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	6963      	ldr	r3, [r4, #20]
 8005c20:	425b      	negs	r3, r3
 8005c22:	61a3      	str	r3, [r4, #24]
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	b953      	cbnz	r3, 8005c3e <__swsetup_r+0xc6>
 8005c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c30:	d1ba      	bne.n	8005ba8 <__swsetup_r+0x30>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	0792      	lsls	r2, r2, #30
 8005c36:	bf58      	it	pl
 8005c38:	6963      	ldrpl	r3, [r4, #20]
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	e7f2      	b.n	8005c24 <__swsetup_r+0xac>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e7f7      	b.n	8005c32 <__swsetup_r+0xba>
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c
 8005c48:	0800864c 	.word	0x0800864c
 8005c4c:	0800866c 	.word	0x0800866c
 8005c50:	0800862c 	.word	0x0800862c

08005c54 <quorem>:
 8005c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	6903      	ldr	r3, [r0, #16]
 8005c5a:	690c      	ldr	r4, [r1, #16]
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	4680      	mov	r8, r0
 8005c60:	f300 8082 	bgt.w	8005d68 <quorem+0x114>
 8005c64:	3c01      	subs	r4, #1
 8005c66:	f101 0714 	add.w	r7, r1, #20
 8005c6a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005c6e:	f100 0614 	add.w	r6, r0, #20
 8005c72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c7a:	eb06 030e 	add.w	r3, r6, lr
 8005c7e:	3501      	adds	r5, #1
 8005c80:	eb07 090e 	add.w	r9, r7, lr
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c8a:	b395      	cbz	r5, 8005cf2 <quorem+0x9e>
 8005c8c:	f04f 0a00 	mov.w	sl, #0
 8005c90:	4638      	mov	r0, r7
 8005c92:	46b4      	mov	ip, r6
 8005c94:	46d3      	mov	fp, sl
 8005c96:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c9a:	b293      	uxth	r3, r2
 8005c9c:	fb05 a303 	mla	r3, r5, r3, sl
 8005ca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ebab 0303 	sub.w	r3, fp, r3
 8005caa:	0c12      	lsrs	r2, r2, #16
 8005cac:	f8bc b000 	ldrh.w	fp, [ip]
 8005cb0:	fb05 a202 	mla	r2, r5, r2, sl
 8005cb4:	fa13 f38b 	uxtah	r3, r3, fp
 8005cb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005cbc:	fa1f fb82 	uxth.w	fp, r2
 8005cc0:	f8dc 2000 	ldr.w	r2, [ip]
 8005cc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd2:	4581      	cmp	r9, r0
 8005cd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005cd8:	f84c 3b04 	str.w	r3, [ip], #4
 8005cdc:	d2db      	bcs.n	8005c96 <quorem+0x42>
 8005cde:	f856 300e 	ldr.w	r3, [r6, lr]
 8005ce2:	b933      	cbnz	r3, 8005cf2 <quorem+0x9e>
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	3b04      	subs	r3, #4
 8005ce8:	429e      	cmp	r6, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	d330      	bcc.n	8005d50 <quorem+0xfc>
 8005cee:	f8c8 4010 	str.w	r4, [r8, #16]
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f001 fd95 	bl	8007822 <__mcmp>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	db25      	blt.n	8005d48 <quorem+0xf4>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f04f 0e00 	mov.w	lr, #0
 8005d04:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d08:	f8d0 c000 	ldr.w	ip, [r0]
 8005d0c:	b293      	uxth	r3, r2
 8005d0e:	ebae 0303 	sub.w	r3, lr, r3
 8005d12:	0c12      	lsrs	r2, r2, #16
 8005d14:	fa13 f38c 	uxtah	r3, r3, ip
 8005d18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d26:	45b9      	cmp	r9, r7
 8005d28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005d2c:	f840 3b04 	str.w	r3, [r0], #4
 8005d30:	d2e8      	bcs.n	8005d04 <quorem+0xb0>
 8005d32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d3a:	b92a      	cbnz	r2, 8005d48 <quorem+0xf4>
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	429e      	cmp	r6, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	d30b      	bcc.n	8005d5c <quorem+0x108>
 8005d44:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d48:	4628      	mov	r0, r5
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	3b04      	subs	r3, #4
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	d1ca      	bne.n	8005cee <quorem+0x9a>
 8005d58:	3c01      	subs	r4, #1
 8005d5a:	e7c5      	b.n	8005ce8 <quorem+0x94>
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d1ef      	bne.n	8005d44 <quorem+0xf0>
 8005d64:	3c01      	subs	r4, #1
 8005d66:	e7ea      	b.n	8005d3e <quorem+0xea>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e7ee      	b.n	8005d4a <quorem+0xf6>
 8005d6c:	0000      	movs	r0, r0
	...

08005d70 <_dtoa_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ec57 6b10 	vmov	r6, r7, d0
 8005d78:	b097      	sub	sp, #92	; 0x5c
 8005d7a:	e9cd 6700 	strd	r6, r7, [sp]
 8005d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d80:	9107      	str	r1, [sp, #28]
 8005d82:	4604      	mov	r4, r0
 8005d84:	920a      	str	r2, [sp, #40]	; 0x28
 8005d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d88:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005d8a:	b93e      	cbnz	r6, 8005d9c <_dtoa_r+0x2c>
 8005d8c:	2010      	movs	r0, #16
 8005d8e:	f001 f911 	bl	8006fb4 <malloc>
 8005d92:	6260      	str	r0, [r4, #36]	; 0x24
 8005d94:	6046      	str	r6, [r0, #4]
 8005d96:	6086      	str	r6, [r0, #8]
 8005d98:	6006      	str	r6, [r0, #0]
 8005d9a:	60c6      	str	r6, [r0, #12]
 8005d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	b151      	cbz	r1, 8005db8 <_dtoa_r+0x48>
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	604a      	str	r2, [r1, #4]
 8005da6:	2301      	movs	r3, #1
 8005da8:	4093      	lsls	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]
 8005dac:	4620      	mov	r0, r4
 8005dae:	f001 fb63 	bl	8007478 <_Bfree>
 8005db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfbf      	itttt	lt
 8005dbe:	2301      	movlt	r3, #1
 8005dc0:	602b      	strlt	r3, [r5, #0]
 8005dc2:	9b01      	ldrlt	r3, [sp, #4]
 8005dc4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	bfb2      	itee	lt
 8005dca:	9301      	strlt	r3, [sp, #4]
 8005dcc:	2300      	movge	r3, #0
 8005dce:	602b      	strge	r3, [r5, #0]
 8005dd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dd4:	4ba8      	ldr	r3, [pc, #672]	; (8006078 <_dtoa_r+0x308>)
 8005dd6:	ea33 0308 	bics.w	r3, r3, r8
 8005dda:	d11b      	bne.n	8005e14 <_dtoa_r+0xa4>
 8005ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	b923      	cbnz	r3, 8005df2 <_dtoa_r+0x82>
 8005de8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f000 8578 	beq.w	80068e2 <_dtoa_r+0xb72>
 8005df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df4:	b953      	cbnz	r3, 8005e0c <_dtoa_r+0x9c>
 8005df6:	4ba1      	ldr	r3, [pc, #644]	; (800607c <_dtoa_r+0x30c>)
 8005df8:	e021      	b.n	8005e3e <_dtoa_r+0xce>
 8005dfa:	4ba1      	ldr	r3, [pc, #644]	; (8006080 <_dtoa_r+0x310>)
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	9802      	ldr	r0, [sp, #8]
 8005e06:	b017      	add	sp, #92	; 0x5c
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	4b9b      	ldr	r3, [pc, #620]	; (800607c <_dtoa_r+0x30c>)
 8005e0e:	9302      	str	r3, [sp, #8]
 8005e10:	3303      	adds	r3, #3
 8005e12:	e7f5      	b.n	8005e00 <_dtoa_r+0x90>
 8005e14:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa fe4e 	bl	8000ac0 <__aeabi_dcmpeq>
 8005e24:	4681      	mov	r9, r0
 8005e26:	b160      	cbz	r0, 8005e42 <_dtoa_r+0xd2>
 8005e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8553 	beq.w	80068dc <_dtoa_r+0xb6c>
 8005e36:	4b93      	ldr	r3, [pc, #588]	; (8006084 <_dtoa_r+0x314>)
 8005e38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	e7e0      	b.n	8005e04 <_dtoa_r+0x94>
 8005e42:	aa14      	add	r2, sp, #80	; 0x50
 8005e44:	a915      	add	r1, sp, #84	; 0x54
 8005e46:	ec47 6b10 	vmov	d0, r6, r7
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f001 fd61 	bl	8007912 <__d2b>
 8005e50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e54:	4682      	mov	sl, r0
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	d07e      	beq.n	8005f58 <_dtoa_r+0x1e8>
 8005e5a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e62:	4630      	mov	r0, r6
 8005e64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e68:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e6c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005e70:	2200      	movs	r2, #0
 8005e72:	4b85      	ldr	r3, [pc, #532]	; (8006088 <_dtoa_r+0x318>)
 8005e74:	f7fa fa08 	bl	8000288 <__aeabi_dsub>
 8005e78:	a379      	add	r3, pc, #484	; (adr r3, 8006060 <_dtoa_r+0x2f0>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fbb7 	bl	80005f0 <__aeabi_dmul>
 8005e82:	a379      	add	r3, pc, #484	; (adr r3, 8006068 <_dtoa_r+0x2f8>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fa00 	bl	800028c <__adddf3>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	460f      	mov	r7, r1
 8005e92:	f7fa fb47 	bl	8000524 <__aeabi_i2d>
 8005e96:	a376      	add	r3, pc, #472	; (adr r3, 8006070 <_dtoa_r+0x300>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa fba8 	bl	80005f0 <__aeabi_dmul>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	f7fa f9f0 	bl	800028c <__adddf3>
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	f7fa fe4e 	bl	8000b50 <__aeabi_d2iz>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4683      	mov	fp, r0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fe09 	bl	8000ad4 <__aeabi_dcmplt>
 8005ec2:	b158      	cbz	r0, 8005edc <_dtoa_r+0x16c>
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f7fa fb2d 	bl	8000524 <__aeabi_i2d>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f7fa fdf5 	bl	8000ac0 <__aeabi_dcmpeq>
 8005ed6:	b908      	cbnz	r0, 8005edc <_dtoa_r+0x16c>
 8005ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005edc:	f1bb 0f16 	cmp.w	fp, #22
 8005ee0:	d859      	bhi.n	8005f96 <_dtoa_r+0x226>
 8005ee2:	496a      	ldr	r1, [pc, #424]	; (800608c <_dtoa_r+0x31c>)
 8005ee4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef0:	f7fa fe0e 	bl	8000b10 <__aeabi_dcmpgt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d050      	beq.n	8005f9a <_dtoa_r+0x22a>
 8005ef8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005efc:	2300      	movs	r3, #0
 8005efe:	930e      	str	r3, [sp, #56]	; 0x38
 8005f00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f02:	1b5d      	subs	r5, r3, r5
 8005f04:	1e6b      	subs	r3, r5, #1
 8005f06:	9306      	str	r3, [sp, #24]
 8005f08:	bf45      	ittet	mi
 8005f0a:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f0e:	9305      	strmi	r3, [sp, #20]
 8005f10:	2300      	movpl	r3, #0
 8005f12:	2300      	movmi	r3, #0
 8005f14:	bf4c      	ite	mi
 8005f16:	9306      	strmi	r3, [sp, #24]
 8005f18:	9305      	strpl	r3, [sp, #20]
 8005f1a:	f1bb 0f00 	cmp.w	fp, #0
 8005f1e:	db3e      	blt.n	8005f9e <_dtoa_r+0x22e>
 8005f20:	9b06      	ldr	r3, [sp, #24]
 8005f22:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005f26:	445b      	add	r3, fp
 8005f28:	9306      	str	r3, [sp, #24]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9308      	str	r3, [sp, #32]
 8005f2e:	9b07      	ldr	r3, [sp, #28]
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	f200 80af 	bhi.w	8006094 <_dtoa_r+0x324>
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	bfc4      	itt	gt
 8005f3a:	3b04      	subgt	r3, #4
 8005f3c:	9307      	strgt	r3, [sp, #28]
 8005f3e:	9b07      	ldr	r3, [sp, #28]
 8005f40:	f1a3 0302 	sub.w	r3, r3, #2
 8005f44:	bfcc      	ite	gt
 8005f46:	2600      	movgt	r6, #0
 8005f48:	2601      	movle	r6, #1
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	f200 80ae 	bhi.w	80060ac <_dtoa_r+0x33c>
 8005f50:	e8df f003 	tbb	[pc, r3]
 8005f54:	772f8482 	.word	0x772f8482
 8005f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f5a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005f5c:	441d      	add	r5, r3
 8005f5e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	dd11      	ble.n	8005f8a <_dtoa_r+0x21a>
 8005f66:	9a00      	ldr	r2, [sp, #0]
 8005f68:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005f6c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005f70:	fa22 f000 	lsr.w	r0, r2, r0
 8005f74:	fa08 f303 	lsl.w	r3, r8, r3
 8005f78:	4318      	orrs	r0, r3
 8005f7a:	f7fa fac3 	bl	8000504 <__aeabi_ui2d>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f84:	3d01      	subs	r5, #1
 8005f86:	9312      	str	r3, [sp, #72]	; 0x48
 8005f88:	e772      	b.n	8005e70 <_dtoa_r+0x100>
 8005f8a:	f1c3 0020 	rsb	r0, r3, #32
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	fa03 f000 	lsl.w	r0, r3, r0
 8005f94:	e7f1      	b.n	8005f7a <_dtoa_r+0x20a>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7b1      	b.n	8005efe <_dtoa_r+0x18e>
 8005f9a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f9c:	e7b0      	b.n	8005f00 <_dtoa_r+0x190>
 8005f9e:	9b05      	ldr	r3, [sp, #20]
 8005fa0:	eba3 030b 	sub.w	r3, r3, fp
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	f1cb 0300 	rsb	r3, fp, #0
 8005faa:	9308      	str	r3, [sp, #32]
 8005fac:	2300      	movs	r3, #0
 8005fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb0:	e7bd      	b.n	8005f2e <_dtoa_r+0x1be>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dd7a      	ble.n	80060b2 <_dtoa_r+0x342>
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	9303      	str	r3, [sp, #12]
 8005fc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	606a      	str	r2, [r5, #4]
 8005fc6:	2104      	movs	r1, #4
 8005fc8:	f101 0214 	add.w	r2, r1, #20
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d975      	bls.n	80060bc <_dtoa_r+0x34c>
 8005fd0:	6869      	ldr	r1, [r5, #4]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f001 fa1c 	bl	8007410 <_Balloc>
 8005fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fda:	6028      	str	r0, [r5, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	2b0e      	cmp	r3, #14
 8005fe4:	f200 80e5 	bhi.w	80061b2 <_dtoa_r+0x442>
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	f000 80e2 	beq.w	80061b2 <_dtoa_r+0x442>
 8005fee:	ed9d 7b00 	vldr	d7, [sp]
 8005ff2:	f1bb 0f00 	cmp.w	fp, #0
 8005ff6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005ffa:	dd74      	ble.n	80060e6 <_dtoa_r+0x376>
 8005ffc:	4a23      	ldr	r2, [pc, #140]	; (800608c <_dtoa_r+0x31c>)
 8005ffe:	f00b 030f 	and.w	r3, fp, #15
 8006002:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800600a:	06f0      	lsls	r0, r6, #27
 800600c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006010:	d559      	bpl.n	80060c6 <_dtoa_r+0x356>
 8006012:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <_dtoa_r+0x320>)
 8006014:	ec51 0b17 	vmov	r0, r1, d7
 8006018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800601c:	f7fa fc12 	bl	8000844 <__aeabi_ddiv>
 8006020:	e9cd 0100 	strd	r0, r1, [sp]
 8006024:	f006 060f 	and.w	r6, r6, #15
 8006028:	2503      	movs	r5, #3
 800602a:	4f19      	ldr	r7, [pc, #100]	; (8006090 <_dtoa_r+0x320>)
 800602c:	2e00      	cmp	r6, #0
 800602e:	d14c      	bne.n	80060ca <_dtoa_r+0x35a>
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006038:	f7fa fc04 	bl	8000844 <__aeabi_ddiv>
 800603c:	e9cd 0100 	strd	r0, r1, [sp]
 8006040:	e06a      	b.n	8006118 <_dtoa_r+0x3a8>
 8006042:	2301      	movs	r3, #1
 8006044:	9309      	str	r3, [sp, #36]	; 0x24
 8006046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006048:	445b      	add	r3, fp
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	3301      	adds	r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	bfb8      	it	lt
 8006054:	2301      	movlt	r3, #1
 8006056:	e7b3      	b.n	8005fc0 <_dtoa_r+0x250>
 8006058:	2300      	movs	r3, #0
 800605a:	e7ab      	b.n	8005fb4 <_dtoa_r+0x244>
 800605c:	2300      	movs	r3, #0
 800605e:	e7f1      	b.n	8006044 <_dtoa_r+0x2d4>
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	7ff00000 	.word	0x7ff00000
 800607c:	08008625 	.word	0x08008625
 8006080:	0800861c 	.word	0x0800861c
 8006084:	080085fb 	.word	0x080085fb
 8006088:	3ff80000 	.word	0x3ff80000
 800608c:	080086b8 	.word	0x080086b8
 8006090:	08008690 	.word	0x08008690
 8006094:	2601      	movs	r6, #1
 8006096:	2300      	movs	r3, #0
 8006098:	9307      	str	r3, [sp, #28]
 800609a:	9609      	str	r6, [sp, #36]	; 0x24
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2312      	movs	r3, #18
 80060a8:	920a      	str	r2, [sp, #40]	; 0x28
 80060aa:	e789      	b.n	8005fc0 <_dtoa_r+0x250>
 80060ac:	2301      	movs	r3, #1
 80060ae:	9309      	str	r3, [sp, #36]	; 0x24
 80060b0:	e7f4      	b.n	800609c <_dtoa_r+0x32c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	9303      	str	r3, [sp, #12]
 80060b8:	461a      	mov	r2, r3
 80060ba:	e7f5      	b.n	80060a8 <_dtoa_r+0x338>
 80060bc:	686a      	ldr	r2, [r5, #4]
 80060be:	3201      	adds	r2, #1
 80060c0:	606a      	str	r2, [r5, #4]
 80060c2:	0049      	lsls	r1, r1, #1
 80060c4:	e780      	b.n	8005fc8 <_dtoa_r+0x258>
 80060c6:	2502      	movs	r5, #2
 80060c8:	e7af      	b.n	800602a <_dtoa_r+0x2ba>
 80060ca:	07f1      	lsls	r1, r6, #31
 80060cc:	d508      	bpl.n	80060e0 <_dtoa_r+0x370>
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d6:	f7fa fa8b 	bl	80005f0 <__aeabi_dmul>
 80060da:	3501      	adds	r5, #1
 80060dc:	4680      	mov	r8, r0
 80060de:	4689      	mov	r9, r1
 80060e0:	1076      	asrs	r6, r6, #1
 80060e2:	3708      	adds	r7, #8
 80060e4:	e7a2      	b.n	800602c <_dtoa_r+0x2bc>
 80060e6:	f000 809d 	beq.w	8006224 <_dtoa_r+0x4b4>
 80060ea:	f1cb 0600 	rsb	r6, fp, #0
 80060ee:	4b9f      	ldr	r3, [pc, #636]	; (800636c <_dtoa_r+0x5fc>)
 80060f0:	4f9f      	ldr	r7, [pc, #636]	; (8006370 <_dtoa_r+0x600>)
 80060f2:	f006 020f 	and.w	r2, r6, #15
 80060f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006102:	f7fa fa75 	bl	80005f0 <__aeabi_dmul>
 8006106:	e9cd 0100 	strd	r0, r1, [sp]
 800610a:	1136      	asrs	r6, r6, #4
 800610c:	2300      	movs	r3, #0
 800610e:	2502      	movs	r5, #2
 8006110:	2e00      	cmp	r6, #0
 8006112:	d17c      	bne.n	800620e <_dtoa_r+0x49e>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d191      	bne.n	800603c <_dtoa_r+0x2cc>
 8006118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8084 	beq.w	8006228 <_dtoa_r+0x4b8>
 8006120:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006124:	2200      	movs	r2, #0
 8006126:	4b93      	ldr	r3, [pc, #588]	; (8006374 <_dtoa_r+0x604>)
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fcd2 	bl	8000ad4 <__aeabi_dcmplt>
 8006130:	2800      	cmp	r0, #0
 8006132:	d079      	beq.n	8006228 <_dtoa_r+0x4b8>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d076      	beq.n	8006228 <_dtoa_r+0x4b8>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dd34      	ble.n	80061aa <_dtoa_r+0x43a>
 8006140:	2200      	movs	r2, #0
 8006142:	4b8d      	ldr	r3, [pc, #564]	; (8006378 <_dtoa_r+0x608>)
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fa52 	bl	80005f0 <__aeabi_dmul>
 800614c:	e9cd 0100 	strd	r0, r1, [sp]
 8006150:	9e04      	ldr	r6, [sp, #16]
 8006152:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006156:	3501      	adds	r5, #1
 8006158:	4628      	mov	r0, r5
 800615a:	f7fa f9e3 	bl	8000524 <__aeabi_i2d>
 800615e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006162:	f7fa fa45 	bl	80005f0 <__aeabi_dmul>
 8006166:	2200      	movs	r2, #0
 8006168:	4b84      	ldr	r3, [pc, #528]	; (800637c <_dtoa_r+0x60c>)
 800616a:	f7fa f88f 	bl	800028c <__adddf3>
 800616e:	4680      	mov	r8, r0
 8006170:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006174:	2e00      	cmp	r6, #0
 8006176:	d15a      	bne.n	800622e <_dtoa_r+0x4be>
 8006178:	2200      	movs	r2, #0
 800617a:	4b81      	ldr	r3, [pc, #516]	; (8006380 <_dtoa_r+0x610>)
 800617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006180:	f7fa f882 	bl	8000288 <__aeabi_dsub>
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	e9cd 0100 	strd	r0, r1, [sp]
 800618c:	f7fa fcc0 	bl	8000b10 <__aeabi_dcmpgt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 829b 	bne.w	80066cc <_dtoa_r+0x95c>
 8006196:	4642      	mov	r2, r8
 8006198:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800619c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a0:	f7fa fc98 	bl	8000ad4 <__aeabi_dcmplt>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f040 828f 	bne.w	80066c8 <_dtoa_r+0x958>
 80061aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061ae:	e9cd 2300 	strd	r2, r3, [sp]
 80061b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f2c0 8150 	blt.w	800645a <_dtoa_r+0x6ea>
 80061ba:	f1bb 0f0e 	cmp.w	fp, #14
 80061be:	f300 814c 	bgt.w	800645a <_dtoa_r+0x6ea>
 80061c2:	4b6a      	ldr	r3, [pc, #424]	; (800636c <_dtoa_r+0x5fc>)
 80061c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f280 80da 	bge.w	8006388 <_dtoa_r+0x618>
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f300 80d6 	bgt.w	8006388 <_dtoa_r+0x618>
 80061dc:	f040 8273 	bne.w	80066c6 <_dtoa_r+0x956>
 80061e0:	2200      	movs	r2, #0
 80061e2:	4b67      	ldr	r3, [pc, #412]	; (8006380 <_dtoa_r+0x610>)
 80061e4:	4640      	mov	r0, r8
 80061e6:	4649      	mov	r1, r9
 80061e8:	f7fa fa02 	bl	80005f0 <__aeabi_dmul>
 80061ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061f0:	f7fa fc84 	bl	8000afc <__aeabi_dcmpge>
 80061f4:	9e03      	ldr	r6, [sp, #12]
 80061f6:	4637      	mov	r7, r6
 80061f8:	2800      	cmp	r0, #0
 80061fa:	f040 824a 	bne.w	8006692 <_dtoa_r+0x922>
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	9a02      	ldr	r2, [sp, #8]
 8006202:	1c5d      	adds	r5, r3, #1
 8006204:	2331      	movs	r3, #49	; 0x31
 8006206:	7013      	strb	r3, [r2, #0]
 8006208:	f10b 0b01 	add.w	fp, fp, #1
 800620c:	e245      	b.n	800669a <_dtoa_r+0x92a>
 800620e:	07f2      	lsls	r2, r6, #31
 8006210:	d505      	bpl.n	800621e <_dtoa_r+0x4ae>
 8006212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006216:	f7fa f9eb 	bl	80005f0 <__aeabi_dmul>
 800621a:	3501      	adds	r5, #1
 800621c:	2301      	movs	r3, #1
 800621e:	1076      	asrs	r6, r6, #1
 8006220:	3708      	adds	r7, #8
 8006222:	e775      	b.n	8006110 <_dtoa_r+0x3a0>
 8006224:	2502      	movs	r5, #2
 8006226:	e777      	b.n	8006118 <_dtoa_r+0x3a8>
 8006228:	465f      	mov	r7, fp
 800622a:	9e03      	ldr	r6, [sp, #12]
 800622c:	e794      	b.n	8006158 <_dtoa_r+0x3e8>
 800622e:	9a02      	ldr	r2, [sp, #8]
 8006230:	4b4e      	ldr	r3, [pc, #312]	; (800636c <_dtoa_r+0x5fc>)
 8006232:	4432      	add	r2, r6
 8006234:	9213      	str	r2, [sp, #76]	; 0x4c
 8006236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006238:	1e71      	subs	r1, r6, #1
 800623a:	2a00      	cmp	r2, #0
 800623c:	d048      	beq.n	80062d0 <_dtoa_r+0x560>
 800623e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	2000      	movs	r0, #0
 8006248:	494e      	ldr	r1, [pc, #312]	; (8006384 <_dtoa_r+0x614>)
 800624a:	f7fa fafb 	bl	8000844 <__aeabi_ddiv>
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	f7fa f819 	bl	8000288 <__aeabi_dsub>
 8006256:	9d02      	ldr	r5, [sp, #8]
 8006258:	4680      	mov	r8, r0
 800625a:	4689      	mov	r9, r1
 800625c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006260:	f7fa fc76 	bl	8000b50 <__aeabi_d2iz>
 8006264:	4606      	mov	r6, r0
 8006266:	f7fa f95d 	bl	8000524 <__aeabi_i2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006272:	f7fa f809 	bl	8000288 <__aeabi_dsub>
 8006276:	3630      	adds	r6, #48	; 0x30
 8006278:	f805 6b01 	strb.w	r6, [r5], #1
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	e9cd 0100 	strd	r0, r1, [sp]
 8006284:	f7fa fc26 	bl	8000ad4 <__aeabi_dcmplt>
 8006288:	2800      	cmp	r0, #0
 800628a:	d165      	bne.n	8006358 <_dtoa_r+0x5e8>
 800628c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006290:	2000      	movs	r0, #0
 8006292:	4938      	ldr	r1, [pc, #224]	; (8006374 <_dtoa_r+0x604>)
 8006294:	f7f9 fff8 	bl	8000288 <__aeabi_dsub>
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	f7fa fc1a 	bl	8000ad4 <__aeabi_dcmplt>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f040 80ba 	bne.w	800641a <_dtoa_r+0x6aa>
 80062a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062a8:	429d      	cmp	r5, r3
 80062aa:	f43f af7e 	beq.w	80061aa <_dtoa_r+0x43a>
 80062ae:	2200      	movs	r2, #0
 80062b0:	4b31      	ldr	r3, [pc, #196]	; (8006378 <_dtoa_r+0x608>)
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7fa f99b 	bl	80005f0 <__aeabi_dmul>
 80062ba:	2200      	movs	r2, #0
 80062bc:	4680      	mov	r8, r0
 80062be:	4689      	mov	r9, r1
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <_dtoa_r+0x608>)
 80062c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c6:	f7fa f993 	bl	80005f0 <__aeabi_dmul>
 80062ca:	e9cd 0100 	strd	r0, r1, [sp]
 80062ce:	e7c5      	b.n	800625c <_dtoa_r+0x4ec>
 80062d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062dc:	f7fa f988 	bl	80005f0 <__aeabi_dmul>
 80062e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062e4:	9d02      	ldr	r5, [sp, #8]
 80062e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ea:	f7fa fc31 	bl	8000b50 <__aeabi_d2iz>
 80062ee:	4606      	mov	r6, r0
 80062f0:	f7fa f918 	bl	8000524 <__aeabi_i2d>
 80062f4:	3630      	adds	r6, #48	; 0x30
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fe:	f7f9 ffc3 	bl	8000288 <__aeabi_dsub>
 8006302:	f805 6b01 	strb.w	r6, [r5], #1
 8006306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006308:	42ab      	cmp	r3, r5
 800630a:	4680      	mov	r8, r0
 800630c:	4689      	mov	r9, r1
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	d125      	bne.n	8006360 <_dtoa_r+0x5f0>
 8006314:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <_dtoa_r+0x614>)
 8006316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631a:	f7f9 ffb7 	bl	800028c <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4640      	mov	r0, r8
 8006324:	4649      	mov	r1, r9
 8006326:	f7fa fbf3 	bl	8000b10 <__aeabi_dcmpgt>
 800632a:	2800      	cmp	r0, #0
 800632c:	d175      	bne.n	800641a <_dtoa_r+0x6aa>
 800632e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006332:	2000      	movs	r0, #0
 8006334:	4913      	ldr	r1, [pc, #76]	; (8006384 <_dtoa_r+0x614>)
 8006336:	f7f9 ffa7 	bl	8000288 <__aeabi_dsub>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7fa fbc7 	bl	8000ad4 <__aeabi_dcmplt>
 8006346:	2800      	cmp	r0, #0
 8006348:	f43f af2f 	beq.w	80061aa <_dtoa_r+0x43a>
 800634c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006350:	2b30      	cmp	r3, #48	; 0x30
 8006352:	f105 32ff 	add.w	r2, r5, #4294967295
 8006356:	d001      	beq.n	800635c <_dtoa_r+0x5ec>
 8006358:	46bb      	mov	fp, r7
 800635a:	e04d      	b.n	80063f8 <_dtoa_r+0x688>
 800635c:	4615      	mov	r5, r2
 800635e:	e7f5      	b.n	800634c <_dtoa_r+0x5dc>
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_dtoa_r+0x608>)
 8006362:	f7fa f945 	bl	80005f0 <__aeabi_dmul>
 8006366:	e9cd 0100 	strd	r0, r1, [sp]
 800636a:	e7bc      	b.n	80062e6 <_dtoa_r+0x576>
 800636c:	080086b8 	.word	0x080086b8
 8006370:	08008690 	.word	0x08008690
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	40240000 	.word	0x40240000
 800637c:	401c0000 	.word	0x401c0000
 8006380:	40140000 	.word	0x40140000
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	e9dd 6700 	ldrd	r6, r7, [sp]
 800638c:	9d02      	ldr	r5, [sp, #8]
 800638e:	4642      	mov	r2, r8
 8006390:	464b      	mov	r3, r9
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7fa fa55 	bl	8000844 <__aeabi_ddiv>
 800639a:	f7fa fbd9 	bl	8000b50 <__aeabi_d2iz>
 800639e:	9000      	str	r0, [sp, #0]
 80063a0:	f7fa f8c0 	bl	8000524 <__aeabi_i2d>
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	f7fa f922 	bl	80005f0 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7f9 ff68 	bl	8000288 <__aeabi_dsub>
 80063b8:	9e00      	ldr	r6, [sp, #0]
 80063ba:	9f03      	ldr	r7, [sp, #12]
 80063bc:	3630      	adds	r6, #48	; 0x30
 80063be:	f805 6b01 	strb.w	r6, [r5], #1
 80063c2:	9e02      	ldr	r6, [sp, #8]
 80063c4:	1bae      	subs	r6, r5, r6
 80063c6:	42b7      	cmp	r7, r6
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	d138      	bne.n	8006440 <_dtoa_r+0x6d0>
 80063ce:	f7f9 ff5d 	bl	800028c <__adddf3>
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa fb79 	bl	8000ad4 <__aeabi_dcmplt>
 80063e2:	b9c8      	cbnz	r0, 8006418 <_dtoa_r+0x6a8>
 80063e4:	4632      	mov	r2, r6
 80063e6:	463b      	mov	r3, r7
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fa fb68 	bl	8000ac0 <__aeabi_dcmpeq>
 80063f0:	b110      	cbz	r0, 80063f8 <_dtoa_r+0x688>
 80063f2:	9b00      	ldr	r3, [sp, #0]
 80063f4:	07db      	lsls	r3, r3, #31
 80063f6:	d40f      	bmi.n	8006418 <_dtoa_r+0x6a8>
 80063f8:	4651      	mov	r1, sl
 80063fa:	4620      	mov	r0, r4
 80063fc:	f001 f83c 	bl	8007478 <_Bfree>
 8006400:	2300      	movs	r3, #0
 8006402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006404:	702b      	strb	r3, [r5, #0]
 8006406:	f10b 0301 	add.w	r3, fp, #1
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800640e:	2b00      	cmp	r3, #0
 8006410:	f43f acf8 	beq.w	8005e04 <_dtoa_r+0x94>
 8006414:	601d      	str	r5, [r3, #0]
 8006416:	e4f5      	b.n	8005e04 <_dtoa_r+0x94>
 8006418:	465f      	mov	r7, fp
 800641a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800641e:	2a39      	cmp	r2, #57	; 0x39
 8006420:	f105 33ff 	add.w	r3, r5, #4294967295
 8006424:	d106      	bne.n	8006434 <_dtoa_r+0x6c4>
 8006426:	9a02      	ldr	r2, [sp, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	d107      	bne.n	800643c <_dtoa_r+0x6cc>
 800642c:	2330      	movs	r3, #48	; 0x30
 800642e:	7013      	strb	r3, [r2, #0]
 8006430:	3701      	adds	r7, #1
 8006432:	4613      	mov	r3, r2
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	3201      	adds	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e78d      	b.n	8006358 <_dtoa_r+0x5e8>
 800643c:	461d      	mov	r5, r3
 800643e:	e7ec      	b.n	800641a <_dtoa_r+0x6aa>
 8006440:	2200      	movs	r2, #0
 8006442:	4ba4      	ldr	r3, [pc, #656]	; (80066d4 <_dtoa_r+0x964>)
 8006444:	f7fa f8d4 	bl	80005f0 <__aeabi_dmul>
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	f7fa fb36 	bl	8000ac0 <__aeabi_dcmpeq>
 8006454:	2800      	cmp	r0, #0
 8006456:	d09a      	beq.n	800638e <_dtoa_r+0x61e>
 8006458:	e7ce      	b.n	80063f8 <_dtoa_r+0x688>
 800645a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800645c:	2a00      	cmp	r2, #0
 800645e:	f000 80cd 	beq.w	80065fc <_dtoa_r+0x88c>
 8006462:	9a07      	ldr	r2, [sp, #28]
 8006464:	2a01      	cmp	r2, #1
 8006466:	f300 80af 	bgt.w	80065c8 <_dtoa_r+0x858>
 800646a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800646c:	2a00      	cmp	r2, #0
 800646e:	f000 80a7 	beq.w	80065c0 <_dtoa_r+0x850>
 8006472:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006476:	9e08      	ldr	r6, [sp, #32]
 8006478:	9d05      	ldr	r5, [sp, #20]
 800647a:	9a05      	ldr	r2, [sp, #20]
 800647c:	441a      	add	r2, r3
 800647e:	9205      	str	r2, [sp, #20]
 8006480:	9a06      	ldr	r2, [sp, #24]
 8006482:	2101      	movs	r1, #1
 8006484:	441a      	add	r2, r3
 8006486:	4620      	mov	r0, r4
 8006488:	9206      	str	r2, [sp, #24]
 800648a:	f001 f895 	bl	80075b8 <__i2b>
 800648e:	4607      	mov	r7, r0
 8006490:	2d00      	cmp	r5, #0
 8006492:	dd0c      	ble.n	80064ae <_dtoa_r+0x73e>
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd09      	ble.n	80064ae <_dtoa_r+0x73e>
 800649a:	42ab      	cmp	r3, r5
 800649c:	9a05      	ldr	r2, [sp, #20]
 800649e:	bfa8      	it	ge
 80064a0:	462b      	movge	r3, r5
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	9205      	str	r2, [sp, #20]
 80064a6:	9a06      	ldr	r2, [sp, #24]
 80064a8:	1aed      	subs	r5, r5, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	9b08      	ldr	r3, [sp, #32]
 80064b0:	b1f3      	cbz	r3, 80064f0 <_dtoa_r+0x780>
 80064b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a5 	beq.w	8006604 <_dtoa_r+0x894>
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	dd10      	ble.n	80064e0 <_dtoa_r+0x770>
 80064be:	4639      	mov	r1, r7
 80064c0:	4632      	mov	r2, r6
 80064c2:	4620      	mov	r0, r4
 80064c4:	f001 f90e 	bl	80076e4 <__pow5mult>
 80064c8:	4652      	mov	r2, sl
 80064ca:	4601      	mov	r1, r0
 80064cc:	4607      	mov	r7, r0
 80064ce:	4620      	mov	r0, r4
 80064d0:	f001 f87b 	bl	80075ca <__multiply>
 80064d4:	4651      	mov	r1, sl
 80064d6:	4680      	mov	r8, r0
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 ffcd 	bl	8007478 <_Bfree>
 80064de:	46c2      	mov	sl, r8
 80064e0:	9b08      	ldr	r3, [sp, #32]
 80064e2:	1b9a      	subs	r2, r3, r6
 80064e4:	d004      	beq.n	80064f0 <_dtoa_r+0x780>
 80064e6:	4651      	mov	r1, sl
 80064e8:	4620      	mov	r0, r4
 80064ea:	f001 f8fb 	bl	80076e4 <__pow5mult>
 80064ee:	4682      	mov	sl, r0
 80064f0:	2101      	movs	r1, #1
 80064f2:	4620      	mov	r0, r4
 80064f4:	f001 f860 	bl	80075b8 <__i2b>
 80064f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	4606      	mov	r6, r0
 80064fe:	f340 8083 	ble.w	8006608 <_dtoa_r+0x898>
 8006502:	461a      	mov	r2, r3
 8006504:	4601      	mov	r1, r0
 8006506:	4620      	mov	r0, r4
 8006508:	f001 f8ec 	bl	80076e4 <__pow5mult>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	2b01      	cmp	r3, #1
 8006510:	4606      	mov	r6, r0
 8006512:	dd7c      	ble.n	800660e <_dtoa_r+0x89e>
 8006514:	f04f 0800 	mov.w	r8, #0
 8006518:	6933      	ldr	r3, [r6, #16]
 800651a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800651e:	6918      	ldr	r0, [r3, #16]
 8006520:	f000 fffc 	bl	800751c <__hi0bits>
 8006524:	f1c0 0020 	rsb	r0, r0, #32
 8006528:	9b06      	ldr	r3, [sp, #24]
 800652a:	4418      	add	r0, r3
 800652c:	f010 001f 	ands.w	r0, r0, #31
 8006530:	f000 8096 	beq.w	8006660 <_dtoa_r+0x8f0>
 8006534:	f1c0 0320 	rsb	r3, r0, #32
 8006538:	2b04      	cmp	r3, #4
 800653a:	f340 8087 	ble.w	800664c <_dtoa_r+0x8dc>
 800653e:	9b05      	ldr	r3, [sp, #20]
 8006540:	f1c0 001c 	rsb	r0, r0, #28
 8006544:	4403      	add	r3, r0
 8006546:	9305      	str	r3, [sp, #20]
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	4405      	add	r5, r0
 800654c:	4403      	add	r3, r0
 800654e:	9306      	str	r3, [sp, #24]
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dd05      	ble.n	8006562 <_dtoa_r+0x7f2>
 8006556:	4651      	mov	r1, sl
 8006558:	461a      	mov	r2, r3
 800655a:	4620      	mov	r0, r4
 800655c:	f001 f910 	bl	8007780 <__lshift>
 8006560:	4682      	mov	sl, r0
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd05      	ble.n	8006574 <_dtoa_r+0x804>
 8006568:	4631      	mov	r1, r6
 800656a:	461a      	mov	r2, r3
 800656c:	4620      	mov	r0, r4
 800656e:	f001 f907 	bl	8007780 <__lshift>
 8006572:	4606      	mov	r6, r0
 8006574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006576:	2b00      	cmp	r3, #0
 8006578:	d074      	beq.n	8006664 <_dtoa_r+0x8f4>
 800657a:	4631      	mov	r1, r6
 800657c:	4650      	mov	r0, sl
 800657e:	f001 f950 	bl	8007822 <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	da6e      	bge.n	8006664 <_dtoa_r+0x8f4>
 8006586:	2300      	movs	r3, #0
 8006588:	4651      	mov	r1, sl
 800658a:	220a      	movs	r2, #10
 800658c:	4620      	mov	r0, r4
 800658e:	f000 ff8a 	bl	80074a6 <__multadd>
 8006592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006594:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006598:	4682      	mov	sl, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 81a8 	beq.w	80068f0 <_dtoa_r+0xb80>
 80065a0:	2300      	movs	r3, #0
 80065a2:	4639      	mov	r1, r7
 80065a4:	220a      	movs	r2, #10
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 ff7d 	bl	80074a6 <__multadd>
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	4607      	mov	r7, r0
 80065b2:	f300 80c8 	bgt.w	8006746 <_dtoa_r+0x9d6>
 80065b6:	9b07      	ldr	r3, [sp, #28]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	f340 80c4 	ble.w	8006746 <_dtoa_r+0x9d6>
 80065be:	e059      	b.n	8006674 <_dtoa_r+0x904>
 80065c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065c6:	e756      	b.n	8006476 <_dtoa_r+0x706>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	1e5e      	subs	r6, r3, #1
 80065cc:	9b08      	ldr	r3, [sp, #32]
 80065ce:	42b3      	cmp	r3, r6
 80065d0:	bfbf      	itttt	lt
 80065d2:	9b08      	ldrlt	r3, [sp, #32]
 80065d4:	9608      	strlt	r6, [sp, #32]
 80065d6:	1af2      	sublt	r2, r6, r3
 80065d8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80065da:	bfb6      	itet	lt
 80065dc:	189b      	addlt	r3, r3, r2
 80065de:	1b9e      	subge	r6, r3, r6
 80065e0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	bfb8      	it	lt
 80065e6:	2600      	movlt	r6, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb9      	ittee	lt
 80065ec:	9b05      	ldrlt	r3, [sp, #20]
 80065ee:	9a03      	ldrlt	r2, [sp, #12]
 80065f0:	9d05      	ldrge	r5, [sp, #20]
 80065f2:	9b03      	ldrge	r3, [sp, #12]
 80065f4:	bfbc      	itt	lt
 80065f6:	1a9d      	sublt	r5, r3, r2
 80065f8:	2300      	movlt	r3, #0
 80065fa:	e73e      	b.n	800647a <_dtoa_r+0x70a>
 80065fc:	9e08      	ldr	r6, [sp, #32]
 80065fe:	9d05      	ldr	r5, [sp, #20]
 8006600:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006602:	e745      	b.n	8006490 <_dtoa_r+0x720>
 8006604:	9a08      	ldr	r2, [sp, #32]
 8006606:	e76e      	b.n	80064e6 <_dtoa_r+0x776>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	2b01      	cmp	r3, #1
 800660c:	dc19      	bgt.n	8006642 <_dtoa_r+0x8d2>
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	b9bb      	cbnz	r3, 8006642 <_dtoa_r+0x8d2>
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006618:	b99b      	cbnz	r3, 8006642 <_dtoa_r+0x8d2>
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006620:	0d1b      	lsrs	r3, r3, #20
 8006622:	051b      	lsls	r3, r3, #20
 8006624:	b183      	cbz	r3, 8006648 <_dtoa_r+0x8d8>
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	3301      	adds	r3, #1
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	3301      	adds	r3, #1
 8006630:	9306      	str	r3, [sp, #24]
 8006632:	f04f 0801 	mov.w	r8, #1
 8006636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f af6d 	bne.w	8006518 <_dtoa_r+0x7a8>
 800663e:	2001      	movs	r0, #1
 8006640:	e772      	b.n	8006528 <_dtoa_r+0x7b8>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	e7f6      	b.n	8006636 <_dtoa_r+0x8c6>
 8006648:	4698      	mov	r8, r3
 800664a:	e7f4      	b.n	8006636 <_dtoa_r+0x8c6>
 800664c:	d080      	beq.n	8006550 <_dtoa_r+0x7e0>
 800664e:	9a05      	ldr	r2, [sp, #20]
 8006650:	331c      	adds	r3, #28
 8006652:	441a      	add	r2, r3
 8006654:	9205      	str	r2, [sp, #20]
 8006656:	9a06      	ldr	r2, [sp, #24]
 8006658:	441a      	add	r2, r3
 800665a:	441d      	add	r5, r3
 800665c:	4613      	mov	r3, r2
 800665e:	e776      	b.n	800654e <_dtoa_r+0x7de>
 8006660:	4603      	mov	r3, r0
 8006662:	e7f4      	b.n	800664e <_dtoa_r+0x8de>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	dc36      	bgt.n	80066d8 <_dtoa_r+0x968>
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	2b02      	cmp	r3, #2
 800666e:	dd33      	ble.n	80066d8 <_dtoa_r+0x968>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	b963      	cbnz	r3, 8006692 <_dtoa_r+0x922>
 8006678:	4631      	mov	r1, r6
 800667a:	2205      	movs	r2, #5
 800667c:	4620      	mov	r0, r4
 800667e:	f000 ff12 	bl	80074a6 <__multadd>
 8006682:	4601      	mov	r1, r0
 8006684:	4606      	mov	r6, r0
 8006686:	4650      	mov	r0, sl
 8006688:	f001 f8cb 	bl	8007822 <__mcmp>
 800668c:	2800      	cmp	r0, #0
 800668e:	f73f adb6 	bgt.w	80061fe <_dtoa_r+0x48e>
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	9d02      	ldr	r5, [sp, #8]
 8006696:	ea6f 0b03 	mvn.w	fp, r3
 800669a:	2300      	movs	r3, #0
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	4631      	mov	r1, r6
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fee9 	bl	8007478 <_Bfree>
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	f43f aea6 	beq.w	80063f8 <_dtoa_r+0x688>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	b12b      	cbz	r3, 80066bc <_dtoa_r+0x94c>
 80066b0:	42bb      	cmp	r3, r7
 80066b2:	d003      	beq.n	80066bc <_dtoa_r+0x94c>
 80066b4:	4619      	mov	r1, r3
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fede 	bl	8007478 <_Bfree>
 80066bc:	4639      	mov	r1, r7
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 feda 	bl	8007478 <_Bfree>
 80066c4:	e698      	b.n	80063f8 <_dtoa_r+0x688>
 80066c6:	2600      	movs	r6, #0
 80066c8:	4637      	mov	r7, r6
 80066ca:	e7e2      	b.n	8006692 <_dtoa_r+0x922>
 80066cc:	46bb      	mov	fp, r7
 80066ce:	4637      	mov	r7, r6
 80066d0:	e595      	b.n	80061fe <_dtoa_r+0x48e>
 80066d2:	bf00      	nop
 80066d4:	40240000 	.word	0x40240000
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	bb93      	cbnz	r3, 8006742 <_dtoa_r+0x9d2>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	9d02      	ldr	r5, [sp, #8]
 80066e2:	4631      	mov	r1, r6
 80066e4:	4650      	mov	r0, sl
 80066e6:	f7ff fab5 	bl	8005c54 <quorem>
 80066ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066ee:	f805 9b01 	strb.w	r9, [r5], #1
 80066f2:	9b02      	ldr	r3, [sp, #8]
 80066f4:	9a04      	ldr	r2, [sp, #16]
 80066f6:	1aeb      	subs	r3, r5, r3
 80066f8:	429a      	cmp	r2, r3
 80066fa:	f300 80dc 	bgt.w	80068b6 <_dtoa_r+0xb46>
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	2a01      	cmp	r2, #1
 8006702:	bfac      	ite	ge
 8006704:	189b      	addge	r3, r3, r2
 8006706:	3301      	addlt	r3, #1
 8006708:	4698      	mov	r8, r3
 800670a:	2300      	movs	r3, #0
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	4651      	mov	r1, sl
 8006710:	2201      	movs	r2, #1
 8006712:	4620      	mov	r0, r4
 8006714:	f001 f834 	bl	8007780 <__lshift>
 8006718:	4631      	mov	r1, r6
 800671a:	4682      	mov	sl, r0
 800671c:	f001 f881 	bl	8007822 <__mcmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	f300 808d 	bgt.w	8006840 <_dtoa_r+0xad0>
 8006726:	d103      	bne.n	8006730 <_dtoa_r+0x9c0>
 8006728:	f019 0f01 	tst.w	r9, #1
 800672c:	f040 8088 	bne.w	8006840 <_dtoa_r+0xad0>
 8006730:	4645      	mov	r5, r8
 8006732:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	f105 32ff 	add.w	r2, r5, #4294967295
 800673c:	d1af      	bne.n	800669e <_dtoa_r+0x92e>
 800673e:	4615      	mov	r5, r2
 8006740:	e7f7      	b.n	8006732 <_dtoa_r+0x9c2>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	2d00      	cmp	r5, #0
 8006748:	dd05      	ble.n	8006756 <_dtoa_r+0x9e6>
 800674a:	4639      	mov	r1, r7
 800674c:	462a      	mov	r2, r5
 800674e:	4620      	mov	r0, r4
 8006750:	f001 f816 	bl	8007780 <__lshift>
 8006754:	4607      	mov	r7, r0
 8006756:	f1b8 0f00 	cmp.w	r8, #0
 800675a:	d04c      	beq.n	80067f6 <_dtoa_r+0xa86>
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fe56 	bl	8007410 <_Balloc>
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	3202      	adds	r2, #2
 8006768:	4605      	mov	r5, r0
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f107 010c 	add.w	r1, r7, #12
 8006770:	300c      	adds	r0, #12
 8006772:	f000 fe35 	bl	80073e0 <memcpy>
 8006776:	2201      	movs	r2, #1
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f001 f800 	bl	8007780 <__lshift>
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006786:	9703      	str	r7, [sp, #12]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	4607      	mov	r7, r0
 800678e:	9305      	str	r3, [sp, #20]
 8006790:	4631      	mov	r1, r6
 8006792:	4650      	mov	r0, sl
 8006794:	f7ff fa5e 	bl	8005c54 <quorem>
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	4605      	mov	r5, r0
 800679c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067a0:	4650      	mov	r0, sl
 80067a2:	f001 f83e 	bl	8007822 <__mcmp>
 80067a6:	463a      	mov	r2, r7
 80067a8:	9000      	str	r0, [sp, #0]
 80067aa:	4631      	mov	r1, r6
 80067ac:	4620      	mov	r0, r4
 80067ae:	f001 f852 	bl	8007856 <__mdiff>
 80067b2:	68c3      	ldr	r3, [r0, #12]
 80067b4:	4602      	mov	r2, r0
 80067b6:	bb03      	cbnz	r3, 80067fa <_dtoa_r+0xa8a>
 80067b8:	4601      	mov	r1, r0
 80067ba:	9006      	str	r0, [sp, #24]
 80067bc:	4650      	mov	r0, sl
 80067be:	f001 f830 	bl	8007822 <__mcmp>
 80067c2:	9a06      	ldr	r2, [sp, #24]
 80067c4:	4603      	mov	r3, r0
 80067c6:	4611      	mov	r1, r2
 80067c8:	4620      	mov	r0, r4
 80067ca:	9306      	str	r3, [sp, #24]
 80067cc:	f000 fe54 	bl	8007478 <_Bfree>
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	b9a3      	cbnz	r3, 80067fe <_dtoa_r+0xa8e>
 80067d4:	9a07      	ldr	r2, [sp, #28]
 80067d6:	b992      	cbnz	r2, 80067fe <_dtoa_r+0xa8e>
 80067d8:	9a05      	ldr	r2, [sp, #20]
 80067da:	b982      	cbnz	r2, 80067fe <_dtoa_r+0xa8e>
 80067dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067e0:	d029      	beq.n	8006836 <_dtoa_r+0xac6>
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dd01      	ble.n	80067ec <_dtoa_r+0xa7c>
 80067e8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80067ec:	f108 0501 	add.w	r5, r8, #1
 80067f0:	f888 9000 	strb.w	r9, [r8]
 80067f4:	e753      	b.n	800669e <_dtoa_r+0x92e>
 80067f6:	4638      	mov	r0, r7
 80067f8:	e7c2      	b.n	8006780 <_dtoa_r+0xa10>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7e3      	b.n	80067c6 <_dtoa_r+0xa56>
 80067fe:	9a00      	ldr	r2, [sp, #0]
 8006800:	2a00      	cmp	r2, #0
 8006802:	db04      	blt.n	800680e <_dtoa_r+0xa9e>
 8006804:	d125      	bne.n	8006852 <_dtoa_r+0xae2>
 8006806:	9a07      	ldr	r2, [sp, #28]
 8006808:	bb1a      	cbnz	r2, 8006852 <_dtoa_r+0xae2>
 800680a:	9a05      	ldr	r2, [sp, #20]
 800680c:	bb0a      	cbnz	r2, 8006852 <_dtoa_r+0xae2>
 800680e:	2b00      	cmp	r3, #0
 8006810:	ddec      	ble.n	80067ec <_dtoa_r+0xa7c>
 8006812:	4651      	mov	r1, sl
 8006814:	2201      	movs	r2, #1
 8006816:	4620      	mov	r0, r4
 8006818:	f000 ffb2 	bl	8007780 <__lshift>
 800681c:	4631      	mov	r1, r6
 800681e:	4682      	mov	sl, r0
 8006820:	f000 ffff 	bl	8007822 <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	dc03      	bgt.n	8006830 <_dtoa_r+0xac0>
 8006828:	d1e0      	bne.n	80067ec <_dtoa_r+0xa7c>
 800682a:	f019 0f01 	tst.w	r9, #1
 800682e:	d0dd      	beq.n	80067ec <_dtoa_r+0xa7c>
 8006830:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006834:	d1d8      	bne.n	80067e8 <_dtoa_r+0xa78>
 8006836:	2339      	movs	r3, #57	; 0x39
 8006838:	f888 3000 	strb.w	r3, [r8]
 800683c:	f108 0801 	add.w	r8, r8, #1
 8006840:	4645      	mov	r5, r8
 8006842:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006846:	2b39      	cmp	r3, #57	; 0x39
 8006848:	f105 32ff 	add.w	r2, r5, #4294967295
 800684c:	d03b      	beq.n	80068c6 <_dtoa_r+0xb56>
 800684e:	3301      	adds	r3, #1
 8006850:	e040      	b.n	80068d4 <_dtoa_r+0xb64>
 8006852:	2b00      	cmp	r3, #0
 8006854:	f108 0501 	add.w	r5, r8, #1
 8006858:	dd05      	ble.n	8006866 <_dtoa_r+0xaf6>
 800685a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800685e:	d0ea      	beq.n	8006836 <_dtoa_r+0xac6>
 8006860:	f109 0901 	add.w	r9, r9, #1
 8006864:	e7c4      	b.n	80067f0 <_dtoa_r+0xa80>
 8006866:	9b02      	ldr	r3, [sp, #8]
 8006868:	9a04      	ldr	r2, [sp, #16]
 800686a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800686e:	1aeb      	subs	r3, r5, r3
 8006870:	4293      	cmp	r3, r2
 8006872:	46a8      	mov	r8, r5
 8006874:	f43f af4b 	beq.w	800670e <_dtoa_r+0x99e>
 8006878:	4651      	mov	r1, sl
 800687a:	2300      	movs	r3, #0
 800687c:	220a      	movs	r2, #10
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fe11 	bl	80074a6 <__multadd>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	9903      	ldr	r1, [sp, #12]
 8006888:	42bb      	cmp	r3, r7
 800688a:	4682      	mov	sl, r0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	f04f 020a 	mov.w	r2, #10
 8006894:	4620      	mov	r0, r4
 8006896:	d104      	bne.n	80068a2 <_dtoa_r+0xb32>
 8006898:	f000 fe05 	bl	80074a6 <__multadd>
 800689c:	9003      	str	r0, [sp, #12]
 800689e:	4607      	mov	r7, r0
 80068a0:	e776      	b.n	8006790 <_dtoa_r+0xa20>
 80068a2:	f000 fe00 	bl	80074a6 <__multadd>
 80068a6:	2300      	movs	r3, #0
 80068a8:	9003      	str	r0, [sp, #12]
 80068aa:	220a      	movs	r2, #10
 80068ac:	4639      	mov	r1, r7
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fdf9 	bl	80074a6 <__multadd>
 80068b4:	e7f3      	b.n	800689e <_dtoa_r+0xb2e>
 80068b6:	4651      	mov	r1, sl
 80068b8:	2300      	movs	r3, #0
 80068ba:	220a      	movs	r2, #10
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fdf2 	bl	80074a6 <__multadd>
 80068c2:	4682      	mov	sl, r0
 80068c4:	e70d      	b.n	80066e2 <_dtoa_r+0x972>
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d105      	bne.n	80068d8 <_dtoa_r+0xb68>
 80068cc:	9a02      	ldr	r2, [sp, #8]
 80068ce:	f10b 0b01 	add.w	fp, fp, #1
 80068d2:	2331      	movs	r3, #49	; 0x31
 80068d4:	7013      	strb	r3, [r2, #0]
 80068d6:	e6e2      	b.n	800669e <_dtoa_r+0x92e>
 80068d8:	4615      	mov	r5, r2
 80068da:	e7b2      	b.n	8006842 <_dtoa_r+0xad2>
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <_dtoa_r+0xb94>)
 80068de:	f7ff baae 	b.w	8005e3e <_dtoa_r+0xce>
 80068e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f aa88 	bne.w	8005dfa <_dtoa_r+0x8a>
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <_dtoa_r+0xb98>)
 80068ec:	f7ff baa7 	b.w	8005e3e <_dtoa_r+0xce>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f73f aef4 	bgt.w	80066e0 <_dtoa_r+0x970>
 80068f8:	9b07      	ldr	r3, [sp, #28]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	f77f aef0 	ble.w	80066e0 <_dtoa_r+0x970>
 8006900:	e6b8      	b.n	8006674 <_dtoa_r+0x904>
 8006902:	bf00      	nop
 8006904:	080085fa 	.word	0x080085fa
 8006908:	0800861c 	.word	0x0800861c

0800690c <__sflush_r>:
 800690c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006910:	b293      	uxth	r3, r2
 8006912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	4605      	mov	r5, r0
 8006918:	0718      	lsls	r0, r3, #28
 800691a:	460c      	mov	r4, r1
 800691c:	d461      	bmi.n	80069e2 <__sflush_r+0xd6>
 800691e:	684b      	ldr	r3, [r1, #4]
 8006920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006924:	2b00      	cmp	r3, #0
 8006926:	818a      	strh	r2, [r1, #12]
 8006928:	dc05      	bgt.n	8006936 <__sflush_r+0x2a>
 800692a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc02      	bgt.n	8006936 <__sflush_r+0x2a>
 8006930:	2000      	movs	r0, #0
 8006932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006938:	2e00      	cmp	r6, #0
 800693a:	d0f9      	beq.n	8006930 <__sflush_r+0x24>
 800693c:	2300      	movs	r3, #0
 800693e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006942:	682f      	ldr	r7, [r5, #0]
 8006944:	602b      	str	r3, [r5, #0]
 8006946:	d037      	beq.n	80069b8 <__sflush_r+0xac>
 8006948:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	075a      	lsls	r2, r3, #29
 800694e:	d505      	bpl.n	800695c <__sflush_r+0x50>
 8006950:	6863      	ldr	r3, [r4, #4]
 8006952:	1ac0      	subs	r0, r0, r3
 8006954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006956:	b10b      	cbz	r3, 800695c <__sflush_r+0x50>
 8006958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800695a:	1ac0      	subs	r0, r0, r3
 800695c:	2300      	movs	r3, #0
 800695e:	4602      	mov	r2, r0
 8006960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006962:	6a21      	ldr	r1, [r4, #32]
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	d106      	bne.n	800697c <__sflush_r+0x70>
 800696e:	6829      	ldr	r1, [r5, #0]
 8006970:	291d      	cmp	r1, #29
 8006972:	d84f      	bhi.n	8006a14 <__sflush_r+0x108>
 8006974:	4a2d      	ldr	r2, [pc, #180]	; (8006a2c <__sflush_r+0x120>)
 8006976:	40ca      	lsrs	r2, r1
 8006978:	07d6      	lsls	r6, r2, #31
 800697a:	d54b      	bpl.n	8006a14 <__sflush_r+0x108>
 800697c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006980:	b21b      	sxth	r3, r3
 8006982:	2200      	movs	r2, #0
 8006984:	6062      	str	r2, [r4, #4]
 8006986:	04d9      	lsls	r1, r3, #19
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	d504      	bpl.n	800699a <__sflush_r+0x8e>
 8006990:	1c42      	adds	r2, r0, #1
 8006992:	d101      	bne.n	8006998 <__sflush_r+0x8c>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b903      	cbnz	r3, 800699a <__sflush_r+0x8e>
 8006998:	6560      	str	r0, [r4, #84]	; 0x54
 800699a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699c:	602f      	str	r7, [r5, #0]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d0c6      	beq.n	8006930 <__sflush_r+0x24>
 80069a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a6:	4299      	cmp	r1, r3
 80069a8:	d002      	beq.n	80069b0 <__sflush_r+0xa4>
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f9aa 	bl	8006d04 <_free_r>
 80069b0:	2000      	movs	r0, #0
 80069b2:	6360      	str	r0, [r4, #52]	; 0x34
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	6a21      	ldr	r1, [r4, #32]
 80069ba:	2301      	movs	r3, #1
 80069bc:	4628      	mov	r0, r5
 80069be:	47b0      	blx	r6
 80069c0:	1c41      	adds	r1, r0, #1
 80069c2:	d1c2      	bne.n	800694a <__sflush_r+0x3e>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0bf      	beq.n	800694a <__sflush_r+0x3e>
 80069ca:	2b1d      	cmp	r3, #29
 80069cc:	d001      	beq.n	80069d2 <__sflush_r+0xc6>
 80069ce:	2b16      	cmp	r3, #22
 80069d0:	d101      	bne.n	80069d6 <__sflush_r+0xca>
 80069d2:	602f      	str	r7, [r5, #0]
 80069d4:	e7ac      	b.n	8006930 <__sflush_r+0x24>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e2:	690f      	ldr	r7, [r1, #16]
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	d0a3      	beq.n	8006930 <__sflush_r+0x24>
 80069e8:	079b      	lsls	r3, r3, #30
 80069ea:	680e      	ldr	r6, [r1, #0]
 80069ec:	bf08      	it	eq
 80069ee:	694b      	ldreq	r3, [r1, #20]
 80069f0:	600f      	str	r7, [r1, #0]
 80069f2:	bf18      	it	ne
 80069f4:	2300      	movne	r3, #0
 80069f6:	eba6 0807 	sub.w	r8, r6, r7
 80069fa:	608b      	str	r3, [r1, #8]
 80069fc:	f1b8 0f00 	cmp.w	r8, #0
 8006a00:	dd96      	ble.n	8006930 <__sflush_r+0x24>
 8006a02:	4643      	mov	r3, r8
 8006a04:	463a      	mov	r2, r7
 8006a06:	6a21      	ldr	r1, [r4, #32]
 8006a08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b0      	blx	r6
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	dc07      	bgt.n	8006a22 <__sflush_r+0x116>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a18:	81a3      	strh	r3, [r4, #12]
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a22:	4407      	add	r7, r0
 8006a24:	eba8 0800 	sub.w	r8, r8, r0
 8006a28:	e7e8      	b.n	80069fc <__sflush_r+0xf0>
 8006a2a:	bf00      	nop
 8006a2c:	20400001 	.word	0x20400001

08006a30 <_fflush_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	690b      	ldr	r3, [r1, #16]
 8006a34:	4605      	mov	r5, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	b913      	cbnz	r3, 8006a40 <_fflush_r+0x10>
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	b118      	cbz	r0, 8006a4a <_fflush_r+0x1a>
 8006a42:	6983      	ldr	r3, [r0, #24]
 8006a44:	b90b      	cbnz	r3, 8006a4a <_fflush_r+0x1a>
 8006a46:	f000 f887 	bl	8006b58 <__sinit>
 8006a4a:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <_fflush_r+0x6c>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	d11b      	bne.n	8006a88 <_fflush_r+0x58>
 8006a50:	686c      	ldr	r4, [r5, #4]
 8006a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0ef      	beq.n	8006a3a <_fflush_r+0xa>
 8006a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a5c:	07d0      	lsls	r0, r2, #31
 8006a5e:	d404      	bmi.n	8006a6a <_fflush_r+0x3a>
 8006a60:	0599      	lsls	r1, r3, #22
 8006a62:	d402      	bmi.n	8006a6a <_fflush_r+0x3a>
 8006a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a66:	f000 fa37 	bl	8006ed8 <__retarget_lock_acquire_recursive>
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f7ff ff4d 	bl	800690c <__sflush_r>
 8006a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a74:	07da      	lsls	r2, r3, #31
 8006a76:	4605      	mov	r5, r0
 8006a78:	d4e0      	bmi.n	8006a3c <_fflush_r+0xc>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	d4dd      	bmi.n	8006a3c <_fflush_r+0xc>
 8006a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a82:	f000 fa2a 	bl	8006eda <__retarget_lock_release_recursive>
 8006a86:	e7d9      	b.n	8006a3c <_fflush_r+0xc>
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <_fflush_r+0x70>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <_fflush_r+0x62>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7df      	b.n	8006a52 <_fflush_r+0x22>
 8006a92:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <_fflush_r+0x74>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7da      	b.n	8006a52 <_fflush_r+0x22>
 8006a9c:	0800864c 	.word	0x0800864c
 8006aa0:	0800866c 	.word	0x0800866c
 8006aa4:	0800862c 	.word	0x0800862c

08006aa8 <_cleanup_r>:
 8006aa8:	4901      	ldr	r1, [pc, #4]	; (8006ab0 <_cleanup_r+0x8>)
 8006aaa:	f000 b9e7 	b.w	8006e7c <_fwalk_reent>
 8006aae:	bf00      	nop
 8006ab0:	08007b61 	.word	0x08007b61

08006ab4 <std.isra.0>:
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	6003      	str	r3, [r0, #0]
 8006abc:	6043      	str	r3, [r0, #4]
 8006abe:	6083      	str	r3, [r0, #8]
 8006ac0:	8181      	strh	r1, [r0, #12]
 8006ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ac4:	81c2      	strh	r2, [r0, #14]
 8006ac6:	6103      	str	r3, [r0, #16]
 8006ac8:	6143      	str	r3, [r0, #20]
 8006aca:	6183      	str	r3, [r0, #24]
 8006acc:	4619      	mov	r1, r3
 8006ace:	2208      	movs	r2, #8
 8006ad0:	305c      	adds	r0, #92	; 0x5c
 8006ad2:	f7fd ffb3 	bl	8004a3c <memset>
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <std.isra.0+0x38>)
 8006ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <std.isra.0+0x3c>)
 8006adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <std.isra.0+0x40>)
 8006ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <std.isra.0+0x44>)
 8006ae4:	6224      	str	r4, [r4, #32]
 8006ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	080079d1 	.word	0x080079d1
 8006af0:	080079f3 	.word	0x080079f3
 8006af4:	08007a2b 	.word	0x08007a2b
 8006af8:	08007a4f 	.word	0x08007a4f

08006afc <__sfmoreglue>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	1e4a      	subs	r2, r1, #1
 8006b00:	2568      	movs	r5, #104	; 0x68
 8006b02:	4355      	muls	r5, r2
 8006b04:	460e      	mov	r6, r1
 8006b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b0a:	f000 fa5b 	bl	8006fc4 <_malloc_r>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	b140      	cbz	r0, 8006b24 <__sfmoreglue+0x28>
 8006b12:	2100      	movs	r1, #0
 8006b14:	e880 0042 	stmia.w	r0, {r1, r6}
 8006b18:	300c      	adds	r0, #12
 8006b1a:	60a0      	str	r0, [r4, #8]
 8006b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b20:	f7fd ff8c 	bl	8004a3c <memset>
 8006b24:	4620      	mov	r0, r4
 8006b26:	bd70      	pop	{r4, r5, r6, pc}

08006b28 <__sfp_lock_acquire>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__sfp_lock_acquire+0x8>)
 8006b2a:	f000 b9d5 	b.w	8006ed8 <__retarget_lock_acquire_recursive>
 8006b2e:	bf00      	nop
 8006b30:	20000930 	.word	0x20000930

08006b34 <__sfp_lock_release>:
 8006b34:	4801      	ldr	r0, [pc, #4]	; (8006b3c <__sfp_lock_release+0x8>)
 8006b36:	f000 b9d0 	b.w	8006eda <__retarget_lock_release_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	20000930 	.word	0x20000930

08006b40 <__sinit_lock_acquire>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__sinit_lock_acquire+0x8>)
 8006b42:	f000 b9c9 	b.w	8006ed8 <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	2000092b 	.word	0x2000092b

08006b4c <__sinit_lock_release>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__sinit_lock_release+0x8>)
 8006b4e:	f000 b9c4 	b.w	8006eda <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	2000092b 	.word	0x2000092b

08006b58 <__sinit>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	f7ff fff0 	bl	8006b40 <__sinit_lock_acquire>
 8006b60:	69a3      	ldr	r3, [r4, #24]
 8006b62:	b11b      	cbz	r3, 8006b6c <__sinit+0x14>
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	f7ff bff0 	b.w	8006b4c <__sinit_lock_release>
 8006b6c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006b70:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8006b74:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006b78:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <__sinit+0x6c>)
 8006b7a:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <__sinit+0x70>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b80:	429c      	cmp	r4, r3
 8006b82:	bf04      	itt	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	61a3      	streq	r3, [r4, #24]
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f81f 	bl	8006bcc <__sfp>
 8006b8e:	6060      	str	r0, [r4, #4]
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 f81b 	bl	8006bcc <__sfp>
 8006b96:	60a0      	str	r0, [r4, #8]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 f817 	bl	8006bcc <__sfp>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	60e0      	str	r0, [r4, #12]
 8006ba2:	2104      	movs	r1, #4
 8006ba4:	6860      	ldr	r0, [r4, #4]
 8006ba6:	f7ff ff85 	bl	8006ab4 <std.isra.0>
 8006baa:	2201      	movs	r2, #1
 8006bac:	2109      	movs	r1, #9
 8006bae:	68a0      	ldr	r0, [r4, #8]
 8006bb0:	f7ff ff80 	bl	8006ab4 <std.isra.0>
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	2112      	movs	r1, #18
 8006bb8:	68e0      	ldr	r0, [r4, #12]
 8006bba:	f7ff ff7b 	bl	8006ab4 <std.isra.0>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61a3      	str	r3, [r4, #24]
 8006bc2:	e7cf      	b.n	8006b64 <__sinit+0xc>
 8006bc4:	080085c4 	.word	0x080085c4
 8006bc8:	08006aa9 	.word	0x08006aa9

08006bcc <__sfp>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	4607      	mov	r7, r0
 8006bd0:	f7ff ffaa 	bl	8006b28 <__sfp_lock_acquire>
 8006bd4:	4b1f      	ldr	r3, [pc, #124]	; (8006c54 <__sfp+0x88>)
 8006bd6:	681e      	ldr	r6, [r3, #0]
 8006bd8:	69b3      	ldr	r3, [r6, #24]
 8006bda:	b913      	cbnz	r3, 8006be2 <__sfp+0x16>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff ffbb 	bl	8006b58 <__sinit>
 8006be2:	36d8      	adds	r6, #216	; 0xd8
 8006be4:	68b4      	ldr	r4, [r6, #8]
 8006be6:	6873      	ldr	r3, [r6, #4]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	d503      	bpl.n	8006bf4 <__sfp+0x28>
 8006bec:	6833      	ldr	r3, [r6, #0]
 8006bee:	b133      	cbz	r3, 8006bfe <__sfp+0x32>
 8006bf0:	6836      	ldr	r6, [r6, #0]
 8006bf2:	e7f7      	b.n	8006be4 <__sfp+0x18>
 8006bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bf8:	b17d      	cbz	r5, 8006c1a <__sfp+0x4e>
 8006bfa:	3468      	adds	r4, #104	; 0x68
 8006bfc:	e7f4      	b.n	8006be8 <__sfp+0x1c>
 8006bfe:	2104      	movs	r1, #4
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff ff7b 	bl	8006afc <__sfmoreglue>
 8006c06:	4604      	mov	r4, r0
 8006c08:	6030      	str	r0, [r6, #0]
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <__sfp+0x24>
 8006c0e:	f7ff ff91 	bl	8006b34 <__sfp_lock_release>
 8006c12:	230c      	movs	r3, #12
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4620      	mov	r0, r4
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c1e:	81e3      	strh	r3, [r4, #14]
 8006c20:	2301      	movs	r3, #1
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c28:	6665      	str	r5, [r4, #100]	; 0x64
 8006c2a:	f000 f953 	bl	8006ed4 <__retarget_lock_init_recursive>
 8006c2e:	f7ff ff81 	bl	8006b34 <__sfp_lock_release>
 8006c32:	6025      	str	r5, [r4, #0]
 8006c34:	60a5      	str	r5, [r4, #8]
 8006c36:	6065      	str	r5, [r4, #4]
 8006c38:	6125      	str	r5, [r4, #16]
 8006c3a:	6165      	str	r5, [r4, #20]
 8006c3c:	61a5      	str	r5, [r4, #24]
 8006c3e:	2208      	movs	r2, #8
 8006c40:	4629      	mov	r1, r5
 8006c42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c46:	f7fd fef9 	bl	8004a3c <memset>
 8006c4a:	6365      	str	r5, [r4, #52]	; 0x34
 8006c4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8006c4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006c50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006c52:	e7e0      	b.n	8006c16 <__sfp+0x4a>
 8006c54:	080085c4 	.word	0x080085c4

08006c58 <_malloc_trim_r>:
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4f25      	ldr	r7, [pc, #148]	; (8006cf4 <_malloc_trim_r+0x9c>)
 8006c5e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006d00 <_malloc_trim_r+0xa8>
 8006c62:	4689      	mov	r9, r1
 8006c64:	4606      	mov	r6, r0
 8006c66:	f000 fbc7 	bl	80073f8 <__malloc_lock>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	685d      	ldr	r5, [r3, #4]
 8006c6e:	f1a8 0411 	sub.w	r4, r8, #17
 8006c72:	f025 0503 	bic.w	r5, r5, #3
 8006c76:	eba4 0409 	sub.w	r4, r4, r9
 8006c7a:	442c      	add	r4, r5
 8006c7c:	fbb4 f4f8 	udiv	r4, r4, r8
 8006c80:	3c01      	subs	r4, #1
 8006c82:	fb08 f404 	mul.w	r4, r8, r4
 8006c86:	4544      	cmp	r4, r8
 8006c88:	da05      	bge.n	8006c96 <_malloc_trim_r+0x3e>
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f000 fbba 	bl	8007404 <__malloc_unlock>
 8006c90:	2000      	movs	r0, #0
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	2100      	movs	r1, #0
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f000 fe89 	bl	80079b0 <_sbrk_r>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	442b      	add	r3, r5
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	d1f1      	bne.n	8006c8a <_malloc_trim_r+0x32>
 8006ca6:	4261      	negs	r1, r4
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 fe81 	bl	80079b0 <_sbrk_r>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d110      	bne.n	8006cd4 <_malloc_trim_r+0x7c>
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 fe7b 	bl	80079b0 <_sbrk_r>
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	1a83      	subs	r3, r0, r2
 8006cbe:	2b0f      	cmp	r3, #15
 8006cc0:	dde3      	ble.n	8006c8a <_malloc_trim_r+0x32>
 8006cc2:	490d      	ldr	r1, [pc, #52]	; (8006cf8 <_malloc_trim_r+0xa0>)
 8006cc4:	6809      	ldr	r1, [r1, #0]
 8006cc6:	1a40      	subs	r0, r0, r1
 8006cc8:	490c      	ldr	r1, [pc, #48]	; (8006cfc <_malloc_trim_r+0xa4>)
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	6008      	str	r0, [r1, #0]
 8006cd0:	6053      	str	r3, [r2, #4]
 8006cd2:	e7da      	b.n	8006c8a <_malloc_trim_r+0x32>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <_malloc_trim_r+0xa4>)
 8006cd8:	1b2d      	subs	r5, r5, r4
 8006cda:	f045 0501 	orr.w	r5, r5, #1
 8006cde:	605d      	str	r5, [r3, #4]
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	1b1c      	subs	r4, r3, r4
 8006ce6:	6014      	str	r4, [r2, #0]
 8006ce8:	f000 fb8c 	bl	8007404 <__malloc_unlock>
 8006cec:	2001      	movs	r0, #1
 8006cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000100 	.word	0x20000100
 8006cf8:	20000508 	.word	0x20000508
 8006cfc:	200006e8 	.word	0x200006e8
 8006d00:	00001000 	.word	0x00001000

08006d04 <_free_r>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	4688      	mov	r8, r1
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	f000 80ab 	beq.w	8006e68 <_free_r+0x164>
 8006d12:	f000 fb71 	bl	80073f8 <__malloc_lock>
 8006d16:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006d1a:	4d54      	ldr	r5, [pc, #336]	; (8006e6c <_free_r+0x168>)
 8006d1c:	f022 0001 	bic.w	r0, r2, #1
 8006d20:	f1a8 0308 	sub.w	r3, r8, #8
 8006d24:	181f      	adds	r7, r3, r0
 8006d26:	68a9      	ldr	r1, [r5, #8]
 8006d28:	687e      	ldr	r6, [r7, #4]
 8006d2a:	428f      	cmp	r7, r1
 8006d2c:	f026 0603 	bic.w	r6, r6, #3
 8006d30:	f002 0201 	and.w	r2, r2, #1
 8006d34:	d11b      	bne.n	8006d6e <_free_r+0x6a>
 8006d36:	4430      	add	r0, r6
 8006d38:	b93a      	cbnz	r2, 8006d4a <_free_r+0x46>
 8006d3a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	4410      	add	r0, r2
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	60ca      	str	r2, [r1, #12]
 8006d48:	6091      	str	r1, [r2, #8]
 8006d4a:	f040 0201 	orr.w	r2, r0, #1
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	60ab      	str	r3, [r5, #8]
 8006d52:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <_free_r+0x16c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4298      	cmp	r0, r3
 8006d58:	d304      	bcc.n	8006d64 <_free_r+0x60>
 8006d5a:	4b46      	ldr	r3, [pc, #280]	; (8006e74 <_free_r+0x170>)
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	f7ff ff7a 	bl	8006c58 <_malloc_trim_r>
 8006d64:	4620      	mov	r0, r4
 8006d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	f000 bb4b 	b.w	8007404 <__malloc_unlock>
 8006d6e:	607e      	str	r6, [r7, #4]
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d139      	bne.n	8006de8 <_free_r+0xe4>
 8006d74:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006d78:	1a5b      	subs	r3, r3, r1
 8006d7a:	4408      	add	r0, r1
 8006d7c:	6899      	ldr	r1, [r3, #8]
 8006d7e:	f105 0e08 	add.w	lr, r5, #8
 8006d82:	4571      	cmp	r1, lr
 8006d84:	d032      	beq.n	8006dec <_free_r+0xe8>
 8006d86:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006d8a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006d8e:	f8ce 1008 	str.w	r1, [lr, #8]
 8006d92:	19b9      	adds	r1, r7, r6
 8006d94:	6849      	ldr	r1, [r1, #4]
 8006d96:	07c9      	lsls	r1, r1, #31
 8006d98:	d40a      	bmi.n	8006db0 <_free_r+0xac>
 8006d9a:	4430      	add	r0, r6
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	bb3a      	cbnz	r2, 8006df0 <_free_r+0xec>
 8006da0:	4e35      	ldr	r6, [pc, #212]	; (8006e78 <_free_r+0x174>)
 8006da2:	42b1      	cmp	r1, r6
 8006da4:	d124      	bne.n	8006df0 <_free_r+0xec>
 8006da6:	616b      	str	r3, [r5, #20]
 8006da8:	612b      	str	r3, [r5, #16]
 8006daa:	2201      	movs	r2, #1
 8006dac:	60d9      	str	r1, [r3, #12]
 8006dae:	6099      	str	r1, [r3, #8]
 8006db0:	f040 0101 	orr.w	r1, r0, #1
 8006db4:	6059      	str	r1, [r3, #4]
 8006db6:	5018      	str	r0, [r3, r0]
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d1d3      	bne.n	8006d64 <_free_r+0x60>
 8006dbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006dc0:	d21a      	bcs.n	8006df8 <_free_r+0xf4>
 8006dc2:	08c0      	lsrs	r0, r0, #3
 8006dc4:	1081      	asrs	r1, r0, #2
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	408a      	lsls	r2, r1
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	3001      	adds	r0, #1
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	606a      	str	r2, [r5, #4]
 8006dd2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006dd6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006dda:	6099      	str	r1, [r3, #8]
 8006ddc:	3a08      	subs	r2, #8
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006de4:	60cb      	str	r3, [r1, #12]
 8006de6:	e7bd      	b.n	8006d64 <_free_r+0x60>
 8006de8:	2200      	movs	r2, #0
 8006dea:	e7d2      	b.n	8006d92 <_free_r+0x8e>
 8006dec:	2201      	movs	r2, #1
 8006dee:	e7d0      	b.n	8006d92 <_free_r+0x8e>
 8006df0:	68fe      	ldr	r6, [r7, #12]
 8006df2:	60ce      	str	r6, [r1, #12]
 8006df4:	60b1      	str	r1, [r6, #8]
 8006df6:	e7db      	b.n	8006db0 <_free_r+0xac>
 8006df8:	0a42      	lsrs	r2, r0, #9
 8006dfa:	2a04      	cmp	r2, #4
 8006dfc:	d813      	bhi.n	8006e26 <_free_r+0x122>
 8006dfe:	0982      	lsrs	r2, r0, #6
 8006e00:	3238      	adds	r2, #56	; 0x38
 8006e02:	1c51      	adds	r1, r2, #1
 8006e04:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006e08:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006e0c:	428e      	cmp	r6, r1
 8006e0e:	d124      	bne.n	8006e5a <_free_r+0x156>
 8006e10:	2001      	movs	r0, #1
 8006e12:	1092      	asrs	r2, r2, #2
 8006e14:	fa00 f202 	lsl.w	r2, r0, r2
 8006e18:	6868      	ldr	r0, [r5, #4]
 8006e1a:	4302      	orrs	r2, r0
 8006e1c:	606a      	str	r2, [r5, #4]
 8006e1e:	60de      	str	r6, [r3, #12]
 8006e20:	6099      	str	r1, [r3, #8]
 8006e22:	60b3      	str	r3, [r6, #8]
 8006e24:	e7de      	b.n	8006de4 <_free_r+0xe0>
 8006e26:	2a14      	cmp	r2, #20
 8006e28:	d801      	bhi.n	8006e2e <_free_r+0x12a>
 8006e2a:	325b      	adds	r2, #91	; 0x5b
 8006e2c:	e7e9      	b.n	8006e02 <_free_r+0xfe>
 8006e2e:	2a54      	cmp	r2, #84	; 0x54
 8006e30:	d802      	bhi.n	8006e38 <_free_r+0x134>
 8006e32:	0b02      	lsrs	r2, r0, #12
 8006e34:	326e      	adds	r2, #110	; 0x6e
 8006e36:	e7e4      	b.n	8006e02 <_free_r+0xfe>
 8006e38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006e3c:	d802      	bhi.n	8006e44 <_free_r+0x140>
 8006e3e:	0bc2      	lsrs	r2, r0, #15
 8006e40:	3277      	adds	r2, #119	; 0x77
 8006e42:	e7de      	b.n	8006e02 <_free_r+0xfe>
 8006e44:	f240 5154 	movw	r1, #1364	; 0x554
 8006e48:	428a      	cmp	r2, r1
 8006e4a:	bf9a      	itte	ls
 8006e4c:	0c82      	lsrls	r2, r0, #18
 8006e4e:	327c      	addls	r2, #124	; 0x7c
 8006e50:	227e      	movhi	r2, #126	; 0x7e
 8006e52:	e7d6      	b.n	8006e02 <_free_r+0xfe>
 8006e54:	6889      	ldr	r1, [r1, #8]
 8006e56:	428e      	cmp	r6, r1
 8006e58:	d004      	beq.n	8006e64 <_free_r+0x160>
 8006e5a:	684a      	ldr	r2, [r1, #4]
 8006e5c:	f022 0203 	bic.w	r2, r2, #3
 8006e60:	4290      	cmp	r0, r2
 8006e62:	d3f7      	bcc.n	8006e54 <_free_r+0x150>
 8006e64:	68ce      	ldr	r6, [r1, #12]
 8006e66:	e7da      	b.n	8006e1e <_free_r+0x11a>
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	20000100 	.word	0x20000100
 8006e70:	2000050c 	.word	0x2000050c
 8006e74:	20000718 	.word	0x20000718
 8006e78:	20000108 	.word	0x20000108

08006e7c <_fwalk_reent>:
 8006e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e80:	4680      	mov	r8, r0
 8006e82:	4689      	mov	r9, r1
 8006e84:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8006e88:	2600      	movs	r6, #0
 8006e8a:	b914      	cbnz	r4, 8006e92 <_fwalk_reent+0x16>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	68a5      	ldr	r5, [r4, #8]
 8006e94:	6867      	ldr	r7, [r4, #4]
 8006e96:	3f01      	subs	r7, #1
 8006e98:	d501      	bpl.n	8006e9e <_fwalk_reent+0x22>
 8006e9a:	6824      	ldr	r4, [r4, #0]
 8006e9c:	e7f5      	b.n	8006e8a <_fwalk_reent+0xe>
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d907      	bls.n	8006eb4 <_fwalk_reent+0x38>
 8006ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	d003      	beq.n	8006eb4 <_fwalk_reent+0x38>
 8006eac:	4629      	mov	r1, r5
 8006eae:	4640      	mov	r0, r8
 8006eb0:	47c8      	blx	r9
 8006eb2:	4306      	orrs	r6, r0
 8006eb4:	3568      	adds	r5, #104	; 0x68
 8006eb6:	e7ee      	b.n	8006e96 <_fwalk_reent+0x1a>

08006eb8 <_localeconv_r>:
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <_localeconv_r+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6a18      	ldr	r0, [r3, #32]
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <_localeconv_r+0x18>)
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	bf08      	it	eq
 8006ec4:	4618      	moveq	r0, r3
 8006ec6:	30f0      	adds	r0, #240	; 0xf0
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	20000510 	.word	0x20000510

08006ed4 <__retarget_lock_init_recursive>:
 8006ed4:	4770      	bx	lr

08006ed6 <__retarget_lock_close_recursive>:
 8006ed6:	4770      	bx	lr

08006ed8 <__retarget_lock_acquire_recursive>:
 8006ed8:	4770      	bx	lr

08006eda <__retarget_lock_release_recursive>:
 8006eda:	4770      	bx	lr

08006edc <__swhatbuf_r>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	460e      	mov	r6, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	b090      	sub	sp, #64	; 0x40
 8006ee8:	4614      	mov	r4, r2
 8006eea:	461d      	mov	r5, r3
 8006eec:	da09      	bge.n	8006f02 <__swhatbuf_r+0x26>
 8006eee:	89b3      	ldrh	r3, [r6, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ef6:	602a      	str	r2, [r5, #0]
 8006ef8:	d116      	bne.n	8006f28 <__swhatbuf_r+0x4c>
 8006efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	e015      	b.n	8006f2e <__swhatbuf_r+0x52>
 8006f02:	aa01      	add	r2, sp, #4
 8006f04:	f000 ff02 	bl	8007d0c <_fstat_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	dbf0      	blt.n	8006eee <__swhatbuf_r+0x12>
 8006f0c:	9a02      	ldr	r2, [sp, #8]
 8006f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f16:	425a      	negs	r2, r3
 8006f18:	415a      	adcs	r2, r3
 8006f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	e002      	b.n	8006f2e <__swhatbuf_r+0x52>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	b010      	add	sp, #64	; 0x40
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f34 <__smakebuf_r>:
 8006f34:	898b      	ldrh	r3, [r1, #12]
 8006f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f38:	079d      	lsls	r5, r3, #30
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	d507      	bpl.n	8006f50 <__smakebuf_r+0x1c>
 8006f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6163      	str	r3, [r4, #20]
 8006f4c:	b002      	add	sp, #8
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	ab01      	add	r3, sp, #4
 8006f52:	466a      	mov	r2, sp
 8006f54:	f7ff ffc2 	bl	8006edc <__swhatbuf_r>
 8006f58:	9900      	ldr	r1, [sp, #0]
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 f831 	bl	8006fc4 <_malloc_r>
 8006f62:	b948      	cbnz	r0, 8006f78 <__smakebuf_r+0x44>
 8006f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f68:	059a      	lsls	r2, r3, #22
 8006f6a:	d4ef      	bmi.n	8006f4c <__smakebuf_r+0x18>
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	f043 0302 	orr.w	r3, r3, #2
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e7e3      	b.n	8006f40 <__smakebuf_r+0xc>
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <__smakebuf_r+0x7c>)
 8006f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	6020      	str	r0, [r4, #0]
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	6120      	str	r0, [r4, #16]
 8006f8e:	b15b      	cbz	r3, 8006fa8 <__smakebuf_r+0x74>
 8006f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f94:	4630      	mov	r0, r6
 8006f96:	f001 f819 	bl	8007fcc <_isatty_r>
 8006f9a:	b128      	cbz	r0, 8006fa8 <__smakebuf_r+0x74>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	431d      	orrs	r5, r3
 8006fac:	81a5      	strh	r5, [r4, #12]
 8006fae:	e7cd      	b.n	8006f4c <__smakebuf_r+0x18>
 8006fb0:	08006aa9 	.word	0x08006aa9

08006fb4 <malloc>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <malloc+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f000 b803 	b.w	8006fc4 <_malloc_r>
 8006fbe:	bf00      	nop
 8006fc0:	2000000c 	.word	0x2000000c

08006fc4 <_malloc_r>:
 8006fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	f101 040b 	add.w	r4, r1, #11
 8006fcc:	2c16      	cmp	r4, #22
 8006fce:	4681      	mov	r9, r0
 8006fd0:	d907      	bls.n	8006fe2 <_malloc_r+0x1e>
 8006fd2:	f034 0407 	bics.w	r4, r4, #7
 8006fd6:	d505      	bpl.n	8006fe4 <_malloc_r+0x20>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	f8c9 3000 	str.w	r3, [r9]
 8006fde:	2600      	movs	r6, #0
 8006fe0:	e131      	b.n	8007246 <_malloc_r+0x282>
 8006fe2:	2410      	movs	r4, #16
 8006fe4:	428c      	cmp	r4, r1
 8006fe6:	d3f7      	bcc.n	8006fd8 <_malloc_r+0x14>
 8006fe8:	4648      	mov	r0, r9
 8006fea:	f000 fa05 	bl	80073f8 <__malloc_lock>
 8006fee:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006ff2:	4d9c      	ldr	r5, [pc, #624]	; (8007264 <_malloc_r+0x2a0>)
 8006ff4:	d236      	bcs.n	8007064 <_malloc_r+0xa0>
 8006ff6:	f104 0208 	add.w	r2, r4, #8
 8006ffa:	442a      	add	r2, r5
 8006ffc:	f1a2 0108 	sub.w	r1, r2, #8
 8007000:	6856      	ldr	r6, [r2, #4]
 8007002:	428e      	cmp	r6, r1
 8007004:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007008:	d102      	bne.n	8007010 <_malloc_r+0x4c>
 800700a:	68d6      	ldr	r6, [r2, #12]
 800700c:	42b2      	cmp	r2, r6
 800700e:	d010      	beq.n	8007032 <_malloc_r+0x6e>
 8007010:	6873      	ldr	r3, [r6, #4]
 8007012:	68f2      	ldr	r2, [r6, #12]
 8007014:	68b1      	ldr	r1, [r6, #8]
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	60ca      	str	r2, [r1, #12]
 800701c:	4433      	add	r3, r6
 800701e:	6091      	str	r1, [r2, #8]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	605a      	str	r2, [r3, #4]
 8007028:	4648      	mov	r0, r9
 800702a:	f000 f9eb 	bl	8007404 <__malloc_unlock>
 800702e:	3608      	adds	r6, #8
 8007030:	e109      	b.n	8007246 <_malloc_r+0x282>
 8007032:	3302      	adds	r3, #2
 8007034:	4a8c      	ldr	r2, [pc, #560]	; (8007268 <_malloc_r+0x2a4>)
 8007036:	692e      	ldr	r6, [r5, #16]
 8007038:	4296      	cmp	r6, r2
 800703a:	4611      	mov	r1, r2
 800703c:	d06d      	beq.n	800711a <_malloc_r+0x156>
 800703e:	6870      	ldr	r0, [r6, #4]
 8007040:	f020 0003 	bic.w	r0, r0, #3
 8007044:	1b07      	subs	r7, r0, r4
 8007046:	2f0f      	cmp	r7, #15
 8007048:	dd47      	ble.n	80070da <_malloc_r+0x116>
 800704a:	1933      	adds	r3, r6, r4
 800704c:	f044 0401 	orr.w	r4, r4, #1
 8007050:	6074      	str	r4, [r6, #4]
 8007052:	616b      	str	r3, [r5, #20]
 8007054:	612b      	str	r3, [r5, #16]
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	f047 0201 	orr.w	r2, r7, #1
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	5037      	str	r7, [r6, r0]
 8007062:	e7e1      	b.n	8007028 <_malloc_r+0x64>
 8007064:	0a63      	lsrs	r3, r4, #9
 8007066:	d02a      	beq.n	80070be <_malloc_r+0xfa>
 8007068:	2b04      	cmp	r3, #4
 800706a:	d812      	bhi.n	8007092 <_malloc_r+0xce>
 800706c:	09a3      	lsrs	r3, r4, #6
 800706e:	3338      	adds	r3, #56	; 0x38
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007076:	f1a2 0008 	sub.w	r0, r2, #8
 800707a:	6856      	ldr	r6, [r2, #4]
 800707c:	4286      	cmp	r6, r0
 800707e:	d006      	beq.n	800708e <_malloc_r+0xca>
 8007080:	6872      	ldr	r2, [r6, #4]
 8007082:	f022 0203 	bic.w	r2, r2, #3
 8007086:	1b11      	subs	r1, r2, r4
 8007088:	290f      	cmp	r1, #15
 800708a:	dd1c      	ble.n	80070c6 <_malloc_r+0x102>
 800708c:	3b01      	subs	r3, #1
 800708e:	3301      	adds	r3, #1
 8007090:	e7d0      	b.n	8007034 <_malloc_r+0x70>
 8007092:	2b14      	cmp	r3, #20
 8007094:	d801      	bhi.n	800709a <_malloc_r+0xd6>
 8007096:	335b      	adds	r3, #91	; 0x5b
 8007098:	e7ea      	b.n	8007070 <_malloc_r+0xac>
 800709a:	2b54      	cmp	r3, #84	; 0x54
 800709c:	d802      	bhi.n	80070a4 <_malloc_r+0xe0>
 800709e:	0b23      	lsrs	r3, r4, #12
 80070a0:	336e      	adds	r3, #110	; 0x6e
 80070a2:	e7e5      	b.n	8007070 <_malloc_r+0xac>
 80070a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80070a8:	d802      	bhi.n	80070b0 <_malloc_r+0xec>
 80070aa:	0be3      	lsrs	r3, r4, #15
 80070ac:	3377      	adds	r3, #119	; 0x77
 80070ae:	e7df      	b.n	8007070 <_malloc_r+0xac>
 80070b0:	f240 5254 	movw	r2, #1364	; 0x554
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d804      	bhi.n	80070c2 <_malloc_r+0xfe>
 80070b8:	0ca3      	lsrs	r3, r4, #18
 80070ba:	337c      	adds	r3, #124	; 0x7c
 80070bc:	e7d8      	b.n	8007070 <_malloc_r+0xac>
 80070be:	233f      	movs	r3, #63	; 0x3f
 80070c0:	e7d6      	b.n	8007070 <_malloc_r+0xac>
 80070c2:	237e      	movs	r3, #126	; 0x7e
 80070c4:	e7d4      	b.n	8007070 <_malloc_r+0xac>
 80070c6:	2900      	cmp	r1, #0
 80070c8:	68f1      	ldr	r1, [r6, #12]
 80070ca:	db04      	blt.n	80070d6 <_malloc_r+0x112>
 80070cc:	68b3      	ldr	r3, [r6, #8]
 80070ce:	60d9      	str	r1, [r3, #12]
 80070d0:	608b      	str	r3, [r1, #8]
 80070d2:	18b3      	adds	r3, r6, r2
 80070d4:	e7a4      	b.n	8007020 <_malloc_r+0x5c>
 80070d6:	460e      	mov	r6, r1
 80070d8:	e7d0      	b.n	800707c <_malloc_r+0xb8>
 80070da:	2f00      	cmp	r7, #0
 80070dc:	616a      	str	r2, [r5, #20]
 80070de:	612a      	str	r2, [r5, #16]
 80070e0:	db05      	blt.n	80070ee <_malloc_r+0x12a>
 80070e2:	4430      	add	r0, r6
 80070e4:	6843      	ldr	r3, [r0, #4]
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	6043      	str	r3, [r0, #4]
 80070ec:	e79c      	b.n	8007028 <_malloc_r+0x64>
 80070ee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80070f2:	d244      	bcs.n	800717e <_malloc_r+0x1ba>
 80070f4:	08c0      	lsrs	r0, r0, #3
 80070f6:	1087      	asrs	r7, r0, #2
 80070f8:	2201      	movs	r2, #1
 80070fa:	fa02 f707 	lsl.w	r7, r2, r7
 80070fe:	686a      	ldr	r2, [r5, #4]
 8007100:	3001      	adds	r0, #1
 8007102:	433a      	orrs	r2, r7
 8007104:	606a      	str	r2, [r5, #4]
 8007106:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800710a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800710e:	60b7      	str	r7, [r6, #8]
 8007110:	3a08      	subs	r2, #8
 8007112:	60f2      	str	r2, [r6, #12]
 8007114:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007118:	60fe      	str	r6, [r7, #12]
 800711a:	2001      	movs	r0, #1
 800711c:	109a      	asrs	r2, r3, #2
 800711e:	fa00 f202 	lsl.w	r2, r0, r2
 8007122:	6868      	ldr	r0, [r5, #4]
 8007124:	4282      	cmp	r2, r0
 8007126:	f200 80a1 	bhi.w	800726c <_malloc_r+0x2a8>
 800712a:	4202      	tst	r2, r0
 800712c:	d106      	bne.n	800713c <_malloc_r+0x178>
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	0052      	lsls	r2, r2, #1
 8007134:	4202      	tst	r2, r0
 8007136:	f103 0304 	add.w	r3, r3, #4
 800713a:	d0fa      	beq.n	8007132 <_malloc_r+0x16e>
 800713c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007140:	46e0      	mov	r8, ip
 8007142:	469e      	mov	lr, r3
 8007144:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007148:	4546      	cmp	r6, r8
 800714a:	d153      	bne.n	80071f4 <_malloc_r+0x230>
 800714c:	f10e 0e01 	add.w	lr, lr, #1
 8007150:	f01e 0f03 	tst.w	lr, #3
 8007154:	f108 0808 	add.w	r8, r8, #8
 8007158:	d1f4      	bne.n	8007144 <_malloc_r+0x180>
 800715a:	0798      	lsls	r0, r3, #30
 800715c:	d179      	bne.n	8007252 <_malloc_r+0x28e>
 800715e:	686b      	ldr	r3, [r5, #4]
 8007160:	ea23 0302 	bic.w	r3, r3, r2
 8007164:	606b      	str	r3, [r5, #4]
 8007166:	6868      	ldr	r0, [r5, #4]
 8007168:	0052      	lsls	r2, r2, #1
 800716a:	4282      	cmp	r2, r0
 800716c:	d87e      	bhi.n	800726c <_malloc_r+0x2a8>
 800716e:	2a00      	cmp	r2, #0
 8007170:	d07c      	beq.n	800726c <_malloc_r+0x2a8>
 8007172:	4673      	mov	r3, lr
 8007174:	4202      	tst	r2, r0
 8007176:	d1e1      	bne.n	800713c <_malloc_r+0x178>
 8007178:	3304      	adds	r3, #4
 800717a:	0052      	lsls	r2, r2, #1
 800717c:	e7fa      	b.n	8007174 <_malloc_r+0x1b0>
 800717e:	0a42      	lsrs	r2, r0, #9
 8007180:	2a04      	cmp	r2, #4
 8007182:	d815      	bhi.n	80071b0 <_malloc_r+0x1ec>
 8007184:	0982      	lsrs	r2, r0, #6
 8007186:	3238      	adds	r2, #56	; 0x38
 8007188:	1c57      	adds	r7, r2, #1
 800718a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800718e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007192:	45be      	cmp	lr, r7
 8007194:	d126      	bne.n	80071e4 <_malloc_r+0x220>
 8007196:	2001      	movs	r0, #1
 8007198:	1092      	asrs	r2, r2, #2
 800719a:	fa00 f202 	lsl.w	r2, r0, r2
 800719e:	6868      	ldr	r0, [r5, #4]
 80071a0:	4310      	orrs	r0, r2
 80071a2:	6068      	str	r0, [r5, #4]
 80071a4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80071a8:	60b7      	str	r7, [r6, #8]
 80071aa:	f8ce 6008 	str.w	r6, [lr, #8]
 80071ae:	e7b3      	b.n	8007118 <_malloc_r+0x154>
 80071b0:	2a14      	cmp	r2, #20
 80071b2:	d801      	bhi.n	80071b8 <_malloc_r+0x1f4>
 80071b4:	325b      	adds	r2, #91	; 0x5b
 80071b6:	e7e7      	b.n	8007188 <_malloc_r+0x1c4>
 80071b8:	2a54      	cmp	r2, #84	; 0x54
 80071ba:	d802      	bhi.n	80071c2 <_malloc_r+0x1fe>
 80071bc:	0b02      	lsrs	r2, r0, #12
 80071be:	326e      	adds	r2, #110	; 0x6e
 80071c0:	e7e2      	b.n	8007188 <_malloc_r+0x1c4>
 80071c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80071c6:	d802      	bhi.n	80071ce <_malloc_r+0x20a>
 80071c8:	0bc2      	lsrs	r2, r0, #15
 80071ca:	3277      	adds	r2, #119	; 0x77
 80071cc:	e7dc      	b.n	8007188 <_malloc_r+0x1c4>
 80071ce:	f240 5754 	movw	r7, #1364	; 0x554
 80071d2:	42ba      	cmp	r2, r7
 80071d4:	bf9a      	itte	ls
 80071d6:	0c82      	lsrls	r2, r0, #18
 80071d8:	327c      	addls	r2, #124	; 0x7c
 80071da:	227e      	movhi	r2, #126	; 0x7e
 80071dc:	e7d4      	b.n	8007188 <_malloc_r+0x1c4>
 80071de:	68bf      	ldr	r7, [r7, #8]
 80071e0:	45be      	cmp	lr, r7
 80071e2:	d004      	beq.n	80071ee <_malloc_r+0x22a>
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	f022 0203 	bic.w	r2, r2, #3
 80071ea:	4290      	cmp	r0, r2
 80071ec:	d3f7      	bcc.n	80071de <_malloc_r+0x21a>
 80071ee:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80071f2:	e7d7      	b.n	80071a4 <_malloc_r+0x1e0>
 80071f4:	6870      	ldr	r0, [r6, #4]
 80071f6:	68f7      	ldr	r7, [r6, #12]
 80071f8:	f020 0003 	bic.w	r0, r0, #3
 80071fc:	eba0 0a04 	sub.w	sl, r0, r4
 8007200:	f1ba 0f0f 	cmp.w	sl, #15
 8007204:	dd10      	ble.n	8007228 <_malloc_r+0x264>
 8007206:	68b2      	ldr	r2, [r6, #8]
 8007208:	1933      	adds	r3, r6, r4
 800720a:	f044 0401 	orr.w	r4, r4, #1
 800720e:	6074      	str	r4, [r6, #4]
 8007210:	60d7      	str	r7, [r2, #12]
 8007212:	60ba      	str	r2, [r7, #8]
 8007214:	f04a 0201 	orr.w	r2, sl, #1
 8007218:	616b      	str	r3, [r5, #20]
 800721a:	612b      	str	r3, [r5, #16]
 800721c:	60d9      	str	r1, [r3, #12]
 800721e:	6099      	str	r1, [r3, #8]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	f846 a000 	str.w	sl, [r6, r0]
 8007226:	e6ff      	b.n	8007028 <_malloc_r+0x64>
 8007228:	f1ba 0f00 	cmp.w	sl, #0
 800722c:	db0f      	blt.n	800724e <_malloc_r+0x28a>
 800722e:	4430      	add	r0, r6
 8007230:	6843      	ldr	r3, [r0, #4]
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	6043      	str	r3, [r0, #4]
 8007238:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800723c:	4648      	mov	r0, r9
 800723e:	60df      	str	r7, [r3, #12]
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	f000 f8df 	bl	8007404 <__malloc_unlock>
 8007246:	4630      	mov	r0, r6
 8007248:	b003      	add	sp, #12
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	463e      	mov	r6, r7
 8007250:	e77a      	b.n	8007148 <_malloc_r+0x184>
 8007252:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007256:	4584      	cmp	ip, r0
 8007258:	f103 33ff 	add.w	r3, r3, #4294967295
 800725c:	f43f af7d 	beq.w	800715a <_malloc_r+0x196>
 8007260:	e781      	b.n	8007166 <_malloc_r+0x1a2>
 8007262:	bf00      	nop
 8007264:	20000100 	.word	0x20000100
 8007268:	20000108 	.word	0x20000108
 800726c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007270:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007274:	f026 0603 	bic.w	r6, r6, #3
 8007278:	42b4      	cmp	r4, r6
 800727a:	d803      	bhi.n	8007284 <_malloc_r+0x2c0>
 800727c:	1b33      	subs	r3, r6, r4
 800727e:	2b0f      	cmp	r3, #15
 8007280:	f300 8096 	bgt.w	80073b0 <_malloc_r+0x3ec>
 8007284:	4a4f      	ldr	r2, [pc, #316]	; (80073c4 <_malloc_r+0x400>)
 8007286:	6817      	ldr	r7, [r2, #0]
 8007288:	4a4f      	ldr	r2, [pc, #316]	; (80073c8 <_malloc_r+0x404>)
 800728a:	6811      	ldr	r1, [r2, #0]
 800728c:	3710      	adds	r7, #16
 800728e:	3101      	adds	r1, #1
 8007290:	eb0b 0306 	add.w	r3, fp, r6
 8007294:	4427      	add	r7, r4
 8007296:	d005      	beq.n	80072a4 <_malloc_r+0x2e0>
 8007298:	494c      	ldr	r1, [pc, #304]	; (80073cc <_malloc_r+0x408>)
 800729a:	3901      	subs	r1, #1
 800729c:	440f      	add	r7, r1
 800729e:	3101      	adds	r1, #1
 80072a0:	4249      	negs	r1, r1
 80072a2:	400f      	ands	r7, r1
 80072a4:	4639      	mov	r1, r7
 80072a6:	4648      	mov	r0, r9
 80072a8:	9201      	str	r2, [sp, #4]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	f000 fb80 	bl	80079b0 <_sbrk_r>
 80072b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072b4:	4680      	mov	r8, r0
 80072b6:	d056      	beq.n	8007366 <_malloc_r+0x3a2>
 80072b8:	9b00      	ldr	r3, [sp, #0]
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	4283      	cmp	r3, r0
 80072be:	d901      	bls.n	80072c4 <_malloc_r+0x300>
 80072c0:	45ab      	cmp	fp, r5
 80072c2:	d150      	bne.n	8007366 <_malloc_r+0x3a2>
 80072c4:	4842      	ldr	r0, [pc, #264]	; (80073d0 <_malloc_r+0x40c>)
 80072c6:	6801      	ldr	r1, [r0, #0]
 80072c8:	4543      	cmp	r3, r8
 80072ca:	eb07 0e01 	add.w	lr, r7, r1
 80072ce:	f8c0 e000 	str.w	lr, [r0]
 80072d2:	4940      	ldr	r1, [pc, #256]	; (80073d4 <_malloc_r+0x410>)
 80072d4:	4682      	mov	sl, r0
 80072d6:	d113      	bne.n	8007300 <_malloc_r+0x33c>
 80072d8:	420b      	tst	r3, r1
 80072da:	d111      	bne.n	8007300 <_malloc_r+0x33c>
 80072dc:	68ab      	ldr	r3, [r5, #8]
 80072de:	443e      	add	r6, r7
 80072e0:	f046 0601 	orr.w	r6, r6, #1
 80072e4:	605e      	str	r6, [r3, #4]
 80072e6:	4a3c      	ldr	r2, [pc, #240]	; (80073d8 <_malloc_r+0x414>)
 80072e8:	f8da 3000 	ldr.w	r3, [sl]
 80072ec:	6811      	ldr	r1, [r2, #0]
 80072ee:	428b      	cmp	r3, r1
 80072f0:	bf88      	it	hi
 80072f2:	6013      	strhi	r3, [r2, #0]
 80072f4:	4a39      	ldr	r2, [pc, #228]	; (80073dc <_malloc_r+0x418>)
 80072f6:	6811      	ldr	r1, [r2, #0]
 80072f8:	428b      	cmp	r3, r1
 80072fa:	bf88      	it	hi
 80072fc:	6013      	strhi	r3, [r2, #0]
 80072fe:	e032      	b.n	8007366 <_malloc_r+0x3a2>
 8007300:	6810      	ldr	r0, [r2, #0]
 8007302:	3001      	adds	r0, #1
 8007304:	bf1b      	ittet	ne
 8007306:	eba8 0303 	subne.w	r3, r8, r3
 800730a:	4473      	addne	r3, lr
 800730c:	f8c2 8000 	streq.w	r8, [r2]
 8007310:	f8ca 3000 	strne.w	r3, [sl]
 8007314:	f018 0007 	ands.w	r0, r8, #7
 8007318:	bf1c      	itt	ne
 800731a:	f1c0 0008 	rsbne	r0, r0, #8
 800731e:	4480      	addne	r8, r0
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <_malloc_r+0x408>)
 8007322:	4447      	add	r7, r8
 8007324:	4418      	add	r0, r3
 8007326:	400f      	ands	r7, r1
 8007328:	1bc7      	subs	r7, r0, r7
 800732a:	4639      	mov	r1, r7
 800732c:	4648      	mov	r0, r9
 800732e:	f000 fb3f 	bl	80079b0 <_sbrk_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	bf08      	it	eq
 8007336:	4640      	moveq	r0, r8
 8007338:	f8da 3000 	ldr.w	r3, [sl]
 800733c:	f8c5 8008 	str.w	r8, [r5, #8]
 8007340:	bf08      	it	eq
 8007342:	2700      	moveq	r7, #0
 8007344:	eba0 0008 	sub.w	r0, r0, r8
 8007348:	443b      	add	r3, r7
 800734a:	4407      	add	r7, r0
 800734c:	f047 0701 	orr.w	r7, r7, #1
 8007350:	45ab      	cmp	fp, r5
 8007352:	f8ca 3000 	str.w	r3, [sl]
 8007356:	f8c8 7004 	str.w	r7, [r8, #4]
 800735a:	d0c4      	beq.n	80072e6 <_malloc_r+0x322>
 800735c:	2e0f      	cmp	r6, #15
 800735e:	d810      	bhi.n	8007382 <_malloc_r+0x3be>
 8007360:	2301      	movs	r3, #1
 8007362:	f8c8 3004 	str.w	r3, [r8, #4]
 8007366:	68ab      	ldr	r3, [r5, #8]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	f022 0203 	bic.w	r2, r2, #3
 800736e:	4294      	cmp	r4, r2
 8007370:	eba2 0304 	sub.w	r3, r2, r4
 8007374:	d801      	bhi.n	800737a <_malloc_r+0x3b6>
 8007376:	2b0f      	cmp	r3, #15
 8007378:	dc1a      	bgt.n	80073b0 <_malloc_r+0x3ec>
 800737a:	4648      	mov	r0, r9
 800737c:	f000 f842 	bl	8007404 <__malloc_unlock>
 8007380:	e62d      	b.n	8006fde <_malloc_r+0x1a>
 8007382:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007386:	3e0c      	subs	r6, #12
 8007388:	f026 0607 	bic.w	r6, r6, #7
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	4333      	orrs	r3, r6
 8007392:	f8cb 3004 	str.w	r3, [fp, #4]
 8007396:	eb0b 0306 	add.w	r3, fp, r6
 800739a:	2205      	movs	r2, #5
 800739c:	2e0f      	cmp	r6, #15
 800739e:	605a      	str	r2, [r3, #4]
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	d9a0      	bls.n	80072e6 <_malloc_r+0x322>
 80073a4:	f10b 0108 	add.w	r1, fp, #8
 80073a8:	4648      	mov	r0, r9
 80073aa:	f7ff fcab 	bl	8006d04 <_free_r>
 80073ae:	e79a      	b.n	80072e6 <_malloc_r+0x322>
 80073b0:	68ae      	ldr	r6, [r5, #8]
 80073b2:	f044 0201 	orr.w	r2, r4, #1
 80073b6:	4434      	add	r4, r6
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	6072      	str	r2, [r6, #4]
 80073be:	60ac      	str	r4, [r5, #8]
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	e631      	b.n	8007028 <_malloc_r+0x64>
 80073c4:	20000718 	.word	0x20000718
 80073c8:	20000508 	.word	0x20000508
 80073cc:	00001000 	.word	0x00001000
 80073d0:	200006e8 	.word	0x200006e8
 80073d4:	00000fff 	.word	0x00000fff
 80073d8:	20000710 	.word	0x20000710
 80073dc:	20000714 	.word	0x20000714

080073e0 <memcpy>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	1e43      	subs	r3, r0, #1
 80073e4:	440a      	add	r2, r1
 80073e6:	4291      	cmp	r1, r2
 80073e8:	d100      	bne.n	80073ec <memcpy+0xc>
 80073ea:	bd10      	pop	{r4, pc}
 80073ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f4:	e7f7      	b.n	80073e6 <memcpy+0x6>
	...

080073f8 <__malloc_lock>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__malloc_lock+0x8>)
 80073fa:	f7ff bd6d 	b.w	8006ed8 <__retarget_lock_acquire_recursive>
 80073fe:	bf00      	nop
 8007400:	2000092c 	.word	0x2000092c

08007404 <__malloc_unlock>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__malloc_unlock+0x8>)
 8007406:	f7ff bd68 	b.w	8006eda <__retarget_lock_release_recursive>
 800740a:	bf00      	nop
 800740c:	2000092c 	.word	0x2000092c

08007410 <_Balloc>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007414:	4604      	mov	r4, r0
 8007416:	460e      	mov	r6, r1
 8007418:	b93d      	cbnz	r5, 800742a <_Balloc+0x1a>
 800741a:	2010      	movs	r0, #16
 800741c:	f7ff fdca 	bl	8006fb4 <malloc>
 8007420:	6260      	str	r0, [r4, #36]	; 0x24
 8007422:	6045      	str	r5, [r0, #4]
 8007424:	6085      	str	r5, [r0, #8]
 8007426:	6005      	str	r5, [r0, #0]
 8007428:	60c5      	str	r5, [r0, #12]
 800742a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800742c:	68eb      	ldr	r3, [r5, #12]
 800742e:	b183      	cbz	r3, 8007452 <_Balloc+0x42>
 8007430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007438:	b9b8      	cbnz	r0, 800746a <_Balloc+0x5a>
 800743a:	2101      	movs	r1, #1
 800743c:	fa01 f506 	lsl.w	r5, r1, r6
 8007440:	1d6a      	adds	r2, r5, #5
 8007442:	0092      	lsls	r2, r2, #2
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fb4d 	bl	8007ae4 <_calloc_r>
 800744a:	b160      	cbz	r0, 8007466 <_Balloc+0x56>
 800744c:	6046      	str	r6, [r0, #4]
 800744e:	6085      	str	r5, [r0, #8]
 8007450:	e00e      	b.n	8007470 <_Balloc+0x60>
 8007452:	2221      	movs	r2, #33	; 0x21
 8007454:	2104      	movs	r1, #4
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fb44 	bl	8007ae4 <_calloc_r>
 800745c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745e:	60e8      	str	r0, [r5, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e4      	bne.n	8007430 <_Balloc+0x20>
 8007466:	2000      	movs	r0, #0
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	6802      	ldr	r2, [r0, #0]
 800746c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007470:	2300      	movs	r3, #0
 8007472:	6103      	str	r3, [r0, #16]
 8007474:	60c3      	str	r3, [r0, #12]
 8007476:	bd70      	pop	{r4, r5, r6, pc}

08007478 <_Bfree>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800747c:	4606      	mov	r6, r0
 800747e:	460d      	mov	r5, r1
 8007480:	b93c      	cbnz	r4, 8007492 <_Bfree+0x1a>
 8007482:	2010      	movs	r0, #16
 8007484:	f7ff fd96 	bl	8006fb4 <malloc>
 8007488:	6270      	str	r0, [r6, #36]	; 0x24
 800748a:	6044      	str	r4, [r0, #4]
 800748c:	6084      	str	r4, [r0, #8]
 800748e:	6004      	str	r4, [r0, #0]
 8007490:	60c4      	str	r4, [r0, #12]
 8007492:	b13d      	cbz	r5, 80074a4 <_Bfree+0x2c>
 8007494:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007496:	686a      	ldr	r2, [r5, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800749e:	6029      	str	r1, [r5, #0]
 80074a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80074a4:	bd70      	pop	{r4, r5, r6, pc}

080074a6 <__multadd>:
 80074a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074aa:	690d      	ldr	r5, [r1, #16]
 80074ac:	461f      	mov	r7, r3
 80074ae:	4606      	mov	r6, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	f101 0e14 	add.w	lr, r1, #20
 80074b6:	2300      	movs	r3, #0
 80074b8:	f8de 0000 	ldr.w	r0, [lr]
 80074bc:	b281      	uxth	r1, r0
 80074be:	fb02 7101 	mla	r1, r2, r1, r7
 80074c2:	0c0f      	lsrs	r7, r1, #16
 80074c4:	0c00      	lsrs	r0, r0, #16
 80074c6:	fb02 7000 	mla	r0, r2, r0, r7
 80074ca:	b289      	uxth	r1, r1
 80074cc:	3301      	adds	r3, #1
 80074ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80074d2:	429d      	cmp	r5, r3
 80074d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80074d8:	f84e 1b04 	str.w	r1, [lr], #4
 80074dc:	dcec      	bgt.n	80074b8 <__multadd+0x12>
 80074de:	b1d7      	cbz	r7, 8007516 <__multadd+0x70>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	429d      	cmp	r5, r3
 80074e4:	db12      	blt.n	800750c <__multadd+0x66>
 80074e6:	6861      	ldr	r1, [r4, #4]
 80074e8:	4630      	mov	r0, r6
 80074ea:	3101      	adds	r1, #1
 80074ec:	f7ff ff90 	bl	8007410 <_Balloc>
 80074f0:	6922      	ldr	r2, [r4, #16]
 80074f2:	3202      	adds	r2, #2
 80074f4:	f104 010c 	add.w	r1, r4, #12
 80074f8:	4680      	mov	r8, r0
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f7ff ff6f 	bl	80073e0 <memcpy>
 8007502:	4621      	mov	r1, r4
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff ffb7 	bl	8007478 <_Bfree>
 800750a:	4644      	mov	r4, r8
 800750c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007510:	3501      	adds	r5, #1
 8007512:	615f      	str	r7, [r3, #20]
 8007514:	6125      	str	r5, [r4, #16]
 8007516:	4620      	mov	r0, r4
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800751c <__hi0bits>:
 800751c:	0c02      	lsrs	r2, r0, #16
 800751e:	0412      	lsls	r2, r2, #16
 8007520:	4603      	mov	r3, r0
 8007522:	b9b2      	cbnz	r2, 8007552 <__hi0bits+0x36>
 8007524:	0403      	lsls	r3, r0, #16
 8007526:	2010      	movs	r0, #16
 8007528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800752c:	bf04      	itt	eq
 800752e:	021b      	lsleq	r3, r3, #8
 8007530:	3008      	addeq	r0, #8
 8007532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007536:	bf04      	itt	eq
 8007538:	011b      	lsleq	r3, r3, #4
 800753a:	3004      	addeq	r0, #4
 800753c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007540:	bf04      	itt	eq
 8007542:	009b      	lsleq	r3, r3, #2
 8007544:	3002      	addeq	r0, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	db06      	blt.n	8007558 <__hi0bits+0x3c>
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	d503      	bpl.n	8007556 <__hi0bits+0x3a>
 800754e:	3001      	adds	r0, #1
 8007550:	4770      	bx	lr
 8007552:	2000      	movs	r0, #0
 8007554:	e7e8      	b.n	8007528 <__hi0bits+0xc>
 8007556:	2020      	movs	r0, #32
 8007558:	4770      	bx	lr

0800755a <__lo0bits>:
 800755a:	6803      	ldr	r3, [r0, #0]
 800755c:	f013 0207 	ands.w	r2, r3, #7
 8007560:	4601      	mov	r1, r0
 8007562:	d00b      	beq.n	800757c <__lo0bits+0x22>
 8007564:	07da      	lsls	r2, r3, #31
 8007566:	d423      	bmi.n	80075b0 <__lo0bits+0x56>
 8007568:	0798      	lsls	r0, r3, #30
 800756a:	bf49      	itett	mi
 800756c:	085b      	lsrmi	r3, r3, #1
 800756e:	089b      	lsrpl	r3, r3, #2
 8007570:	2001      	movmi	r0, #1
 8007572:	600b      	strmi	r3, [r1, #0]
 8007574:	bf5c      	itt	pl
 8007576:	600b      	strpl	r3, [r1, #0]
 8007578:	2002      	movpl	r0, #2
 800757a:	4770      	bx	lr
 800757c:	b298      	uxth	r0, r3
 800757e:	b9a8      	cbnz	r0, 80075ac <__lo0bits+0x52>
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	2010      	movs	r0, #16
 8007584:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007588:	bf04      	itt	eq
 800758a:	0a1b      	lsreq	r3, r3, #8
 800758c:	3008      	addeq	r0, #8
 800758e:	071a      	lsls	r2, r3, #28
 8007590:	bf04      	itt	eq
 8007592:	091b      	lsreq	r3, r3, #4
 8007594:	3004      	addeq	r0, #4
 8007596:	079a      	lsls	r2, r3, #30
 8007598:	bf04      	itt	eq
 800759a:	089b      	lsreq	r3, r3, #2
 800759c:	3002      	addeq	r0, #2
 800759e:	07da      	lsls	r2, r3, #31
 80075a0:	d402      	bmi.n	80075a8 <__lo0bits+0x4e>
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	d006      	beq.n	80075b4 <__lo0bits+0x5a>
 80075a6:	3001      	adds	r0, #1
 80075a8:	600b      	str	r3, [r1, #0]
 80075aa:	4770      	bx	lr
 80075ac:	4610      	mov	r0, r2
 80075ae:	e7e9      	b.n	8007584 <__lo0bits+0x2a>
 80075b0:	2000      	movs	r0, #0
 80075b2:	4770      	bx	lr
 80075b4:	2020      	movs	r0, #32
 80075b6:	4770      	bx	lr

080075b8 <__i2b>:
 80075b8:	b510      	push	{r4, lr}
 80075ba:	460c      	mov	r4, r1
 80075bc:	2101      	movs	r1, #1
 80075be:	f7ff ff27 	bl	8007410 <_Balloc>
 80075c2:	2201      	movs	r2, #1
 80075c4:	6144      	str	r4, [r0, #20]
 80075c6:	6102      	str	r2, [r0, #16]
 80075c8:	bd10      	pop	{r4, pc}

080075ca <__multiply>:
 80075ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ce:	4614      	mov	r4, r2
 80075d0:	690a      	ldr	r2, [r1, #16]
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	bfb8      	it	lt
 80075d8:	460b      	movlt	r3, r1
 80075da:	4689      	mov	r9, r1
 80075dc:	bfbc      	itt	lt
 80075de:	46a1      	movlt	r9, r4
 80075e0:	461c      	movlt	r4, r3
 80075e2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80075ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075f2:	eb07 060a 	add.w	r6, r7, sl
 80075f6:	429e      	cmp	r6, r3
 80075f8:	bfc8      	it	gt
 80075fa:	3101      	addgt	r1, #1
 80075fc:	f7ff ff08 	bl	8007410 <_Balloc>
 8007600:	f100 0514 	add.w	r5, r0, #20
 8007604:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007608:	462b      	mov	r3, r5
 800760a:	2200      	movs	r2, #0
 800760c:	4543      	cmp	r3, r8
 800760e:	d316      	bcc.n	800763e <__multiply+0x74>
 8007610:	f104 0214 	add.w	r2, r4, #20
 8007614:	f109 0114 	add.w	r1, r9, #20
 8007618:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800761c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	9c01      	ldr	r4, [sp, #4]
 8007624:	4294      	cmp	r4, r2
 8007626:	4613      	mov	r3, r2
 8007628:	d80c      	bhi.n	8007644 <__multiply+0x7a>
 800762a:	2e00      	cmp	r6, #0
 800762c:	dd03      	ble.n	8007636 <__multiply+0x6c>
 800762e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007632:	2b00      	cmp	r3, #0
 8007634:	d054      	beq.n	80076e0 <__multiply+0x116>
 8007636:	6106      	str	r6, [r0, #16]
 8007638:	b003      	add	sp, #12
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	f843 2b04 	str.w	r2, [r3], #4
 8007642:	e7e3      	b.n	800760c <__multiply+0x42>
 8007644:	f8b3 a000 	ldrh.w	sl, [r3]
 8007648:	3204      	adds	r2, #4
 800764a:	f1ba 0f00 	cmp.w	sl, #0
 800764e:	d020      	beq.n	8007692 <__multiply+0xc8>
 8007650:	46ae      	mov	lr, r5
 8007652:	4689      	mov	r9, r1
 8007654:	f04f 0c00 	mov.w	ip, #0
 8007658:	f859 4b04 	ldr.w	r4, [r9], #4
 800765c:	f8be b000 	ldrh.w	fp, [lr]
 8007660:	b2a3      	uxth	r3, r4
 8007662:	fb0a b303 	mla	r3, sl, r3, fp
 8007666:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800766a:	f8de 4000 	ldr.w	r4, [lr]
 800766e:	4463      	add	r3, ip
 8007670:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007674:	fb0a c40b 	mla	r4, sl, fp, ip
 8007678:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007682:	454f      	cmp	r7, r9
 8007684:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007688:	f84e 3b04 	str.w	r3, [lr], #4
 800768c:	d8e4      	bhi.n	8007658 <__multiply+0x8e>
 800768e:	f8ce c000 	str.w	ip, [lr]
 8007692:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007696:	f1b9 0f00 	cmp.w	r9, #0
 800769a:	d01f      	beq.n	80076dc <__multiply+0x112>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	46ae      	mov	lr, r5
 80076a0:	468c      	mov	ip, r1
 80076a2:	f04f 0a00 	mov.w	sl, #0
 80076a6:	f8bc 4000 	ldrh.w	r4, [ip]
 80076aa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80076ae:	fb09 b404 	mla	r4, r9, r4, fp
 80076b2:	44a2      	add	sl, r4
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80076ba:	f84e 3b04 	str.w	r3, [lr], #4
 80076be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076c2:	f8be 4000 	ldrh.w	r4, [lr]
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	fb09 4303 	mla	r3, r9, r3, r4
 80076cc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80076d0:	4567      	cmp	r7, ip
 80076d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d6:	d8e6      	bhi.n	80076a6 <__multiply+0xdc>
 80076d8:	f8ce 3000 	str.w	r3, [lr]
 80076dc:	3504      	adds	r5, #4
 80076de:	e7a0      	b.n	8007622 <__multiply+0x58>
 80076e0:	3e01      	subs	r6, #1
 80076e2:	e7a2      	b.n	800762a <__multiply+0x60>

080076e4 <__pow5mult>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	4615      	mov	r5, r2
 80076ea:	f012 0203 	ands.w	r2, r2, #3
 80076ee:	4606      	mov	r6, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	d007      	beq.n	8007704 <__pow5mult+0x20>
 80076f4:	3a01      	subs	r2, #1
 80076f6:	4c21      	ldr	r4, [pc, #132]	; (800777c <__pow5mult+0x98>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076fe:	f7ff fed2 	bl	80074a6 <__multadd>
 8007702:	4607      	mov	r7, r0
 8007704:	10ad      	asrs	r5, r5, #2
 8007706:	d035      	beq.n	8007774 <__pow5mult+0x90>
 8007708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800770a:	b93c      	cbnz	r4, 800771c <__pow5mult+0x38>
 800770c:	2010      	movs	r0, #16
 800770e:	f7ff fc51 	bl	8006fb4 <malloc>
 8007712:	6270      	str	r0, [r6, #36]	; 0x24
 8007714:	6044      	str	r4, [r0, #4]
 8007716:	6084      	str	r4, [r0, #8]
 8007718:	6004      	str	r4, [r0, #0]
 800771a:	60c4      	str	r4, [r0, #12]
 800771c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007724:	b94c      	cbnz	r4, 800773a <__pow5mult+0x56>
 8007726:	f240 2171 	movw	r1, #625	; 0x271
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ff44 	bl	80075b8 <__i2b>
 8007730:	2300      	movs	r3, #0
 8007732:	f8c8 0008 	str.w	r0, [r8, #8]
 8007736:	4604      	mov	r4, r0
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	07eb      	lsls	r3, r5, #31
 8007740:	d50a      	bpl.n	8007758 <__pow5mult+0x74>
 8007742:	4639      	mov	r1, r7
 8007744:	4622      	mov	r2, r4
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ff3f 	bl	80075ca <__multiply>
 800774c:	4639      	mov	r1, r7
 800774e:	4681      	mov	r9, r0
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff fe91 	bl	8007478 <_Bfree>
 8007756:	464f      	mov	r7, r9
 8007758:	106d      	asrs	r5, r5, #1
 800775a:	d00b      	beq.n	8007774 <__pow5mult+0x90>
 800775c:	6820      	ldr	r0, [r4, #0]
 800775e:	b938      	cbnz	r0, 8007770 <__pow5mult+0x8c>
 8007760:	4622      	mov	r2, r4
 8007762:	4621      	mov	r1, r4
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff ff30 	bl	80075ca <__multiply>
 800776a:	6020      	str	r0, [r4, #0]
 800776c:	f8c0 8000 	str.w	r8, [r0]
 8007770:	4604      	mov	r4, r0
 8007772:	e7e4      	b.n	800773e <__pow5mult+0x5a>
 8007774:	4638      	mov	r0, r7
 8007776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777a:	bf00      	nop
 800777c:	08008780 	.word	0x08008780

08007780 <__lshift>:
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	460c      	mov	r4, r1
 8007786:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	6849      	ldr	r1, [r1, #4]
 800778e:	eb0a 0903 	add.w	r9, sl, r3
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	4607      	mov	r7, r0
 8007796:	4616      	mov	r6, r2
 8007798:	f109 0501 	add.w	r5, r9, #1
 800779c:	42ab      	cmp	r3, r5
 800779e:	db31      	blt.n	8007804 <__lshift+0x84>
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7ff fe35 	bl	8007410 <_Balloc>
 80077a6:	2200      	movs	r2, #0
 80077a8:	4680      	mov	r8, r0
 80077aa:	f100 0314 	add.w	r3, r0, #20
 80077ae:	4611      	mov	r1, r2
 80077b0:	4552      	cmp	r2, sl
 80077b2:	db2a      	blt.n	800780a <__lshift+0x8a>
 80077b4:	6920      	ldr	r0, [r4, #16]
 80077b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077ba:	f104 0114 	add.w	r1, r4, #20
 80077be:	f016 021f 	ands.w	r2, r6, #31
 80077c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80077c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80077ca:	d022      	beq.n	8007812 <__lshift+0x92>
 80077cc:	f1c2 0c20 	rsb	ip, r2, #32
 80077d0:	2000      	movs	r0, #0
 80077d2:	680e      	ldr	r6, [r1, #0]
 80077d4:	4096      	lsls	r6, r2
 80077d6:	4330      	orrs	r0, r6
 80077d8:	f843 0b04 	str.w	r0, [r3], #4
 80077dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80077e0:	458e      	cmp	lr, r1
 80077e2:	fa20 f00c 	lsr.w	r0, r0, ip
 80077e6:	d8f4      	bhi.n	80077d2 <__lshift+0x52>
 80077e8:	6018      	str	r0, [r3, #0]
 80077ea:	b108      	cbz	r0, 80077f0 <__lshift+0x70>
 80077ec:	f109 0502 	add.w	r5, r9, #2
 80077f0:	3d01      	subs	r5, #1
 80077f2:	4638      	mov	r0, r7
 80077f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80077f8:	4621      	mov	r1, r4
 80077fa:	f7ff fe3d 	bl	8007478 <_Bfree>
 80077fe:	4640      	mov	r0, r8
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	3101      	adds	r1, #1
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	e7c8      	b.n	800779c <__lshift+0x1c>
 800780a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800780e:	3201      	adds	r2, #1
 8007810:	e7ce      	b.n	80077b0 <__lshift+0x30>
 8007812:	3b04      	subs	r3, #4
 8007814:	f851 2b04 	ldr.w	r2, [r1], #4
 8007818:	f843 2f04 	str.w	r2, [r3, #4]!
 800781c:	458e      	cmp	lr, r1
 800781e:	d8f9      	bhi.n	8007814 <__lshift+0x94>
 8007820:	e7e6      	b.n	80077f0 <__lshift+0x70>

08007822 <__mcmp>:
 8007822:	6903      	ldr	r3, [r0, #16]
 8007824:	690a      	ldr	r2, [r1, #16]
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	b530      	push	{r4, r5, lr}
 800782a:	d10c      	bne.n	8007846 <__mcmp+0x24>
 800782c:	0092      	lsls	r2, r2, #2
 800782e:	3014      	adds	r0, #20
 8007830:	3114      	adds	r1, #20
 8007832:	1884      	adds	r4, r0, r2
 8007834:	4411      	add	r1, r2
 8007836:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800783a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800783e:	4295      	cmp	r5, r2
 8007840:	d003      	beq.n	800784a <__mcmp+0x28>
 8007842:	d305      	bcc.n	8007850 <__mcmp+0x2e>
 8007844:	2301      	movs	r3, #1
 8007846:	4618      	mov	r0, r3
 8007848:	bd30      	pop	{r4, r5, pc}
 800784a:	42a0      	cmp	r0, r4
 800784c:	d3f3      	bcc.n	8007836 <__mcmp+0x14>
 800784e:	e7fa      	b.n	8007846 <__mcmp+0x24>
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	e7f7      	b.n	8007846 <__mcmp+0x24>

08007856 <__mdiff>:
 8007856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785a:	460d      	mov	r5, r1
 800785c:	4607      	mov	r7, r0
 800785e:	4611      	mov	r1, r2
 8007860:	4628      	mov	r0, r5
 8007862:	4614      	mov	r4, r2
 8007864:	f7ff ffdd 	bl	8007822 <__mcmp>
 8007868:	1e06      	subs	r6, r0, #0
 800786a:	d108      	bne.n	800787e <__mdiff+0x28>
 800786c:	4631      	mov	r1, r6
 800786e:	4638      	mov	r0, r7
 8007870:	f7ff fdce 	bl	8007410 <_Balloc>
 8007874:	2301      	movs	r3, #1
 8007876:	6103      	str	r3, [r0, #16]
 8007878:	6146      	str	r6, [r0, #20]
 800787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787e:	bfa4      	itt	ge
 8007880:	4623      	movge	r3, r4
 8007882:	462c      	movge	r4, r5
 8007884:	4638      	mov	r0, r7
 8007886:	6861      	ldr	r1, [r4, #4]
 8007888:	bfa6      	itte	ge
 800788a:	461d      	movge	r5, r3
 800788c:	2600      	movge	r6, #0
 800788e:	2601      	movlt	r6, #1
 8007890:	f7ff fdbe 	bl	8007410 <_Balloc>
 8007894:	692b      	ldr	r3, [r5, #16]
 8007896:	60c6      	str	r6, [r0, #12]
 8007898:	6926      	ldr	r6, [r4, #16]
 800789a:	f105 0914 	add.w	r9, r5, #20
 800789e:	f104 0214 	add.w	r2, r4, #20
 80078a2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80078a6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80078aa:	f100 0514 	add.w	r5, r0, #20
 80078ae:	f04f 0c00 	mov.w	ip, #0
 80078b2:	f852 ab04 	ldr.w	sl, [r2], #4
 80078b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80078ba:	fa1c f18a 	uxtah	r1, ip, sl
 80078be:	b2a3      	uxth	r3, r4
 80078c0:	1ac9      	subs	r1, r1, r3
 80078c2:	0c23      	lsrs	r3, r4, #16
 80078c4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80078c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078cc:	b289      	uxth	r1, r1
 80078ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80078d2:	45c8      	cmp	r8, r9
 80078d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078d8:	4696      	mov	lr, r2
 80078da:	f845 3b04 	str.w	r3, [r5], #4
 80078de:	d8e8      	bhi.n	80078b2 <__mdiff+0x5c>
 80078e0:	45be      	cmp	lr, r7
 80078e2:	d305      	bcc.n	80078f0 <__mdiff+0x9a>
 80078e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80078e8:	b18b      	cbz	r3, 800790e <__mdiff+0xb8>
 80078ea:	6106      	str	r6, [r0, #16]
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80078f4:	fa1c f381 	uxtah	r3, ip, r1
 80078f8:	141a      	asrs	r2, r3, #16
 80078fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078fe:	b29b      	uxth	r3, r3
 8007900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007908:	f845 3b04 	str.w	r3, [r5], #4
 800790c:	e7e8      	b.n	80078e0 <__mdiff+0x8a>
 800790e:	3e01      	subs	r6, #1
 8007910:	e7e8      	b.n	80078e4 <__mdiff+0x8e>

08007912 <__d2b>:
 8007912:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007916:	460e      	mov	r6, r1
 8007918:	2101      	movs	r1, #1
 800791a:	ec59 8b10 	vmov	r8, r9, d0
 800791e:	4615      	mov	r5, r2
 8007920:	f7ff fd76 	bl	8007410 <_Balloc>
 8007924:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007928:	4607      	mov	r7, r0
 800792a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800792e:	bb34      	cbnz	r4, 800797e <__d2b+0x6c>
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f1b8 0f00 	cmp.w	r8, #0
 8007936:	d027      	beq.n	8007988 <__d2b+0x76>
 8007938:	a802      	add	r0, sp, #8
 800793a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800793e:	f7ff fe0c 	bl	800755a <__lo0bits>
 8007942:	9900      	ldr	r1, [sp, #0]
 8007944:	b1f0      	cbz	r0, 8007984 <__d2b+0x72>
 8007946:	9a01      	ldr	r2, [sp, #4]
 8007948:	f1c0 0320 	rsb	r3, r0, #32
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	430b      	orrs	r3, r1
 8007952:	40c2      	lsrs	r2, r0
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	9201      	str	r2, [sp, #4]
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf14      	ite	ne
 8007960:	2102      	movne	r1, #2
 8007962:	2101      	moveq	r1, #1
 8007964:	6139      	str	r1, [r7, #16]
 8007966:	b1c4      	cbz	r4, 800799a <__d2b+0x88>
 8007968:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800796c:	4404      	add	r4, r0
 800796e:	6034      	str	r4, [r6, #0]
 8007970:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007974:	6028      	str	r0, [r5, #0]
 8007976:	4638      	mov	r0, r7
 8007978:	b003      	add	sp, #12
 800797a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800797e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007982:	e7d5      	b.n	8007930 <__d2b+0x1e>
 8007984:	6179      	str	r1, [r7, #20]
 8007986:	e7e7      	b.n	8007958 <__d2b+0x46>
 8007988:	a801      	add	r0, sp, #4
 800798a:	f7ff fde6 	bl	800755a <__lo0bits>
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	2101      	movs	r1, #1
 8007994:	6139      	str	r1, [r7, #16]
 8007996:	3020      	adds	r0, #32
 8007998:	e7e5      	b.n	8007966 <__d2b+0x54>
 800799a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800799e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079a2:	6030      	str	r0, [r6, #0]
 80079a4:	6918      	ldr	r0, [r3, #16]
 80079a6:	f7ff fdb9 	bl	800751c <__hi0bits>
 80079aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80079ae:	e7e1      	b.n	8007974 <__d2b+0x62>

080079b0 <_sbrk_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4c06      	ldr	r4, [pc, #24]	; (80079cc <_sbrk_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4605      	mov	r5, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	f7fc ff02 	bl	80047c4 <_sbrk>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_sbrk_r+0x1a>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_sbrk_r+0x1a>
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	20000934 	.word	0x20000934

080079d0 <__sread>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	460c      	mov	r4, r1
 80079d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d8:	f000 fb54 	bl	8008084 <_read_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	bfab      	itete	ge
 80079e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e2:	89a3      	ldrhlt	r3, [r4, #12]
 80079e4:	181b      	addge	r3, r3, r0
 80079e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ea:	bfac      	ite	ge
 80079ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80079ee:	81a3      	strhlt	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__swrite>:
 80079f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	461f      	mov	r7, r3
 80079f8:	898b      	ldrh	r3, [r1, #12]
 80079fa:	05db      	lsls	r3, r3, #23
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	4616      	mov	r6, r2
 8007a02:	d505      	bpl.n	8007a10 <__swrite+0x1e>
 8007a04:	2302      	movs	r3, #2
 8007a06:	2200      	movs	r2, #0
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	f000 fafc 	bl	8008008 <_lseek_r>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a26:	f000 b84b 	b.w	8007ac0 <_write_r>

08007a2a <__sseek>:
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a32:	f000 fae9 	bl	8008008 <_lseek_r>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	bf15      	itete	ne
 8007a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a46:	81a3      	strheq	r3, [r4, #12]
 8007a48:	bf18      	it	ne
 8007a4a:	81a3      	strhne	r3, [r4, #12]
 8007a4c:	bd10      	pop	{r4, pc}

08007a4e <__sclose>:
 8007a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a52:	f000 b875 	b.w	8007b40 <_close_r>

08007a56 <__sprint_r>:
 8007a56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	6893      	ldr	r3, [r2, #8]
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	4614      	mov	r4, r2
 8007a62:	b91b      	cbnz	r3, 8007a6c <__sprint_r+0x16>
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	4618      	mov	r0, r3
 8007a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007a6e:	049d      	lsls	r5, r3, #18
 8007a70:	d523      	bpl.n	8007aba <__sprint_r+0x64>
 8007a72:	6815      	ldr	r5, [r2, #0]
 8007a74:	68a0      	ldr	r0, [r4, #8]
 8007a76:	3508      	adds	r5, #8
 8007a78:	b920      	cbnz	r0, 8007a84 <__sprint_r+0x2e>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	6063      	str	r3, [r4, #4]
 8007a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8007a88:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8007a8c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007a90:	f04f 0900 	mov.w	r9, #0
 8007a94:	45ca      	cmp	sl, r9
 8007a96:	dc05      	bgt.n	8007aa4 <__sprint_r+0x4e>
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	f026 0603 	bic.w	r6, r6, #3
 8007a9e:	1b9e      	subs	r6, r3, r6
 8007aa0:	60a6      	str	r6, [r4, #8]
 8007aa2:	e7e7      	b.n	8007a74 <__sprint_r+0x1e>
 8007aa4:	463a      	mov	r2, r7
 8007aa6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f000 f905 	bl	8007cba <_fputwc_r>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d0e2      	beq.n	8007a7a <__sprint_r+0x24>
 8007ab4:	f109 0901 	add.w	r9, r9, #1
 8007ab8:	e7ec      	b.n	8007a94 <__sprint_r+0x3e>
 8007aba:	f000 f939 	bl	8007d30 <__sfvwrite_r>
 8007abe:	e7dc      	b.n	8007a7a <__sprint_r+0x24>

08007ac0 <_write_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4c07      	ldr	r4, [pc, #28]	; (8007ae0 <_write_r+0x20>)
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7fc fe6a 	bl	80047a8 <_write>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_write_r+0x1e>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_write_r+0x1e>
 8007adc:	602b      	str	r3, [r5, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000934 	.word	0x20000934

08007ae4 <_calloc_r>:
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	4351      	muls	r1, r2
 8007ae8:	f7ff fa6c 	bl	8006fc4 <_malloc_r>
 8007aec:	4604      	mov	r4, r0
 8007aee:	b198      	cbz	r0, 8007b18 <_calloc_r+0x34>
 8007af0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007af4:	f022 0203 	bic.w	r2, r2, #3
 8007af8:	3a04      	subs	r2, #4
 8007afa:	2a24      	cmp	r2, #36	; 0x24
 8007afc:	d81b      	bhi.n	8007b36 <_calloc_r+0x52>
 8007afe:	2a13      	cmp	r2, #19
 8007b00:	d917      	bls.n	8007b32 <_calloc_r+0x4e>
 8007b02:	2100      	movs	r1, #0
 8007b04:	2a1b      	cmp	r2, #27
 8007b06:	6001      	str	r1, [r0, #0]
 8007b08:	6041      	str	r1, [r0, #4]
 8007b0a:	d807      	bhi.n	8007b1c <_calloc_r+0x38>
 8007b0c:	f100 0308 	add.w	r3, r0, #8
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	bd10      	pop	{r4, pc}
 8007b1c:	2a24      	cmp	r2, #36	; 0x24
 8007b1e:	6081      	str	r1, [r0, #8]
 8007b20:	60c1      	str	r1, [r0, #12]
 8007b22:	bf11      	iteee	ne
 8007b24:	f100 0310 	addne.w	r3, r0, #16
 8007b28:	6101      	streq	r1, [r0, #16]
 8007b2a:	f100 0318 	addeq.w	r3, r0, #24
 8007b2e:	6141      	streq	r1, [r0, #20]
 8007b30:	e7ee      	b.n	8007b10 <_calloc_r+0x2c>
 8007b32:	4603      	mov	r3, r0
 8007b34:	e7ec      	b.n	8007b10 <_calloc_r+0x2c>
 8007b36:	2100      	movs	r1, #0
 8007b38:	f7fc ff80 	bl	8004a3c <memset>
 8007b3c:	e7ec      	b.n	8007b18 <_calloc_r+0x34>
	...

08007b40 <_close_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4c06      	ldr	r4, [pc, #24]	; (8007b5c <_close_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4605      	mov	r5, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	f7fc fe54 	bl	80047f8 <_close>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_close_r+0x1a>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_close_r+0x1a>
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000934 	.word	0x20000934

08007b60 <_fclose_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	460c      	mov	r4, r1
 8007b66:	b911      	cbnz	r1, 8007b6e <_fclose_r+0xe>
 8007b68:	2600      	movs	r6, #0
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
 8007b6e:	b118      	cbz	r0, 8007b78 <_fclose_r+0x18>
 8007b70:	6983      	ldr	r3, [r0, #24]
 8007b72:	b90b      	cbnz	r3, 8007b78 <_fclose_r+0x18>
 8007b74:	f7fe fff0 	bl	8006b58 <__sinit>
 8007b78:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <_fclose_r+0xcc>)
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d114      	bne.n	8007ba8 <_fclose_r+0x48>
 8007b7e:	686c      	ldr	r4, [r5, #4]
 8007b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b82:	07d8      	lsls	r0, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_fclose_r+0x32>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	0599      	lsls	r1, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_fclose_r+0x32>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8e:	f7ff f9a3 	bl	8006ed8 <__retarget_lock_acquire_recursive>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	b98b      	cbnz	r3, 8007bbc <_fclose_r+0x5c>
 8007b98:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8007b9a:	f016 0601 	ands.w	r6, r6, #1
 8007b9e:	d1e3      	bne.n	8007b68 <_fclose_r+0x8>
 8007ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba2:	f7ff f99a 	bl	8006eda <__retarget_lock_release_recursive>
 8007ba6:	e7e0      	b.n	8007b6a <_fclose_r+0xa>
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <_fclose_r+0xd0>)
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d101      	bne.n	8007bb2 <_fclose_r+0x52>
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	e7e6      	b.n	8007b80 <_fclose_r+0x20>
 8007bb2:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <_fclose_r+0xd4>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	bf08      	it	eq
 8007bb8:	68ec      	ldreq	r4, [r5, #12]
 8007bba:	e7e1      	b.n	8007b80 <_fclose_r+0x20>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f7fe fea4 	bl	800690c <__sflush_r>
 8007bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	b133      	cbz	r3, 8007bd8 <_fclose_r+0x78>
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	4628      	mov	r0, r5
 8007bce:	4798      	blx	r3
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	bfb8      	it	lt
 8007bd4:	f04f 36ff 	movlt.w	r6, #4294967295
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	061a      	lsls	r2, r3, #24
 8007bdc:	d503      	bpl.n	8007be6 <_fclose_r+0x86>
 8007bde:	6921      	ldr	r1, [r4, #16]
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7ff f88f 	bl	8006d04 <_free_r>
 8007be6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be8:	b141      	cbz	r1, 8007bfc <_fclose_r+0x9c>
 8007bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d002      	beq.n	8007bf8 <_fclose_r+0x98>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7ff f886 	bl	8006d04 <_free_r>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6363      	str	r3, [r4, #52]	; 0x34
 8007bfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bfe:	b121      	cbz	r1, 8007c0a <_fclose_r+0xaa>
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7ff f87f 	bl	8006d04 <_free_r>
 8007c06:	2300      	movs	r3, #0
 8007c08:	64a3      	str	r3, [r4, #72]	; 0x48
 8007c0a:	f7fe ff8d 	bl	8006b28 <__sfp_lock_acquire>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d402      	bmi.n	8007c1e <_fclose_r+0xbe>
 8007c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1a:	f7ff f95e 	bl	8006eda <__retarget_lock_release_recursive>
 8007c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c20:	f7ff f959 	bl	8006ed6 <__retarget_lock_close_recursive>
 8007c24:	f7fe ff86 	bl	8006b34 <__sfp_lock_release>
 8007c28:	e79f      	b.n	8007b6a <_fclose_r+0xa>
 8007c2a:	bf00      	nop
 8007c2c:	0800864c 	.word	0x0800864c
 8007c30:	0800866c 	.word	0x0800866c
 8007c34:	0800862c 	.word	0x0800862c

08007c38 <__fputwc>:
 8007c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	460e      	mov	r6, r1
 8007c40:	4614      	mov	r4, r2
 8007c42:	f000 f9d3 	bl	8007fec <__locale_mb_cur_max>
 8007c46:	2801      	cmp	r0, #1
 8007c48:	d11c      	bne.n	8007c84 <__fputwc+0x4c>
 8007c4a:	1e73      	subs	r3, r6, #1
 8007c4c:	2bfe      	cmp	r3, #254	; 0xfe
 8007c4e:	d819      	bhi.n	8007c84 <__fputwc+0x4c>
 8007c50:	f88d 6004 	strb.w	r6, [sp, #4]
 8007c54:	4605      	mov	r5, r0
 8007c56:	2700      	movs	r7, #0
 8007c58:	f10d 0904 	add.w	r9, sp, #4
 8007c5c:	42af      	cmp	r7, r5
 8007c5e:	d020      	beq.n	8007ca2 <__fputwc+0x6a>
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	f817 1009 	ldrb.w	r1, [r7, r9]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	da04      	bge.n	8007c78 <__fputwc+0x40>
 8007c6e:	69a2      	ldr	r2, [r4, #24]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	db1a      	blt.n	8007caa <__fputwc+0x72>
 8007c74:	290a      	cmp	r1, #10
 8007c76:	d018      	beq.n	8007caa <__fputwc+0x72>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	7019      	strb	r1, [r3, #0]
 8007c80:	3701      	adds	r7, #1
 8007c82:	e7eb      	b.n	8007c5c <__fputwc+0x24>
 8007c84:	4632      	mov	r2, r6
 8007c86:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007c8a:	a901      	add	r1, sp, #4
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	f000 fbe9 	bl	8008464 <_wcrtomb_r>
 8007c92:	1c42      	adds	r2, r0, #1
 8007c94:	4605      	mov	r5, r0
 8007c96:	d1de      	bne.n	8007c56 <__fputwc+0x1e>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	b003      	add	sp, #12
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	4622      	mov	r2, r4
 8007cac:	4640      	mov	r0, r8
 8007cae:	f000 fb7b 	bl	80083a8 <__swbuf_r>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	d1e4      	bne.n	8007c80 <__fputwc+0x48>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	e7f3      	b.n	8007ca2 <__fputwc+0x6a>

08007cba <_fputwc_r>:
 8007cba:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007cbc:	07db      	lsls	r3, r3, #31
 8007cbe:	b570      	push	{r4, r5, r6, lr}
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	d405      	bmi.n	8007cd4 <_fputwc_r+0x1a>
 8007cc8:	8993      	ldrh	r3, [r2, #12]
 8007cca:	0598      	lsls	r0, r3, #22
 8007ccc:	d402      	bmi.n	8007cd4 <_fputwc_r+0x1a>
 8007cce:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8007cd0:	f7ff f902 	bl	8006ed8 <__retarget_lock_acquire_recursive>
 8007cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd8:	0499      	lsls	r1, r3, #18
 8007cda:	d406      	bmi.n	8007cea <_fputwc_r+0x30>
 8007cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ce8:	6663      	str	r3, [r4, #100]	; 0x64
 8007cea:	4622      	mov	r2, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	4631      	mov	r1, r6
 8007cf0:	f7ff ffa2 	bl	8007c38 <__fputwc>
 8007cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cf6:	07da      	lsls	r2, r3, #31
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	d405      	bmi.n	8007d08 <_fputwc_r+0x4e>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	059b      	lsls	r3, r3, #22
 8007d00:	d402      	bmi.n	8007d08 <_fputwc_r+0x4e>
 8007d02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d04:	f7ff f8e9 	bl	8006eda <__retarget_lock_release_recursive>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}

08007d0c <_fstat_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4c07      	ldr	r4, [pc, #28]	; (8007d2c <_fstat_r+0x20>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4605      	mov	r5, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	f7fc fd70 	bl	80047fe <_fstat>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_fstat_r+0x1c>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_fstat_r+0x1c>
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000934 	.word	0x20000934

08007d30 <__sfvwrite_r>:
 8007d30:	6893      	ldr	r3, [r2, #8]
 8007d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d36:	4607      	mov	r7, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4690      	mov	r8, r2
 8007d3c:	b91b      	cbnz	r3, 8007d46 <__sfvwrite_r+0x16>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	b003      	add	sp, #12
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	898b      	ldrh	r3, [r1, #12]
 8007d48:	0718      	lsls	r0, r3, #28
 8007d4a:	d526      	bpl.n	8007d9a <__sfvwrite_r+0x6a>
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	b323      	cbz	r3, 8007d9a <__sfvwrite_r+0x6a>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f8d8 6000 	ldr.w	r6, [r8]
 8007d56:	f013 0902 	ands.w	r9, r3, #2
 8007d5a:	d02d      	beq.n	8007db8 <__sfvwrite_r+0x88>
 8007d5c:	f04f 0a00 	mov.w	sl, #0
 8007d60:	f8df b264 	ldr.w	fp, [pc, #612]	; 8007fc8 <__sfvwrite_r+0x298>
 8007d64:	46d1      	mov	r9, sl
 8007d66:	f1b9 0f00 	cmp.w	r9, #0
 8007d6a:	d01f      	beq.n	8007dac <__sfvwrite_r+0x7c>
 8007d6c:	45d9      	cmp	r9, fp
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4652      	mov	r2, sl
 8007d72:	bf28      	it	cs
 8007d74:	465b      	movcs	r3, fp
 8007d76:	6a21      	ldr	r1, [r4, #32]
 8007d78:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	47a8      	blx	r5
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f340 8089 	ble.w	8007e96 <__sfvwrite_r+0x166>
 8007d84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d88:	4482      	add	sl, r0
 8007d8a:	eba9 0900 	sub.w	r9, r9, r0
 8007d8e:	1a18      	subs	r0, r3, r0
 8007d90:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d1e6      	bne.n	8007d66 <__sfvwrite_r+0x36>
 8007d98:	e7d1      	b.n	8007d3e <__sfvwrite_r+0xe>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7fd feeb 	bl	8005b78 <__swsetup_r>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0d4      	beq.n	8007d50 <__sfvwrite_r+0x20>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e7c9      	b.n	8007d40 <__sfvwrite_r+0x10>
 8007dac:	f8d6 a000 	ldr.w	sl, [r6]
 8007db0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007db4:	3608      	adds	r6, #8
 8007db6:	e7d6      	b.n	8007d66 <__sfvwrite_r+0x36>
 8007db8:	f013 0301 	ands.w	r3, r3, #1
 8007dbc:	d043      	beq.n	8007e46 <__sfvwrite_r+0x116>
 8007dbe:	4648      	mov	r0, r9
 8007dc0:	46ca      	mov	sl, r9
 8007dc2:	46cb      	mov	fp, r9
 8007dc4:	f1bb 0f00 	cmp.w	fp, #0
 8007dc8:	f000 80d9 	beq.w	8007f7e <__sfvwrite_r+0x24e>
 8007dcc:	b950      	cbnz	r0, 8007de4 <__sfvwrite_r+0xb4>
 8007dce:	465a      	mov	r2, fp
 8007dd0:	210a      	movs	r1, #10
 8007dd2:	4650      	mov	r0, sl
 8007dd4:	f7f8 f9fc 	bl	80001d0 <memchr>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f000 80d5 	beq.w	8007f88 <__sfvwrite_r+0x258>
 8007dde:	3001      	adds	r0, #1
 8007de0:	eba0 090a 	sub.w	r9, r0, sl
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	6921      	ldr	r1, [r4, #16]
 8007de8:	6962      	ldr	r2, [r4, #20]
 8007dea:	45d9      	cmp	r9, fp
 8007dec:	464b      	mov	r3, r9
 8007dee:	bf28      	it	cs
 8007df0:	465b      	movcs	r3, fp
 8007df2:	4288      	cmp	r0, r1
 8007df4:	f240 80cb 	bls.w	8007f8e <__sfvwrite_r+0x25e>
 8007df8:	68a5      	ldr	r5, [r4, #8]
 8007dfa:	4415      	add	r5, r2
 8007dfc:	42ab      	cmp	r3, r5
 8007dfe:	f340 80c6 	ble.w	8007f8e <__sfvwrite_r+0x25e>
 8007e02:	4651      	mov	r1, sl
 8007e04:	462a      	mov	r2, r5
 8007e06:	f000 f923 	bl	8008050 <memmove>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	442b      	add	r3, r5
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	4621      	mov	r1, r4
 8007e12:	4638      	mov	r0, r7
 8007e14:	f7fe fe0c 	bl	8006a30 <_fflush_r>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d13c      	bne.n	8007e96 <__sfvwrite_r+0x166>
 8007e1c:	ebb9 0905 	subs.w	r9, r9, r5
 8007e20:	f040 80cf 	bne.w	8007fc2 <__sfvwrite_r+0x292>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4638      	mov	r0, r7
 8007e28:	f7fe fe02 	bl	8006a30 <_fflush_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d132      	bne.n	8007e96 <__sfvwrite_r+0x166>
 8007e30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e34:	44aa      	add	sl, r5
 8007e36:	ebab 0b05 	sub.w	fp, fp, r5
 8007e3a:	1b5d      	subs	r5, r3, r5
 8007e3c:	f8c8 5008 	str.w	r5, [r8, #8]
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	d1bf      	bne.n	8007dc4 <__sfvwrite_r+0x94>
 8007e44:	e77b      	b.n	8007d3e <__sfvwrite_r+0xe>
 8007e46:	4699      	mov	r9, r3
 8007e48:	469a      	mov	sl, r3
 8007e4a:	f1ba 0f00 	cmp.w	sl, #0
 8007e4e:	d027      	beq.n	8007ea0 <__sfvwrite_r+0x170>
 8007e50:	89a2      	ldrh	r2, [r4, #12]
 8007e52:	68a5      	ldr	r5, [r4, #8]
 8007e54:	0591      	lsls	r1, r2, #22
 8007e56:	d565      	bpl.n	8007f24 <__sfvwrite_r+0x1f4>
 8007e58:	45aa      	cmp	sl, r5
 8007e5a:	d33b      	bcc.n	8007ed4 <__sfvwrite_r+0x1a4>
 8007e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e60:	d036      	beq.n	8007ed0 <__sfvwrite_r+0x1a0>
 8007e62:	6921      	ldr	r1, [r4, #16]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	6963      	ldr	r3, [r4, #20]
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e72:	fb93 fbf0 	sdiv	fp, r3, r0
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	1c58      	adds	r0, r3, #1
 8007e7a:	4450      	add	r0, sl
 8007e7c:	4583      	cmp	fp, r0
 8007e7e:	bf38      	it	cc
 8007e80:	4683      	movcc	fp, r0
 8007e82:	0553      	lsls	r3, r2, #21
 8007e84:	d53e      	bpl.n	8007f04 <__sfvwrite_r+0x1d4>
 8007e86:	4659      	mov	r1, fp
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff f89b 	bl	8006fc4 <_malloc_r>
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b950      	cbnz	r0, 8007ea8 <__sfvwrite_r+0x178>
 8007e92:	230c      	movs	r3, #12
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	e782      	b.n	8007da6 <__sfvwrite_r+0x76>
 8007ea0:	e896 0600 	ldmia.w	r6, {r9, sl}
 8007ea4:	3608      	adds	r6, #8
 8007ea6:	e7d0      	b.n	8007e4a <__sfvwrite_r+0x11a>
 8007ea8:	9a01      	ldr	r2, [sp, #4]
 8007eaa:	6921      	ldr	r1, [r4, #16]
 8007eac:	f7ff fa98 	bl	80073e0 <memcpy>
 8007eb0:	89a2      	ldrh	r2, [r4, #12]
 8007eb2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eba:	81a2      	strh	r2, [r4, #12]
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	6125      	str	r5, [r4, #16]
 8007ec0:	441d      	add	r5, r3
 8007ec2:	ebab 0303 	sub.w	r3, fp, r3
 8007ec6:	6025      	str	r5, [r4, #0]
 8007ec8:	f8c4 b014 	str.w	fp, [r4, #20]
 8007ecc:	4655      	mov	r5, sl
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	45aa      	cmp	sl, r5
 8007ed2:	d200      	bcs.n	8007ed6 <__sfvwrite_r+0x1a6>
 8007ed4:	4655      	mov	r5, sl
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4649      	mov	r1, r9
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	f000 f8b8 	bl	8008050 <memmove>
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	1b5b      	subs	r3, r3, r5
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	441d      	add	r5, r3
 8007eea:	6025      	str	r5, [r4, #0]
 8007eec:	4655      	mov	r5, sl
 8007eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ef2:	44a9      	add	r9, r5
 8007ef4:	ebaa 0a05 	sub.w	sl, sl, r5
 8007ef8:	1b5d      	subs	r5, r3, r5
 8007efa:	f8c8 5008 	str.w	r5, [r8, #8]
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	d1a3      	bne.n	8007e4a <__sfvwrite_r+0x11a>
 8007f02:	e71c      	b.n	8007d3e <__sfvwrite_r+0xe>
 8007f04:	465a      	mov	r2, fp
 8007f06:	4638      	mov	r0, r7
 8007f08:	f000 f8ce 	bl	80080a8 <_realloc_r>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1d4      	bne.n	8007ebc <__sfvwrite_r+0x18c>
 8007f12:	6921      	ldr	r1, [r4, #16]
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7fe fef5 	bl	8006d04 <_free_r>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	e7b6      	b.n	8007e92 <__sfvwrite_r+0x162>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	4298      	cmp	r0, r3
 8007f2a:	d802      	bhi.n	8007f32 <__sfvwrite_r+0x202>
 8007f2c:	6962      	ldr	r2, [r4, #20]
 8007f2e:	4592      	cmp	sl, r2
 8007f30:	d215      	bcs.n	8007f5e <__sfvwrite_r+0x22e>
 8007f32:	4555      	cmp	r5, sl
 8007f34:	bf28      	it	cs
 8007f36:	4655      	movcs	r5, sl
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f000 f888 	bl	8008050 <memmove>
 8007f40:	68a3      	ldr	r3, [r4, #8]
 8007f42:	6822      	ldr	r2, [r4, #0]
 8007f44:	1b5b      	subs	r3, r3, r5
 8007f46:	442a      	add	r2, r5
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1ce      	bne.n	8007eee <__sfvwrite_r+0x1be>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4638      	mov	r0, r7
 8007f54:	f7fe fd6c 	bl	8006a30 <_fflush_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d0c8      	beq.n	8007eee <__sfvwrite_r+0x1be>
 8007f5c:	e79b      	b.n	8007e96 <__sfvwrite_r+0x166>
 8007f5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007f62:	4553      	cmp	r3, sl
 8007f64:	bf28      	it	cs
 8007f66:	4653      	movcs	r3, sl
 8007f68:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f6e:	6a21      	ldr	r1, [r4, #32]
 8007f70:	4353      	muls	r3, r2
 8007f72:	4638      	mov	r0, r7
 8007f74:	464a      	mov	r2, r9
 8007f76:	47a8      	blx	r5
 8007f78:	1e05      	subs	r5, r0, #0
 8007f7a:	dcb8      	bgt.n	8007eee <__sfvwrite_r+0x1be>
 8007f7c:	e78b      	b.n	8007e96 <__sfvwrite_r+0x166>
 8007f7e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8007f82:	2000      	movs	r0, #0
 8007f84:	3608      	adds	r6, #8
 8007f86:	e71d      	b.n	8007dc4 <__sfvwrite_r+0x94>
 8007f88:	f10b 0901 	add.w	r9, fp, #1
 8007f8c:	e72a      	b.n	8007de4 <__sfvwrite_r+0xb4>
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	db09      	blt.n	8007fa6 <__sfvwrite_r+0x276>
 8007f92:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007f94:	6a21      	ldr	r1, [r4, #32]
 8007f96:	4613      	mov	r3, r2
 8007f98:	4638      	mov	r0, r7
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	47a8      	blx	r5
 8007f9e:	1e05      	subs	r5, r0, #0
 8007fa0:	f73f af3c 	bgt.w	8007e1c <__sfvwrite_r+0xec>
 8007fa4:	e777      	b.n	8007e96 <__sfvwrite_r+0x166>
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4651      	mov	r1, sl
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	f000 f850 	bl	8008050 <memmove>
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	68a2      	ldr	r2, [r4, #8]
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	60a2      	str	r2, [r4, #8]
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	441a      	add	r2, r3
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	e72c      	b.n	8007e1c <__sfvwrite_r+0xec>
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e734      	b.n	8007e30 <__sfvwrite_r+0x100>
 8007fc6:	bf00      	nop
 8007fc8:	7ffffc00 	.word	0x7ffffc00

08007fcc <_isatty_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4c06      	ldr	r4, [pc, #24]	; (8007fe8 <_isatty_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	f7fc fc16 	bl	8004808 <_isatty>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_isatty_r+0x1a>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_isatty_r+0x1a>
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20000934 	.word	0x20000934

08007fec <__locale_mb_cur_max>:
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <__locale_mb_cur_max+0x14>)
 8007fee:	4a05      	ldr	r2, [pc, #20]	; (8008004 <__locale_mb_cur_max+0x18>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bf08      	it	eq
 8007ff8:	4613      	moveq	r3, r2
 8007ffa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007ffe:	4770      	bx	lr
 8008000:	2000000c 	.word	0x2000000c
 8008004:	20000510 	.word	0x20000510

08008008 <_lseek_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4c07      	ldr	r4, [pc, #28]	; (8008028 <_lseek_r+0x20>)
 800800c:	4605      	mov	r5, r0
 800800e:	4608      	mov	r0, r1
 8008010:	4611      	mov	r1, r2
 8008012:	2200      	movs	r2, #0
 8008014:	6022      	str	r2, [r4, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7fc fbf8 	bl	800480c <_lseek>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_lseek_r+0x1e>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	b103      	cbz	r3, 8008026 <_lseek_r+0x1e>
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	20000934 	.word	0x20000934

0800802c <__ascii_mbtowc>:
 800802c:	b082      	sub	sp, #8
 800802e:	b901      	cbnz	r1, 8008032 <__ascii_mbtowc+0x6>
 8008030:	a901      	add	r1, sp, #4
 8008032:	b142      	cbz	r2, 8008046 <__ascii_mbtowc+0x1a>
 8008034:	b14b      	cbz	r3, 800804a <__ascii_mbtowc+0x1e>
 8008036:	7813      	ldrb	r3, [r2, #0]
 8008038:	600b      	str	r3, [r1, #0]
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	1c10      	adds	r0, r2, #0
 800803e:	bf18      	it	ne
 8008040:	2001      	movne	r0, #1
 8008042:	b002      	add	sp, #8
 8008044:	4770      	bx	lr
 8008046:	4610      	mov	r0, r2
 8008048:	e7fb      	b.n	8008042 <__ascii_mbtowc+0x16>
 800804a:	f06f 0001 	mvn.w	r0, #1
 800804e:	e7f8      	b.n	8008042 <__ascii_mbtowc+0x16>

08008050 <memmove>:
 8008050:	4288      	cmp	r0, r1
 8008052:	b510      	push	{r4, lr}
 8008054:	eb01 0302 	add.w	r3, r1, r2
 8008058:	d803      	bhi.n	8008062 <memmove+0x12>
 800805a:	1e42      	subs	r2, r0, #1
 800805c:	4299      	cmp	r1, r3
 800805e:	d10c      	bne.n	800807a <memmove+0x2a>
 8008060:	bd10      	pop	{r4, pc}
 8008062:	4298      	cmp	r0, r3
 8008064:	d2f9      	bcs.n	800805a <memmove+0xa>
 8008066:	1881      	adds	r1, r0, r2
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	42d3      	cmn	r3, r2
 800806c:	d100      	bne.n	8008070 <memmove+0x20>
 800806e:	bd10      	pop	{r4, pc}
 8008070:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008074:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008078:	e7f7      	b.n	800806a <memmove+0x1a>
 800807a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008082:	e7eb      	b.n	800805c <memmove+0xc>

08008084 <_read_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4c07      	ldr	r4, [pc, #28]	; (80080a4 <_read_r+0x20>)
 8008088:	4605      	mov	r5, r0
 800808a:	4608      	mov	r0, r1
 800808c:	4611      	mov	r1, r2
 800808e:	2200      	movs	r2, #0
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	f7fc fb7a 	bl	800478c <_read>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_read_r+0x1e>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_read_r+0x1e>
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000934 	.word	0x20000934

080080a8 <_realloc_r>:
 80080a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	4682      	mov	sl, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b929      	cbnz	r1, 80080be <_realloc_r+0x16>
 80080b2:	4611      	mov	r1, r2
 80080b4:	b003      	add	sp, #12
 80080b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	f7fe bf83 	b.w	8006fc4 <_malloc_r>
 80080be:	9201      	str	r2, [sp, #4]
 80080c0:	f7ff f99a 	bl	80073f8 <__malloc_lock>
 80080c4:	9a01      	ldr	r2, [sp, #4]
 80080c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80080ca:	f102 080b 	add.w	r8, r2, #11
 80080ce:	f1b8 0f16 	cmp.w	r8, #22
 80080d2:	f1a4 0908 	sub.w	r9, r4, #8
 80080d6:	f025 0603 	bic.w	r6, r5, #3
 80080da:	d90a      	bls.n	80080f2 <_realloc_r+0x4a>
 80080dc:	f038 0807 	bics.w	r8, r8, #7
 80080e0:	d509      	bpl.n	80080f6 <_realloc_r+0x4e>
 80080e2:	230c      	movs	r3, #12
 80080e4:	f8ca 3000 	str.w	r3, [sl]
 80080e8:	2700      	movs	r7, #0
 80080ea:	4638      	mov	r0, r7
 80080ec:	b003      	add	sp, #12
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	f04f 0810 	mov.w	r8, #16
 80080f6:	4590      	cmp	r8, r2
 80080f8:	d3f3      	bcc.n	80080e2 <_realloc_r+0x3a>
 80080fa:	45b0      	cmp	r8, r6
 80080fc:	f340 8145 	ble.w	800838a <_realloc_r+0x2e2>
 8008100:	4ba8      	ldr	r3, [pc, #672]	; (80083a4 <_realloc_r+0x2fc>)
 8008102:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8008106:	eb09 0106 	add.w	r1, r9, r6
 800810a:	4571      	cmp	r1, lr
 800810c:	469b      	mov	fp, r3
 800810e:	684b      	ldr	r3, [r1, #4]
 8008110:	d005      	beq.n	800811e <_realloc_r+0x76>
 8008112:	f023 0001 	bic.w	r0, r3, #1
 8008116:	4408      	add	r0, r1
 8008118:	6840      	ldr	r0, [r0, #4]
 800811a:	07c7      	lsls	r7, r0, #31
 800811c:	d447      	bmi.n	80081ae <_realloc_r+0x106>
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	4571      	cmp	r1, lr
 8008124:	eb06 0703 	add.w	r7, r6, r3
 8008128:	d119      	bne.n	800815e <_realloc_r+0xb6>
 800812a:	f108 0010 	add.w	r0, r8, #16
 800812e:	4287      	cmp	r7, r0
 8008130:	db3f      	blt.n	80081b2 <_realloc_r+0x10a>
 8008132:	eb09 0308 	add.w	r3, r9, r8
 8008136:	eba7 0708 	sub.w	r7, r7, r8
 800813a:	f047 0701 	orr.w	r7, r7, #1
 800813e:	f8cb 3008 	str.w	r3, [fp, #8]
 8008142:	605f      	str	r7, [r3, #4]
 8008144:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	ea43 0308 	orr.w	r3, r3, r8
 8008150:	f844 3c04 	str.w	r3, [r4, #-4]
 8008154:	4650      	mov	r0, sl
 8008156:	f7ff f955 	bl	8007404 <__malloc_unlock>
 800815a:	4627      	mov	r7, r4
 800815c:	e7c5      	b.n	80080ea <_realloc_r+0x42>
 800815e:	45b8      	cmp	r8, r7
 8008160:	dc27      	bgt.n	80081b2 <_realloc_r+0x10a>
 8008162:	68cb      	ldr	r3, [r1, #12]
 8008164:	688a      	ldr	r2, [r1, #8]
 8008166:	60d3      	str	r3, [r2, #12]
 8008168:	609a      	str	r2, [r3, #8]
 800816a:	eba7 0008 	sub.w	r0, r7, r8
 800816e:	280f      	cmp	r0, #15
 8008170:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008174:	eb09 0207 	add.w	r2, r9, r7
 8008178:	f240 8109 	bls.w	800838e <_realloc_r+0x2e6>
 800817c:	eb09 0108 	add.w	r1, r9, r8
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	ea43 0308 	orr.w	r3, r3, r8
 8008188:	f040 0001 	orr.w	r0, r0, #1
 800818c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008190:	6048      	str	r0, [r1, #4]
 8008192:	6853      	ldr	r3, [r2, #4]
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	3108      	adds	r1, #8
 800819c:	4650      	mov	r0, sl
 800819e:	f7fe fdb1 	bl	8006d04 <_free_r>
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7ff f92e 	bl	8007404 <__malloc_unlock>
 80081a8:	f109 0708 	add.w	r7, r9, #8
 80081ac:	e79d      	b.n	80080ea <_realloc_r+0x42>
 80081ae:	2300      	movs	r3, #0
 80081b0:	4619      	mov	r1, r3
 80081b2:	07e8      	lsls	r0, r5, #31
 80081b4:	f100 8084 	bmi.w	80082c0 <_realloc_r+0x218>
 80081b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80081bc:	eba9 0505 	sub.w	r5, r9, r5
 80081c0:	6868      	ldr	r0, [r5, #4]
 80081c2:	f020 0003 	bic.w	r0, r0, #3
 80081c6:	4430      	add	r0, r6
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d076      	beq.n	80082ba <_realloc_r+0x212>
 80081cc:	4571      	cmp	r1, lr
 80081ce:	d150      	bne.n	8008272 <_realloc_r+0x1ca>
 80081d0:	4403      	add	r3, r0
 80081d2:	f108 0110 	add.w	r1, r8, #16
 80081d6:	428b      	cmp	r3, r1
 80081d8:	db6f      	blt.n	80082ba <_realloc_r+0x212>
 80081da:	462f      	mov	r7, r5
 80081dc:	68ea      	ldr	r2, [r5, #12]
 80081de:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80081e2:	60ca      	str	r2, [r1, #12]
 80081e4:	6091      	str	r1, [r2, #8]
 80081e6:	1f32      	subs	r2, r6, #4
 80081e8:	2a24      	cmp	r2, #36	; 0x24
 80081ea:	d83b      	bhi.n	8008264 <_realloc_r+0x1bc>
 80081ec:	2a13      	cmp	r2, #19
 80081ee:	d936      	bls.n	800825e <_realloc_r+0x1b6>
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	60a9      	str	r1, [r5, #8]
 80081f4:	6861      	ldr	r1, [r4, #4]
 80081f6:	60e9      	str	r1, [r5, #12]
 80081f8:	2a1b      	cmp	r2, #27
 80081fa:	d81c      	bhi.n	8008236 <_realloc_r+0x18e>
 80081fc:	f105 0210 	add.w	r2, r5, #16
 8008200:	f104 0108 	add.w	r1, r4, #8
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	6010      	str	r0, [r2, #0]
 8008208:	6848      	ldr	r0, [r1, #4]
 800820a:	6050      	str	r0, [r2, #4]
 800820c:	6889      	ldr	r1, [r1, #8]
 800820e:	6091      	str	r1, [r2, #8]
 8008210:	eb05 0208 	add.w	r2, r5, r8
 8008214:	eba3 0308 	sub.w	r3, r3, r8
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	f8cb 2008 	str.w	r2, [fp, #8]
 8008220:	6053      	str	r3, [r2, #4]
 8008222:	686b      	ldr	r3, [r5, #4]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	ea43 0308 	orr.w	r3, r3, r8
 800822c:	606b      	str	r3, [r5, #4]
 800822e:	4650      	mov	r0, sl
 8008230:	f7ff f8e8 	bl	8007404 <__malloc_unlock>
 8008234:	e759      	b.n	80080ea <_realloc_r+0x42>
 8008236:	68a1      	ldr	r1, [r4, #8]
 8008238:	6129      	str	r1, [r5, #16]
 800823a:	68e1      	ldr	r1, [r4, #12]
 800823c:	6169      	str	r1, [r5, #20]
 800823e:	2a24      	cmp	r2, #36	; 0x24
 8008240:	bf01      	itttt	eq
 8008242:	6922      	ldreq	r2, [r4, #16]
 8008244:	61aa      	streq	r2, [r5, #24]
 8008246:	6960      	ldreq	r0, [r4, #20]
 8008248:	61e8      	streq	r0, [r5, #28]
 800824a:	bf19      	ittee	ne
 800824c:	f105 0218 	addne.w	r2, r5, #24
 8008250:	f104 0110 	addne.w	r1, r4, #16
 8008254:	f105 0220 	addeq.w	r2, r5, #32
 8008258:	f104 0118 	addeq.w	r1, r4, #24
 800825c:	e7d2      	b.n	8008204 <_realloc_r+0x15c>
 800825e:	463a      	mov	r2, r7
 8008260:	4621      	mov	r1, r4
 8008262:	e7cf      	b.n	8008204 <_realloc_r+0x15c>
 8008264:	4621      	mov	r1, r4
 8008266:	4638      	mov	r0, r7
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f7ff fef1 	bl	8008050 <memmove>
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	e7ce      	b.n	8008210 <_realloc_r+0x168>
 8008272:	18c7      	adds	r7, r0, r3
 8008274:	45b8      	cmp	r8, r7
 8008276:	dc20      	bgt.n	80082ba <_realloc_r+0x212>
 8008278:	68cb      	ldr	r3, [r1, #12]
 800827a:	688a      	ldr	r2, [r1, #8]
 800827c:	60d3      	str	r3, [r2, #12]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	4628      	mov	r0, r5
 8008282:	68eb      	ldr	r3, [r5, #12]
 8008284:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008288:	60d3      	str	r3, [r2, #12]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	1f32      	subs	r2, r6, #4
 800828e:	2a24      	cmp	r2, #36	; 0x24
 8008290:	d842      	bhi.n	8008318 <_realloc_r+0x270>
 8008292:	2a13      	cmp	r2, #19
 8008294:	d93e      	bls.n	8008314 <_realloc_r+0x26c>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	60ab      	str	r3, [r5, #8]
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	60eb      	str	r3, [r5, #12]
 800829e:	2a1b      	cmp	r2, #27
 80082a0:	d824      	bhi.n	80082ec <_realloc_r+0x244>
 80082a2:	f105 0010 	add.w	r0, r5, #16
 80082a6:	f104 0308 	add.w	r3, r4, #8
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	6002      	str	r2, [r0, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	6042      	str	r2, [r0, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	6083      	str	r3, [r0, #8]
 80082b6:	46a9      	mov	r9, r5
 80082b8:	e757      	b.n	800816a <_realloc_r+0xc2>
 80082ba:	4580      	cmp	r8, r0
 80082bc:	4607      	mov	r7, r0
 80082be:	dddf      	ble.n	8008280 <_realloc_r+0x1d8>
 80082c0:	4611      	mov	r1, r2
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7fe fe7e 	bl	8006fc4 <_malloc_r>
 80082c8:	4607      	mov	r7, r0
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d0af      	beq.n	800822e <_realloc_r+0x186>
 80082ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	f1a0 0208 	sub.w	r2, r0, #8
 80082da:	444b      	add	r3, r9
 80082dc:	429a      	cmp	r2, r3
 80082de:	d11f      	bne.n	8008320 <_realloc_r+0x278>
 80082e0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80082e4:	f027 0703 	bic.w	r7, r7, #3
 80082e8:	4437      	add	r7, r6
 80082ea:	e73e      	b.n	800816a <_realloc_r+0xc2>
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	612b      	str	r3, [r5, #16]
 80082f0:	68e3      	ldr	r3, [r4, #12]
 80082f2:	616b      	str	r3, [r5, #20]
 80082f4:	2a24      	cmp	r2, #36	; 0x24
 80082f6:	bf01      	itttt	eq
 80082f8:	6923      	ldreq	r3, [r4, #16]
 80082fa:	61ab      	streq	r3, [r5, #24]
 80082fc:	6962      	ldreq	r2, [r4, #20]
 80082fe:	61ea      	streq	r2, [r5, #28]
 8008300:	bf19      	ittee	ne
 8008302:	f105 0018 	addne.w	r0, r5, #24
 8008306:	f104 0310 	addne.w	r3, r4, #16
 800830a:	f105 0020 	addeq.w	r0, r5, #32
 800830e:	f104 0318 	addeq.w	r3, r4, #24
 8008312:	e7ca      	b.n	80082aa <_realloc_r+0x202>
 8008314:	4623      	mov	r3, r4
 8008316:	e7c8      	b.n	80082aa <_realloc_r+0x202>
 8008318:	4621      	mov	r1, r4
 800831a:	f7ff fe99 	bl	8008050 <memmove>
 800831e:	e7ca      	b.n	80082b6 <_realloc_r+0x20e>
 8008320:	1f32      	subs	r2, r6, #4
 8008322:	2a24      	cmp	r2, #36	; 0x24
 8008324:	d82d      	bhi.n	8008382 <_realloc_r+0x2da>
 8008326:	2a13      	cmp	r2, #19
 8008328:	d928      	bls.n	800837c <_realloc_r+0x2d4>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	6043      	str	r3, [r0, #4]
 8008332:	2a1b      	cmp	r2, #27
 8008334:	d80e      	bhi.n	8008354 <_realloc_r+0x2ac>
 8008336:	f100 0308 	add.w	r3, r0, #8
 800833a:	f104 0208 	add.w	r2, r4, #8
 800833e:	6811      	ldr	r1, [r2, #0]
 8008340:	6019      	str	r1, [r3, #0]
 8008342:	6851      	ldr	r1, [r2, #4]
 8008344:	6059      	str	r1, [r3, #4]
 8008346:	6892      	ldr	r2, [r2, #8]
 8008348:	609a      	str	r2, [r3, #8]
 800834a:	4621      	mov	r1, r4
 800834c:	4650      	mov	r0, sl
 800834e:	f7fe fcd9 	bl	8006d04 <_free_r>
 8008352:	e76c      	b.n	800822e <_realloc_r+0x186>
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	6083      	str	r3, [r0, #8]
 8008358:	68e3      	ldr	r3, [r4, #12]
 800835a:	60c3      	str	r3, [r0, #12]
 800835c:	2a24      	cmp	r2, #36	; 0x24
 800835e:	bf01      	itttt	eq
 8008360:	6923      	ldreq	r3, [r4, #16]
 8008362:	6103      	streq	r3, [r0, #16]
 8008364:	6961      	ldreq	r1, [r4, #20]
 8008366:	6141      	streq	r1, [r0, #20]
 8008368:	bf19      	ittee	ne
 800836a:	f100 0310 	addne.w	r3, r0, #16
 800836e:	f104 0210 	addne.w	r2, r4, #16
 8008372:	f100 0318 	addeq.w	r3, r0, #24
 8008376:	f104 0218 	addeq.w	r2, r4, #24
 800837a:	e7e0      	b.n	800833e <_realloc_r+0x296>
 800837c:	4603      	mov	r3, r0
 800837e:	4622      	mov	r2, r4
 8008380:	e7dd      	b.n	800833e <_realloc_r+0x296>
 8008382:	4621      	mov	r1, r4
 8008384:	f7ff fe64 	bl	8008050 <memmove>
 8008388:	e7df      	b.n	800834a <_realloc_r+0x2a2>
 800838a:	4637      	mov	r7, r6
 800838c:	e6ed      	b.n	800816a <_realloc_r+0xc2>
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	431f      	orrs	r7, r3
 8008394:	f8c9 7004 	str.w	r7, [r9, #4]
 8008398:	6853      	ldr	r3, [r2, #4]
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	6053      	str	r3, [r2, #4]
 80083a0:	e6ff      	b.n	80081a2 <_realloc_r+0xfa>
 80083a2:	bf00      	nop
 80083a4:	20000100 	.word	0x20000100

080083a8 <__swbuf_r>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	460e      	mov	r6, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	4605      	mov	r5, r0
 80083b0:	b118      	cbz	r0, 80083ba <__swbuf_r+0x12>
 80083b2:	6983      	ldr	r3, [r0, #24]
 80083b4:	b90b      	cbnz	r3, 80083ba <__swbuf_r+0x12>
 80083b6:	f7fe fbcf 	bl	8006b58 <__sinit>
 80083ba:	4b27      	ldr	r3, [pc, #156]	; (8008458 <__swbuf_r+0xb0>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	d12f      	bne.n	8008420 <__swbuf_r+0x78>
 80083c0:	686c      	ldr	r4, [r5, #4]
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	0719      	lsls	r1, r3, #28
 80083ca:	d533      	bpl.n	8008434 <__swbuf_r+0x8c>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d030      	beq.n	8008434 <__swbuf_r+0x8c>
 80083d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d6:	b2f6      	uxtb	r6, r6
 80083d8:	049a      	lsls	r2, r3, #18
 80083da:	4637      	mov	r7, r6
 80083dc:	d534      	bpl.n	8008448 <__swbuf_r+0xa0>
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	1ac0      	subs	r0, r0, r3
 80083e4:	6963      	ldr	r3, [r4, #20]
 80083e6:	4298      	cmp	r0, r3
 80083e8:	db04      	blt.n	80083f4 <__swbuf_r+0x4c>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7fe fb1f 	bl	8006a30 <_fflush_r>
 80083f2:	bb28      	cbnz	r0, 8008440 <__swbuf_r+0x98>
 80083f4:	68a3      	ldr	r3, [r4, #8]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	701e      	strb	r6, [r3, #0]
 8008402:	6963      	ldr	r3, [r4, #20]
 8008404:	3001      	adds	r0, #1
 8008406:	4298      	cmp	r0, r3
 8008408:	d004      	beq.n	8008414 <__swbuf_r+0x6c>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	07db      	lsls	r3, r3, #31
 800840e:	d519      	bpl.n	8008444 <__swbuf_r+0x9c>
 8008410:	2e0a      	cmp	r6, #10
 8008412:	d117      	bne.n	8008444 <__swbuf_r+0x9c>
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f7fe fb0a 	bl	8006a30 <_fflush_r>
 800841c:	b190      	cbz	r0, 8008444 <__swbuf_r+0x9c>
 800841e:	e00f      	b.n	8008440 <__swbuf_r+0x98>
 8008420:	4b0e      	ldr	r3, [pc, #56]	; (800845c <__swbuf_r+0xb4>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d101      	bne.n	800842a <__swbuf_r+0x82>
 8008426:	68ac      	ldr	r4, [r5, #8]
 8008428:	e7cb      	b.n	80083c2 <__swbuf_r+0x1a>
 800842a:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <__swbuf_r+0xb8>)
 800842c:	429c      	cmp	r4, r3
 800842e:	bf08      	it	eq
 8008430:	68ec      	ldreq	r4, [r5, #12]
 8008432:	e7c6      	b.n	80083c2 <__swbuf_r+0x1a>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f7fd fb9e 	bl	8005b78 <__swsetup_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0c8      	beq.n	80083d2 <__swbuf_r+0x2a>
 8008440:	f04f 37ff 	mov.w	r7, #4294967295
 8008444:	4638      	mov	r0, r7
 8008446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008448:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800844c:	81a3      	strh	r3, [r4, #12]
 800844e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008454:	6663      	str	r3, [r4, #100]	; 0x64
 8008456:	e7c2      	b.n	80083de <__swbuf_r+0x36>
 8008458:	0800864c 	.word	0x0800864c
 800845c:	0800866c 	.word	0x0800866c
 8008460:	0800862c 	.word	0x0800862c

08008464 <_wcrtomb_r>:
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	4605      	mov	r5, r0
 8008468:	b085      	sub	sp, #20
 800846a:	461e      	mov	r6, r3
 800846c:	460f      	mov	r7, r1
 800846e:	4c0f      	ldr	r4, [pc, #60]	; (80084ac <_wcrtomb_r+0x48>)
 8008470:	b991      	cbnz	r1, 8008498 <_wcrtomb_r+0x34>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	490e      	ldr	r1, [pc, #56]	; (80084b0 <_wcrtomb_r+0x4c>)
 8008476:	6a12      	ldr	r2, [r2, #32]
 8008478:	2a00      	cmp	r2, #0
 800847a:	bf08      	it	eq
 800847c:	460a      	moveq	r2, r1
 800847e:	a901      	add	r1, sp, #4
 8008480:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8008484:	463a      	mov	r2, r7
 8008486:	47a0      	blx	r4
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	bf01      	itttt	eq
 800848c:	2300      	moveq	r3, #0
 800848e:	6033      	streq	r3, [r6, #0]
 8008490:	238a      	moveq	r3, #138	; 0x8a
 8008492:	602b      	streq	r3, [r5, #0]
 8008494:	b005      	add	sp, #20
 8008496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008498:	6824      	ldr	r4, [r4, #0]
 800849a:	4f05      	ldr	r7, [pc, #20]	; (80084b0 <_wcrtomb_r+0x4c>)
 800849c:	6a24      	ldr	r4, [r4, #32]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	bf08      	it	eq
 80084a2:	463c      	moveq	r4, r7
 80084a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80084a8:	e7ed      	b.n	8008486 <_wcrtomb_r+0x22>
 80084aa:	bf00      	nop
 80084ac:	2000000c 	.word	0x2000000c
 80084b0:	20000510 	.word	0x20000510

080084b4 <__ascii_wctomb>:
 80084b4:	b149      	cbz	r1, 80084ca <__ascii_wctomb+0x16>
 80084b6:	2aff      	cmp	r2, #255	; 0xff
 80084b8:	bf85      	ittet	hi
 80084ba:	238a      	movhi	r3, #138	; 0x8a
 80084bc:	6003      	strhi	r3, [r0, #0]
 80084be:	700a      	strbls	r2, [r1, #0]
 80084c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80084c4:	bf98      	it	ls
 80084c6:	2001      	movls	r0, #1
 80084c8:	4770      	bx	lr
 80084ca:	4608      	mov	r0, r1
 80084cc:	4770      	bx	lr

080084ce <abort>:
 80084ce:	b508      	push	{r3, lr}
 80084d0:	2006      	movs	r0, #6
 80084d2:	f000 f82b 	bl	800852c <raise>
 80084d6:	2001      	movs	r0, #1
 80084d8:	f7fc f952 	bl	8004780 <_exit>

080084dc <_raise_r>:
 80084dc:	291f      	cmp	r1, #31
 80084de:	b538      	push	{r3, r4, r5, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	d904      	bls.n	80084f0 <_raise_r+0x14>
 80084e6:	2316      	movs	r3, #22
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084f2:	b112      	cbz	r2, 80084fa <_raise_r+0x1e>
 80084f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084f8:	b94b      	cbnz	r3, 800850e <_raise_r+0x32>
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f830 	bl	8008560 <_getpid_r>
 8008500:	462a      	mov	r2, r5
 8008502:	4601      	mov	r1, r0
 8008504:	4620      	mov	r0, r4
 8008506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850a:	f000 b817 	b.w	800853c <_kill_r>
 800850e:	2b01      	cmp	r3, #1
 8008510:	d00a      	beq.n	8008528 <_raise_r+0x4c>
 8008512:	1c59      	adds	r1, r3, #1
 8008514:	d103      	bne.n	800851e <_raise_r+0x42>
 8008516:	2316      	movs	r3, #22
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	2001      	movs	r0, #1
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	2400      	movs	r4, #0
 8008520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008524:	4628      	mov	r0, r5
 8008526:	4798      	blx	r3
 8008528:	2000      	movs	r0, #0
 800852a:	bd38      	pop	{r3, r4, r5, pc}

0800852c <raise>:
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <raise+0xc>)
 800852e:	4601      	mov	r1, r0
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f7ff bfd3 	b.w	80084dc <_raise_r>
 8008536:	bf00      	nop
 8008538:	2000000c 	.word	0x2000000c

0800853c <_kill_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4c07      	ldr	r4, [pc, #28]	; (800855c <_kill_r+0x20>)
 8008540:	2300      	movs	r3, #0
 8008542:	4605      	mov	r5, r0
 8008544:	4608      	mov	r0, r1
 8008546:	4611      	mov	r1, r2
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	f7fc f911 	bl	8004770 <_kill>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d102      	bne.n	8008558 <_kill_r+0x1c>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	b103      	cbz	r3, 8008558 <_kill_r+0x1c>
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	bd38      	pop	{r3, r4, r5, pc}
 800855a:	bf00      	nop
 800855c:	20000934 	.word	0x20000934

08008560 <_getpid_r>:
 8008560:	f7fc b904 	b.w	800476c <_getpid>

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr
