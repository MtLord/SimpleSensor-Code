
SympleSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800ab90  0800ab90  0001ab90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f0  0800aedc  0800aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800afcc  0800afcc  0001afcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000067c  20000000  0800afd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0002067c  2**0
                  CONTENTS
  9 .bss          00000308  2000067c  2000067c  0002067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000984  20000984  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026652  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046b3  00000000  00000000  00046cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0004b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0004c808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b571  00000000  00000000  0004da70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005ede  00000000  00000000  00058fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005eebf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000062bc  00000000  00000000  0005ef3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000003ef  00000000  00000000  000651f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000067c 	.word	0x2000067c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab74 	.word	0x0800ab74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000680 	.word	0x20000680
 80001cc:	0800ab74 	.word	0x0800ab74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f001 b8f6 	b.w	8001da4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <selfrel_offset31>:
 8000eac:	6803      	ldr	r3, [r0, #0]
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	bf4c      	ite	mi
 8000eb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000eb6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000eba:	4418      	add	r0, r3
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <search_EIT_table>:
 8000ec0:	b361      	cbz	r1, 8000f1c <search_EIT_table+0x5c>
 8000ec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec6:	f101 3aff 	add.w	sl, r1, #4294967295
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4606      	mov	r6, r0
 8000ece:	46d1      	mov	r9, sl
 8000ed0:	2700      	movs	r7, #0
 8000ed2:	eb07 0409 	add.w	r4, r7, r9
 8000ed6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000eda:	1064      	asrs	r4, r4, #1
 8000edc:	00e5      	lsls	r5, r4, #3
 8000ede:	1971      	adds	r1, r6, r5
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	f7ff ffe3 	bl	8000eac <selfrel_offset31>
 8000ee6:	45a2      	cmp	sl, r4
 8000ee8:	4683      	mov	fp, r0
 8000eea:	f105 0008 	add.w	r0, r5, #8
 8000eee:	4430      	add	r0, r6
 8000ef0:	d009      	beq.n	8000f06 <search_EIT_table+0x46>
 8000ef2:	f7ff ffdb 	bl	8000eac <selfrel_offset31>
 8000ef6:	45c3      	cmp	fp, r8
 8000ef8:	f100 30ff 	add.w	r0, r0, #4294967295
 8000efc:	d805      	bhi.n	8000f0a <search_EIT_table+0x4a>
 8000efe:	4540      	cmp	r0, r8
 8000f00:	d209      	bcs.n	8000f16 <search_EIT_table+0x56>
 8000f02:	1c67      	adds	r7, r4, #1
 8000f04:	e7e5      	b.n	8000ed2 <search_EIT_table+0x12>
 8000f06:	45c3      	cmp	fp, r8
 8000f08:	d905      	bls.n	8000f16 <search_EIT_table+0x56>
 8000f0a:	42a7      	cmp	r7, r4
 8000f0c:	d002      	beq.n	8000f14 <search_EIT_table+0x54>
 8000f0e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000f12:	e7de      	b.n	8000ed2 <search_EIT_table+0x12>
 8000f14:	2100      	movs	r1, #0
 8000f16:	4608      	mov	r0, r1
 8000f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4770      	bx	lr

08000f20 <__gnu_unwind_get_pr_addr>:
 8000f20:	2801      	cmp	r0, #1
 8000f22:	d007      	beq.n	8000f34 <__gnu_unwind_get_pr_addr+0x14>
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d007      	beq.n	8000f38 <__gnu_unwind_get_pr_addr+0x18>
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__gnu_unwind_get_pr_addr+0x1c>)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	4618      	moveq	r0, r3
 8000f30:	2000      	movne	r0, #0
 8000f32:	4770      	bx	lr
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <__gnu_unwind_get_pr_addr+0x20>)
 8000f36:	4770      	bx	lr
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <__gnu_unwind_get_pr_addr+0x24>)
 8000f3a:	4770      	bx	lr
 8000f3c:	08001625 	.word	0x08001625
 8000f40:	08001629 	.word	0x08001629
 8000f44:	0800162d 	.word	0x0800162d

08000f48 <get_eit_entry>:
 8000f48:	b530      	push	{r4, r5, lr}
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <get_eit_entry+0x94>)
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	4604      	mov	r4, r0
 8000f50:	1e8d      	subs	r5, r1, #2
 8000f52:	b37b      	cbz	r3, 8000fb4 <get_eit_entry+0x6c>
 8000f54:	a901      	add	r1, sp, #4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f3af 8000 	nop.w
 8000f5c:	b320      	cbz	r0, 8000fa8 <get_eit_entry+0x60>
 8000f5e:	9901      	ldr	r1, [sp, #4]
 8000f60:	462a      	mov	r2, r5
 8000f62:	f7ff ffad 	bl	8000ec0 <search_EIT_table>
 8000f66:	4601      	mov	r1, r0
 8000f68:	b1f0      	cbz	r0, 8000fa8 <get_eit_entry+0x60>
 8000f6a:	f7ff ff9f 	bl	8000eac <selfrel_offset31>
 8000f6e:	684b      	ldr	r3, [r1, #4]
 8000f70:	64a0      	str	r0, [r4, #72]	; 0x48
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d012      	beq.n	8000f9c <get_eit_entry+0x54>
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f101 0004 	add.w	r0, r1, #4
 8000f7c:	db20      	blt.n	8000fc0 <get_eit_entry+0x78>
 8000f7e:	f7ff ff95 	bl	8000eac <selfrel_offset31>
 8000f82:	2300      	movs	r3, #0
 8000f84:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000f86:	6523      	str	r3, [r4, #80]	; 0x50
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db1c      	blt.n	8000fc8 <get_eit_entry+0x80>
 8000f8e:	f7ff ff8d 	bl	8000eac <selfrel_offset31>
 8000f92:	2300      	movs	r3, #0
 8000f94:	6120      	str	r0, [r4, #16]
 8000f96:	4618      	mov	r0, r3
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd30      	pop	{r4, r5, pc}
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6123      	str	r3, [r4, #16]
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6123      	str	r3, [r4, #16]
 8000fac:	2309      	movs	r3, #9
 8000fae:	4618      	mov	r0, r3
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd30      	pop	{r4, r5, pc}
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <get_eit_entry+0x98>)
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <get_eit_entry+0x9c>)
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	10c9      	asrs	r1, r1, #3
 8000fbc:	9101      	str	r1, [sp, #4]
 8000fbe:	e7cf      	b.n	8000f60 <get_eit_entry+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8000fc6:	e7df      	b.n	8000f88 <get_eit_entry+0x40>
 8000fc8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fcc:	f7ff ffa8 	bl	8000f20 <__gnu_unwind_get_pr_addr>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	6120      	str	r0, [r4, #16]
 8000fd4:	bf14      	ite	ne
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	2309      	moveq	r3, #9
 8000fda:	e7dc      	b.n	8000f96 <get_eit_entry+0x4e>
 8000fdc:	00000000 	.word	0x00000000
 8000fe0:	0800afcc 	.word	0x0800afcc
 8000fe4:	0800aedc 	.word	0x0800aedc

08000fe8 <restore_non_core_regs>:
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	07da      	lsls	r2, r3, #31
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	d406      	bmi.n	8001000 <restore_non_core_regs+0x18>
 8000ff2:	079b      	lsls	r3, r3, #30
 8000ff4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000ff8:	d509      	bpl.n	800100e <restore_non_core_regs+0x26>
 8000ffa:	f000 fc51 	bl	80018a0 <__gnu_Unwind_Restore_VFP_D>
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	0759      	lsls	r1, r3, #29
 8001002:	d509      	bpl.n	8001018 <restore_non_core_regs+0x30>
 8001004:	071a      	lsls	r2, r3, #28
 8001006:	d50e      	bpl.n	8001026 <restore_non_core_regs+0x3e>
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d513      	bpl.n	8001034 <restore_non_core_regs+0x4c>
 800100c:	bd10      	pop	{r4, pc}
 800100e:	f000 fc3f 	bl	8001890 <__gnu_Unwind_Restore_VFP>
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	0759      	lsls	r1, r3, #29
 8001016:	d4f5      	bmi.n	8001004 <restore_non_core_regs+0x1c>
 8001018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800101c:	f000 fc48 	bl	80018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	071a      	lsls	r2, r3, #28
 8001024:	d4f0      	bmi.n	8001008 <restore_non_core_regs+0x20>
 8001026:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800102a:	f000 fc49 	bl	80018c0 <__gnu_Unwind_Restore_WMMXD>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	06db      	lsls	r3, r3, #27
 8001032:	d4eb      	bmi.n	800100c <restore_non_core_regs+0x24>
 8001034:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800103c:	f000 bc84 	b.w	8001948 <__gnu_Unwind_Restore_WMMXC>

08001040 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	b103      	cbz	r3, 8001046 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001044:	4403      	add	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__gnu_unwind_24bit.isra.1>:
 800104c:	2009      	movs	r0, #9
 800104e:	4770      	bx	lr

08001050 <_Unwind_DebugHook>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <unwind_phase2>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	e008      	b.n	800106e <unwind_phase2+0x1a>
 800105c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800105e:	6163      	str	r3, [r4, #20]
 8001060:	462a      	mov	r2, r5
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	4621      	mov	r1, r4
 8001066:	2001      	movs	r0, #1
 8001068:	4798      	blx	r3
 800106a:	2808      	cmp	r0, #8
 800106c:	d108      	bne.n	8001080 <unwind_phase2+0x2c>
 800106e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff ff69 	bl	8000f48 <get_eit_entry>
 8001076:	4606      	mov	r6, r0
 8001078:	2800      	cmp	r0, #0
 800107a:	d0ef      	beq.n	800105c <unwind_phase2+0x8>
 800107c:	f009 fd2f 	bl	800aade <abort>
 8001080:	2807      	cmp	r0, #7
 8001082:	d1fb      	bne.n	800107c <unwind_phase2+0x28>
 8001084:	4630      	mov	r0, r6
 8001086:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001088:	f7ff ffe2 	bl	8001050 <_Unwind_DebugHook>
 800108c:	1d28      	adds	r0, r5, #4
 800108e:	f000 fbf3 	bl	8001878 <__restore_core_regs>
 8001092:	bf00      	nop

08001094 <unwind_phase2_forced>:
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	1d0c      	adds	r4, r1, #4
 800109a:	4605      	mov	r5, r0
 800109c:	4692      	mov	sl, r2
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80010a4:	ae03      	add	r6, sp, #12
 80010a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010b4:	ac02      	add	r4, sp, #8
 80010b6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80010ba:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80010be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80010c2:	2300      	movs	r3, #0
 80010c4:	4628      	mov	r0, r5
 80010c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	f7ff ff3d 	bl	8000f48 <get_eit_entry>
 80010ce:	f1ba 0f00 	cmp.w	sl, #0
 80010d2:	4607      	mov	r7, r0
 80010d4:	bf14      	ite	ne
 80010d6:	260a      	movne	r6, #10
 80010d8:	2609      	moveq	r6, #9
 80010da:	b17f      	cbz	r7, 80010fc <unwind_phase2_forced+0x68>
 80010dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010de:	f046 0110 	orr.w	r1, r6, #16
 80010e2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80010e6:	462a      	mov	r2, r5
 80010e8:	6463      	str	r3, [r4, #68]	; 0x44
 80010ea:	2001      	movs	r0, #1
 80010ec:	462b      	mov	r3, r5
 80010ee:	47c0      	blx	r8
 80010f0:	bb78      	cbnz	r0, 8001152 <unwind_phase2_forced+0xbe>
 80010f2:	4638      	mov	r0, r7
 80010f4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80010f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010fe:	616b      	str	r3, [r5, #20]
 8001100:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001104:	4621      	mov	r1, r4
 8001106:	a87a      	add	r0, sp, #488	; 0x1e8
 8001108:	f008 fc72 	bl	80099f0 <memcpy>
 800110c:	692b      	ldr	r3, [r5, #16]
 800110e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001110:	4629      	mov	r1, r5
 8001112:	4630      	mov	r0, r6
 8001114:	4798      	blx	r3
 8001116:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001118:	4682      	mov	sl, r0
 800111a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800111e:	4631      	mov	r1, r6
 8001120:	6463      	str	r3, [r4, #68]	; 0x44
 8001122:	462a      	mov	r2, r5
 8001124:	462b      	mov	r3, r5
 8001126:	2001      	movs	r0, #1
 8001128:	47c0      	blx	r8
 800112a:	b990      	cbnz	r0, 8001152 <unwind_phase2_forced+0xbe>
 800112c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001130:	a97a      	add	r1, sp, #488	; 0x1e8
 8001132:	4620      	mov	r0, r4
 8001134:	f008 fc5c 	bl	80099f0 <memcpy>
 8001138:	f1ba 0f08 	cmp.w	sl, #8
 800113c:	d106      	bne.n	800114c <unwind_phase2_forced+0xb8>
 800113e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001140:	4628      	mov	r0, r5
 8001142:	f7ff ff01 	bl	8000f48 <get_eit_entry>
 8001146:	2609      	movs	r6, #9
 8001148:	4607      	mov	r7, r0
 800114a:	e7c6      	b.n	80010da <unwind_phase2_forced+0x46>
 800114c:	f1ba 0f07 	cmp.w	sl, #7
 8001150:	d005      	beq.n	800115e <unwind_phase2_forced+0xca>
 8001152:	2709      	movs	r7, #9
 8001154:	4638      	mov	r0, r7
 8001156:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115e:	4638      	mov	r0, r7
 8001160:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001162:	f7ff ff75 	bl	8001050 <_Unwind_DebugHook>
 8001166:	a803      	add	r0, sp, #12
 8001168:	f000 fb86 	bl	8001878 <__restore_core_regs>

0800116c <_Unwind_GetCFA>:
 800116c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800116e:	4770      	bx	lr

08001170 <__gnu_Unwind_RaiseException>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001174:	640b      	str	r3, [r1, #64]	; 0x40
 8001176:	1d0e      	adds	r6, r1, #4
 8001178:	460f      	mov	r7, r1
 800117a:	4604      	mov	r4, r0
 800117c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117e:	b0f9      	sub	sp, #484	; 0x1e4
 8001180:	ad01      	add	r5, sp, #4
 8001182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001190:	f04f 36ff 	mov.w	r6, #4294967295
 8001194:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001198:	9600      	str	r6, [sp, #0]
 800119a:	e006      	b.n	80011aa <__gnu_Unwind_RaiseException+0x3a>
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	466a      	mov	r2, sp
 80011a0:	4621      	mov	r1, r4
 80011a2:	4798      	blx	r3
 80011a4:	2808      	cmp	r0, #8
 80011a6:	4605      	mov	r5, r0
 80011a8:	d108      	bne.n	80011bc <__gnu_Unwind_RaiseException+0x4c>
 80011aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fecb 	bl	8000f48 <get_eit_entry>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d0f2      	beq.n	800119c <__gnu_Unwind_RaiseException+0x2c>
 80011b6:	2009      	movs	r0, #9
 80011b8:	b079      	add	sp, #484	; 0x1e4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	4668      	mov	r0, sp
 80011be:	f7ff ff13 	bl	8000fe8 <restore_non_core_regs>
 80011c2:	2d06      	cmp	r5, #6
 80011c4:	d1f7      	bne.n	80011b6 <__gnu_Unwind_RaiseException+0x46>
 80011c6:	4639      	mov	r1, r7
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff ff43 	bl	8001054 <unwind_phase2>
 80011ce:	bf00      	nop

080011d0 <__gnu_Unwind_ForcedUnwind>:
 80011d0:	b430      	push	{r4, r5}
 80011d2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80011d4:	60c1      	str	r1, [r0, #12]
 80011d6:	6182      	str	r2, [r0, #24]
 80011d8:	4619      	mov	r1, r3
 80011da:	641d      	str	r5, [r3, #64]	; 0x40
 80011dc:	2200      	movs	r2, #0
 80011de:	bc30      	pop	{r4, r5}
 80011e0:	e758      	b.n	8001094 <unwind_phase2_forced>
 80011e2:	bf00      	nop

080011e4 <__gnu_Unwind_Resume>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	68c6      	ldr	r6, [r0, #12]
 80011e8:	6943      	ldr	r3, [r0, #20]
 80011ea:	640b      	str	r3, [r1, #64]	; 0x40
 80011ec:	b126      	cbz	r6, 80011f8 <__gnu_Unwind_Resume+0x14>
 80011ee:	2201      	movs	r2, #1
 80011f0:	f7ff ff50 	bl	8001094 <unwind_phase2_forced>
 80011f4:	f009 fc73 	bl	800aade <abort>
 80011f8:	6903      	ldr	r3, [r0, #16]
 80011fa:	460a      	mov	r2, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
 8001200:	4601      	mov	r1, r0
 8001202:	2002      	movs	r0, #2
 8001204:	4798      	blx	r3
 8001206:	2807      	cmp	r0, #7
 8001208:	d007      	beq.n	800121a <__gnu_Unwind_Resume+0x36>
 800120a:	2808      	cmp	r0, #8
 800120c:	d103      	bne.n	8001216 <__gnu_Unwind_Resume+0x32>
 800120e:	4629      	mov	r1, r5
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff1f 	bl	8001054 <unwind_phase2>
 8001216:	f009 fc62 	bl	800aade <abort>
 800121a:	4630      	mov	r0, r6
 800121c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800121e:	f7ff ff17 	bl	8001050 <_Unwind_DebugHook>
 8001222:	1d28      	adds	r0, r5, #4
 8001224:	f000 fb28 	bl	8001878 <__restore_core_regs>

08001228 <__gnu_Unwind_Resume_or_Rethrow>:
 8001228:	68c2      	ldr	r2, [r0, #12]
 800122a:	b11a      	cbz	r2, 8001234 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800122c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800122e:	640a      	str	r2, [r1, #64]	; 0x40
 8001230:	2200      	movs	r2, #0
 8001232:	e72f      	b.n	8001094 <unwind_phase2_forced>
 8001234:	e79c      	b.n	8001170 <__gnu_Unwind_RaiseException>
 8001236:	bf00      	nop

08001238 <_Unwind_Complete>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <_Unwind_DeleteException>:
 800123c:	6883      	ldr	r3, [r0, #8]
 800123e:	b113      	cbz	r3, 8001246 <_Unwind_DeleteException+0xa>
 8001240:	4601      	mov	r1, r0
 8001242:	2001      	movs	r0, #1
 8001244:	4718      	bx	r3
 8001246:	4770      	bx	lr

08001248 <_Unwind_VRS_Get>:
 8001248:	b500      	push	{lr}
 800124a:	2904      	cmp	r1, #4
 800124c:	d807      	bhi.n	800125e <_Unwind_VRS_Get+0x16>
 800124e:	e8df f001 	tbb	[pc, r1]
 8001252:	0903      	.short	0x0903
 8001254:	0906      	.short	0x0906
 8001256:	09          	.byte	0x09
 8001257:	00          	.byte	0x00
 8001258:	b90b      	cbnz	r3, 800125e <_Unwind_VRS_Get+0x16>
 800125a:	2a0f      	cmp	r2, #15
 800125c:	d905      	bls.n	800126a <_Unwind_VRS_Get+0x22>
 800125e:	2002      	movs	r0, #2
 8001260:	f85d fb04 	ldr.w	pc, [sp], #4
 8001264:	2001      	movs	r0, #1
 8001266:	f85d fb04 	ldr.w	pc, [sp], #4
 800126a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800126e:	4618      	mov	r0, r3
 8001270:	6853      	ldr	r3, [r2, #4]
 8001272:	9a01      	ldr	r2, [sp, #4]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	f85d fb04 	ldr.w	pc, [sp], #4
 800127a:	bf00      	nop

0800127c <_Unwind_GetGR>:
 800127c:	b510      	push	{r4, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	2300      	movs	r3, #0
 8001282:	ac03      	add	r4, sp, #12
 8001284:	460a      	mov	r2, r1
 8001286:	9400      	str	r4, [sp, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff ffdd 	bl	8001248 <_Unwind_VRS_Get>
 800128e:	9803      	ldr	r0, [sp, #12]
 8001290:	b004      	add	sp, #16
 8001292:	bd10      	pop	{r4, pc}

08001294 <_Unwind_VRS_Set>:
 8001294:	b500      	push	{lr}
 8001296:	2904      	cmp	r1, #4
 8001298:	d807      	bhi.n	80012aa <_Unwind_VRS_Set+0x16>
 800129a:	e8df f001 	tbb	[pc, r1]
 800129e:	0903      	.short	0x0903
 80012a0:	0906      	.short	0x0906
 80012a2:	09          	.byte	0x09
 80012a3:	00          	.byte	0x00
 80012a4:	b90b      	cbnz	r3, 80012aa <_Unwind_VRS_Set+0x16>
 80012a6:	2a0f      	cmp	r2, #15
 80012a8:	d905      	bls.n	80012b6 <_Unwind_VRS_Set+0x22>
 80012aa:	2002      	movs	r0, #2
 80012ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b0:	2001      	movs	r0, #1
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b6:	9901      	ldr	r1, [sp, #4]
 80012b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012bc:	6809      	ldr	r1, [r1, #0]
 80012be:	6051      	str	r1, [r2, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c6:	bf00      	nop

080012c8 <_Unwind_SetGR>:
 80012c8:	b510      	push	{r4, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	ac04      	add	r4, sp, #16
 80012ce:	2300      	movs	r3, #0
 80012d0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80012d4:	460a      	mov	r2, r1
 80012d6:	9400      	str	r4, [sp, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff ffdb 	bl	8001294 <_Unwind_VRS_Set>
 80012de:	b004      	add	sp, #16
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop

080012e4 <__gnu_Unwind_Backtrace>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	1d15      	adds	r5, r2, #4
 80012ec:	4607      	mov	r7, r0
 80012ee:	460e      	mov	r6, r1
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80012f6:	ac17      	add	r4, sp, #92	; 0x5c
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001306:	f04f 35ff 	mov.w	r5, #4294967295
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800130e:	9516      	str	r5, [sp, #88]	; 0x58
 8001310:	e010      	b.n	8001334 <__gnu_Unwind_Backtrace+0x50>
 8001312:	a816      	add	r0, sp, #88	; 0x58
 8001314:	f7ff ffd8 	bl	80012c8 <_Unwind_SetGR>
 8001318:	4631      	mov	r1, r6
 800131a:	a816      	add	r0, sp, #88	; 0x58
 800131c:	47b8      	blx	r7
 800131e:	aa16      	add	r2, sp, #88	; 0x58
 8001320:	4669      	mov	r1, sp
 8001322:	b978      	cbnz	r0, 8001344 <__gnu_Unwind_Backtrace+0x60>
 8001324:	9b04      	ldr	r3, [sp, #16]
 8001326:	2008      	movs	r0, #8
 8001328:	4798      	blx	r3
 800132a:	2805      	cmp	r0, #5
 800132c:	4604      	mov	r4, r0
 800132e:	d00a      	beq.n	8001346 <__gnu_Unwind_Backtrace+0x62>
 8001330:	2809      	cmp	r0, #9
 8001332:	d007      	beq.n	8001344 <__gnu_Unwind_Backtrace+0x60>
 8001334:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001336:	4668      	mov	r0, sp
 8001338:	f7ff fe06 	bl	8000f48 <get_eit_entry>
 800133c:	466a      	mov	r2, sp
 800133e:	210c      	movs	r1, #12
 8001340:	2800      	cmp	r0, #0
 8001342:	d0e6      	beq.n	8001312 <__gnu_Unwind_Backtrace+0x2e>
 8001344:	2409      	movs	r4, #9
 8001346:	a816      	add	r0, sp, #88	; 0x58
 8001348:	f7ff fe4e 	bl	8000fe8 <restore_non_core_regs>
 800134c:	4620      	mov	r0, r4
 800134e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001354 <__gnu_unwind_pr_common>:
 8001354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001358:	460d      	mov	r5, r1
 800135a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800135c:	b08b      	sub	sp, #44	; 0x2c
 800135e:	1d0c      	adds	r4, r1, #4
 8001360:	6809      	ldr	r1, [r1, #0]
 8001362:	9107      	str	r1, [sp, #28]
 8001364:	4691      	mov	r9, r2
 8001366:	9408      	str	r4, [sp, #32]
 8001368:	f000 0b03 	and.w	fp, r0, #3
 800136c:	461e      	mov	r6, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d160      	bne.n	8001434 <__gnu_unwind_pr_common+0xe0>
 8001372:	0209      	lsls	r1, r1, #8
 8001374:	2303      	movs	r3, #3
 8001376:	9107      	str	r1, [sp, #28]
 8001378:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800137c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001380:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001382:	f1bb 0f02 	cmp.w	fp, #2
 8001386:	bf08      	it	eq
 8001388:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800138a:	f013 0301 	ands.w	r3, r3, #1
 800138e:	d140      	bne.n	8001412 <__gnu_unwind_pr_common+0xbe>
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f000 0308 	and.w	r3, r0, #8
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	f8d4 8000 	ldr.w	r8, [r4]
 800139c:	f1b8 0f00 	cmp.w	r8, #0
 80013a0:	d039      	beq.n	8001416 <__gnu_unwind_pr_common+0xc2>
 80013a2:	2e02      	cmp	r6, #2
 80013a4:	d043      	beq.n	800142e <__gnu_unwind_pr_common+0xda>
 80013a6:	f8b4 8000 	ldrh.w	r8, [r4]
 80013aa:	8867      	ldrh	r7, [r4, #2]
 80013ac:	3404      	adds	r4, #4
 80013ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80013b0:	f027 0a01 	bic.w	sl, r7, #1
 80013b4:	210f      	movs	r1, #15
 80013b6:	4648      	mov	r0, r9
 80013b8:	449a      	add	sl, r3
 80013ba:	f7ff ff5f 	bl	800127c <_Unwind_GetGR>
 80013be:	4582      	cmp	sl, r0
 80013c0:	d833      	bhi.n	800142a <__gnu_unwind_pr_common+0xd6>
 80013c2:	f028 0301 	bic.w	r3, r8, #1
 80013c6:	449a      	add	sl, r3
 80013c8:	4550      	cmp	r0, sl
 80013ca:	bf2c      	ite	cs
 80013cc:	2000      	movcs	r0, #0
 80013ce:	2001      	movcc	r0, #1
 80013d0:	007f      	lsls	r7, r7, #1
 80013d2:	f007 0702 	and.w	r7, r7, #2
 80013d6:	f008 0801 	and.w	r8, r8, #1
 80013da:	ea47 0708 	orr.w	r7, r7, r8
 80013de:	2f01      	cmp	r7, #1
 80013e0:	d03e      	beq.n	8001460 <__gnu_unwind_pr_common+0x10c>
 80013e2:	d335      	bcc.n	8001450 <__gnu_unwind_pr_common+0xfc>
 80013e4:	2f02      	cmp	r7, #2
 80013e6:	d11c      	bne.n	8001422 <__gnu_unwind_pr_common+0xce>
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	f1bb 0f00 	cmp.w	fp, #0
 80013f4:	d176      	bne.n	80014e4 <__gnu_unwind_pr_common+0x190>
 80013f6:	b128      	cbz	r0, 8001404 <__gnu_unwind_pr_common+0xb0>
 80013f8:	9903      	ldr	r1, [sp, #12]
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d07e      	beq.n	80014fc <__gnu_unwind_pr_common+0x1a8>
 80013fe:	2a00      	cmp	r2, #0
 8001400:	f000 80a6 	beq.w	8001550 <__gnu_unwind_pr_common+0x1fc>
 8001404:	2b00      	cmp	r3, #0
 8001406:	db77      	blt.n	80014f8 <__gnu_unwind_pr_common+0x1a4>
 8001408:	9b02      	ldr	r3, [sp, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001410:	e7c2      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2e02      	cmp	r6, #2
 8001418:	dd3e      	ble.n	8001498 <__gnu_unwind_pr_common+0x144>
 800141a:	f7ff fe17 	bl	800104c <__gnu_unwind_24bit.isra.1>
 800141e:	2800      	cmp	r0, #0
 8001420:	d040      	beq.n	80014a4 <__gnu_unwind_pr_common+0x150>
 8001422:	2009      	movs	r0, #9
 8001424:	b00b      	add	sp, #44	; 0x2c
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142a:	2000      	movs	r0, #0
 800142c:	e7d0      	b.n	80013d0 <__gnu_unwind_pr_common+0x7c>
 800142e:	6867      	ldr	r7, [r4, #4]
 8001430:	3408      	adds	r4, #8
 8001432:	e7bc      	b.n	80013ae <__gnu_unwind_pr_common+0x5a>
 8001434:	2b02      	cmp	r3, #2
 8001436:	dca3      	bgt.n	8001380 <__gnu_unwind_pr_common+0x2c>
 8001438:	0c0b      	lsrs	r3, r1, #16
 800143a:	b2da      	uxtb	r2, r3
 800143c:	0409      	lsls	r1, r1, #16
 800143e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001442:	2302      	movs	r3, #2
 8001444:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001448:	9107      	str	r1, [sp, #28]
 800144a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800144e:	e797      	b.n	8001380 <__gnu_unwind_pr_common+0x2c>
 8001450:	f1bb 0f00 	cmp.w	fp, #0
 8001454:	d002      	beq.n	800145c <__gnu_unwind_pr_common+0x108>
 8001456:	2800      	cmp	r0, #0
 8001458:	f040 80bd 	bne.w	80015d6 <__gnu_unwind_pr_common+0x282>
 800145c:	3404      	adds	r4, #4
 800145e:	e79b      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001460:	f1bb 0f00 	cmp.w	fp, #0
 8001464:	d125      	bne.n	80014b2 <__gnu_unwind_pr_common+0x15e>
 8001466:	b1a8      	cbz	r0, 8001494 <__gnu_unwind_pr_common+0x140>
 8001468:	e894 000c 	ldmia.w	r4, {r2, r3}
 800146c:	1c99      	adds	r1, r3, #2
 800146e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001472:	d0d6      	beq.n	8001422 <__gnu_unwind_pr_common+0xce>
 8001474:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001478:	3301      	adds	r3, #1
 800147a:	9106      	str	r1, [sp, #24]
 800147c:	f000 80a3 	beq.w	80015c6 <__gnu_unwind_pr_common+0x272>
 8001480:	1d20      	adds	r0, r4, #4
 8001482:	f7ff fddd 	bl	8001040 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001486:	ab06      	add	r3, sp, #24
 8001488:	4601      	mov	r1, r0
 800148a:	4628      	mov	r0, r5
 800148c:	f3af 8000 	nop.w
 8001490:	2800      	cmp	r0, #0
 8001492:	d177      	bne.n	8001584 <__gnu_unwind_pr_common+0x230>
 8001494:	3408      	adds	r4, #8
 8001496:	e77f      	b.n	8001398 <__gnu_unwind_pr_common+0x44>
 8001498:	a907      	add	r1, sp, #28
 800149a:	4648      	mov	r0, r9
 800149c:	f000 faee 	bl	8001a7c <__gnu_unwind_execute>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d1be      	bne.n	8001422 <__gnu_unwind_pr_common+0xce>
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d15c      	bne.n	8001564 <__gnu_unwind_pr_common+0x210>
 80014aa:	2008      	movs	r0, #8
 80014ac:	b00b      	add	sp, #44	; 0x2c
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	210d      	movs	r1, #13
 80014b4:	4648      	mov	r0, r9
 80014b6:	6a2f      	ldr	r7, [r5, #32]
 80014b8:	f7ff fee0 	bl	800127c <_Unwind_GetGR>
 80014bc:	4287      	cmp	r7, r0
 80014be:	d1e9      	bne.n	8001494 <__gnu_unwind_pr_common+0x140>
 80014c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d1e6      	bne.n	8001494 <__gnu_unwind_pr_common+0x140>
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fcf0 	bl	8000eac <selfrel_offset31>
 80014cc:	210f      	movs	r1, #15
 80014ce:	4602      	mov	r2, r0
 80014d0:	4648      	mov	r0, r9
 80014d2:	f7ff fef9 	bl	80012c8 <_Unwind_SetGR>
 80014d6:	4648      	mov	r0, r9
 80014d8:	462a      	mov	r2, r5
 80014da:	2100      	movs	r1, #0
 80014dc:	f7ff fef4 	bl	80012c8 <_Unwind_SetGR>
 80014e0:	2007      	movs	r0, #7
 80014e2:	e79f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80014e4:	210d      	movs	r1, #13
 80014e6:	4648      	mov	r0, r9
 80014e8:	6a2f      	ldr	r7, [r5, #32]
 80014ea:	f7ff fec7 	bl	800127c <_Unwind_GetGR>
 80014ee:	4287      	cmp	r7, r0
 80014f0:	d058      	beq.n	80015a4 <__gnu_unwind_pr_common+0x250>
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da87      	bge.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80014f8:	3404      	adds	r4, #4
 80014fa:	e785      	b.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80014fc:	9b02      	ldr	r3, [sp, #8]
 80014fe:	b33b      	cbz	r3, 8001550 <__gnu_unwind_pr_common+0x1fc>
 8001500:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001504:	1d27      	adds	r7, r4, #4
 8001506:	f8cd b010 	str.w	fp, [sp, #16]
 800150a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800150e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001512:	9605      	str	r6, [sp, #20]
 8001514:	46a3      	mov	fp, r4
 8001516:	461c      	mov	r4, r3
 8001518:	e002      	b.n	8001520 <__gnu_unwind_pr_common+0x1cc>
 800151a:	45b2      	cmp	sl, r6
 800151c:	46b0      	mov	r8, r6
 800151e:	d016      	beq.n	800154e <__gnu_unwind_pr_common+0x1fa>
 8001520:	4638      	mov	r0, r7
 8001522:	9406      	str	r4, [sp, #24]
 8001524:	f7ff fd8c 	bl	8001040 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001528:	ab06      	add	r3, sp, #24
 800152a:	4601      	mov	r1, r0
 800152c:	2200      	movs	r2, #0
 800152e:	4628      	mov	r0, r5
 8001530:	f3af 8000 	nop.w
 8001534:	f108 0601 	add.w	r6, r8, #1
 8001538:	3704      	adds	r7, #4
 800153a:	2800      	cmp	r0, #0
 800153c:	d0ed      	beq.n	800151a <__gnu_unwind_pr_common+0x1c6>
 800153e:	9b02      	ldr	r3, [sp, #8]
 8001540:	9e05      	ldr	r6, [sp, #20]
 8001542:	4543      	cmp	r3, r8
 8001544:	465c      	mov	r4, fp
 8001546:	f8dd b010 	ldr.w	fp, [sp, #16]
 800154a:	d1d2      	bne.n	80014f2 <__gnu_unwind_pr_common+0x19e>
 800154c:	e000      	b.n	8001550 <__gnu_unwind_pr_common+0x1fc>
 800154e:	465c      	mov	r4, fp
 8001550:	4648      	mov	r0, r9
 8001552:	210d      	movs	r1, #13
 8001554:	f7ff fe92 	bl	800127c <_Unwind_GetGR>
 8001558:	9b06      	ldr	r3, [sp, #24]
 800155a:	6228      	str	r0, [r5, #32]
 800155c:	62ac      	str	r4, [r5, #40]	; 0x28
 800155e:	626b      	str	r3, [r5, #36]	; 0x24
 8001560:	2006      	movs	r0, #6
 8001562:	e75f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001564:	210f      	movs	r1, #15
 8001566:	4648      	mov	r0, r9
 8001568:	f7ff fe88 	bl	800127c <_Unwind_GetGR>
 800156c:	210e      	movs	r1, #14
 800156e:	4602      	mov	r2, r0
 8001570:	4648      	mov	r0, r9
 8001572:	f7ff fea9 	bl	80012c8 <_Unwind_SetGR>
 8001576:	4648      	mov	r0, r9
 8001578:	4a29      	ldr	r2, [pc, #164]	; (8001620 <__gnu_unwind_pr_common+0x2cc>)
 800157a:	210f      	movs	r1, #15
 800157c:	f7ff fea4 	bl	80012c8 <_Unwind_SetGR>
 8001580:	2007      	movs	r0, #7
 8001582:	e74f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001584:	4607      	mov	r7, r0
 8001586:	210d      	movs	r1, #13
 8001588:	4648      	mov	r0, r9
 800158a:	f7ff fe77 	bl	800127c <_Unwind_GetGR>
 800158e:	2f02      	cmp	r7, #2
 8001590:	6228      	str	r0, [r5, #32]
 8001592:	d11d      	bne.n	80015d0 <__gnu_unwind_pr_common+0x27c>
 8001594:	462b      	mov	r3, r5
 8001596:	9a06      	ldr	r2, [sp, #24]
 8001598:	f843 2f2c 	str.w	r2, [r3, #44]!
 800159c:	626b      	str	r3, [r5, #36]	; 0x24
 800159e:	62ac      	str	r4, [r5, #40]	; 0x28
 80015a0:	2006      	movs	r0, #6
 80015a2:	e73f      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80015a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015a6:	429c      	cmp	r4, r3
 80015a8:	d1a3      	bne.n	80014f2 <__gnu_unwind_pr_common+0x19e>
 80015aa:	2204      	movs	r2, #4
 80015ac:	2700      	movs	r7, #0
 80015ae:	18a3      	adds	r3, r4, r2
 80015b0:	9902      	ldr	r1, [sp, #8]
 80015b2:	62a9      	str	r1, [r5, #40]	; 0x28
 80015b4:	62ef      	str	r7, [r5, #44]	; 0x2c
 80015b6:	632a      	str	r2, [r5, #48]	; 0x30
 80015b8:	636b      	str	r3, [r5, #52]	; 0x34
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	42bb      	cmp	r3, r7
 80015be:	db1d      	blt.n	80015fc <__gnu_unwind_pr_common+0x2a8>
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	e720      	b.n	8001408 <__gnu_unwind_pr_common+0xb4>
 80015c6:	4648      	mov	r0, r9
 80015c8:	210d      	movs	r1, #13
 80015ca:	f7ff fe57 	bl	800127c <_Unwind_GetGR>
 80015ce:	6228      	str	r0, [r5, #32]
 80015d0:	9b06      	ldr	r3, [sp, #24]
 80015d2:	626b      	str	r3, [r5, #36]	; 0x24
 80015d4:	e7e3      	b.n	800159e <__gnu_unwind_pr_common+0x24a>
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fc68 	bl	8000eac <selfrel_offset31>
 80015dc:	3404      	adds	r4, #4
 80015de:	4606      	mov	r6, r0
 80015e0:	63ac      	str	r4, [r5, #56]	; 0x38
 80015e2:	4628      	mov	r0, r5
 80015e4:	f3af 8000 	nop.w
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f43f af1a 	beq.w	8001422 <__gnu_unwind_pr_common+0xce>
 80015ee:	4648      	mov	r0, r9
 80015f0:	4632      	mov	r2, r6
 80015f2:	210f      	movs	r1, #15
 80015f4:	f7ff fe68 	bl	80012c8 <_Unwind_SetGR>
 80015f8:	2007      	movs	r0, #7
 80015fa:	e713      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 80015fc:	4608      	mov	r0, r1
 80015fe:	3001      	adds	r0, #1
 8001600:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001604:	f7ff fc52 	bl	8000eac <selfrel_offset31>
 8001608:	210f      	movs	r1, #15
 800160a:	4602      	mov	r2, r0
 800160c:	4648      	mov	r0, r9
 800160e:	f7ff fe5b 	bl	80012c8 <_Unwind_SetGR>
 8001612:	4648      	mov	r0, r9
 8001614:	462a      	mov	r2, r5
 8001616:	4639      	mov	r1, r7
 8001618:	f7ff fe56 	bl	80012c8 <_Unwind_SetGR>
 800161c:	2007      	movs	r0, #7
 800161e:	e701      	b.n	8001424 <__gnu_unwind_pr_common+0xd0>
 8001620:	00000000 	.word	0x00000000

08001624 <__aeabi_unwind_cpp_pr0>:
 8001624:	2300      	movs	r3, #0
 8001626:	e695      	b.n	8001354 <__gnu_unwind_pr_common>

08001628 <__aeabi_unwind_cpp_pr1>:
 8001628:	2301      	movs	r3, #1
 800162a:	e693      	b.n	8001354 <__gnu_unwind_pr_common>

0800162c <__aeabi_unwind_cpp_pr2>:
 800162c:	2302      	movs	r3, #2
 800162e:	e691      	b.n	8001354 <__gnu_unwind_pr_common>

08001630 <_Unwind_VRS_Pop>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	b0c5      	sub	sp, #276	; 0x114
 8001636:	2904      	cmp	r1, #4
 8001638:	d80d      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 800163a:	e8df f001 	tbb	[pc, r1]
 800163e:	0353      	.short	0x0353
 8001640:	310c      	.short	0x310c
 8001642:	0f          	.byte	0x0f
 8001643:	00          	.byte	0x00
 8001644:	2b01      	cmp	r3, #1
 8001646:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800164a:	b295      	uxth	r5, r2
 800164c:	d162      	bne.n	8001714 <_Unwind_VRS_Pop+0xe4>
 800164e:	1972      	adds	r2, r6, r5
 8001650:	2a10      	cmp	r2, #16
 8001652:	f240 809b 	bls.w	800178c <_Unwind_VRS_Pop+0x15c>
 8001656:	2002      	movs	r0, #2
 8001658:	b045      	add	sp, #276	; 0x114
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1fa      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001660:	2a10      	cmp	r2, #16
 8001662:	d8f8      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	06d8      	lsls	r0, r3, #27
 8001668:	f100 80c6 	bmi.w	80017f8 <_Unwind_VRS_Pop+0x1c8>
 800166c:	ae22      	add	r6, sp, #136	; 0x88
 800166e:	4630      	mov	r0, r6
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	f000 f973 	bl	800195c <__gnu_Unwind_Save_WMMXC>
 8001676:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	2300      	movs	r3, #0
 800167c:	2501      	movs	r5, #1
 800167e:	fa05 f103 	lsl.w	r1, r5, r3
 8001682:	4211      	tst	r1, r2
 8001684:	d003      	beq.n	800168e <_Unwind_VRS_Pop+0x5e>
 8001686:	6801      	ldr	r1, [r0, #0]
 8001688:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800168c:	3004      	adds	r0, #4
 800168e:	3301      	adds	r3, #1
 8001690:	2b04      	cmp	r3, #4
 8001692:	d1f4      	bne.n	800167e <_Unwind_VRS_Pop+0x4e>
 8001694:	63a0      	str	r0, [r4, #56]	; 0x38
 8001696:	4630      	mov	r0, r6
 8001698:	f000 f956 	bl	8001948 <__gnu_Unwind_Restore_WMMXC>
 800169c:	2000      	movs	r0, #0
 800169e:	e7db      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d1d8      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016a4:	0c15      	lsrs	r5, r2, #16
 80016a6:	b297      	uxth	r7, r2
 80016a8:	19eb      	adds	r3, r5, r7
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d8d3      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	071e      	lsls	r6, r3, #28
 80016b2:	f100 80b5 	bmi.w	8001820 <_Unwind_VRS_Pop+0x1f0>
 80016b6:	ae22      	add	r6, sp, #136	; 0x88
 80016b8:	4630      	mov	r0, r6
 80016ba:	f000 f923 	bl	8001904 <__gnu_Unwind_Save_WMMXD>
 80016be:	00ed      	lsls	r5, r5, #3
 80016c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016c2:	b14f      	cbz	r7, 80016d8 <_Unwind_VRS_Pop+0xa8>
 80016c4:	3d04      	subs	r5, #4
 80016c6:	1971      	adds	r1, r6, r5
 80016c8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80016cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80016d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80016d4:	4283      	cmp	r3, r0
 80016d6:	d1f9      	bne.n	80016cc <_Unwind_VRS_Pop+0x9c>
 80016d8:	4630      	mov	r0, r6
 80016da:	63a3      	str	r3, [r4, #56]	; 0x38
 80016dc:	f000 f8f0 	bl	80018c0 <__gnu_Unwind_Restore_WMMXD>
 80016e0:	2000      	movs	r0, #0
 80016e2:	e7b9      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1b6      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 80016e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80016ea:	b297      	uxth	r7, r2
 80016ec:	1d20      	adds	r0, r4, #4
 80016ee:	2601      	movs	r6, #1
 80016f0:	fa06 f103 	lsl.w	r1, r6, r3
 80016f4:	4239      	tst	r1, r7
 80016f6:	f103 0301 	add.w	r3, r3, #1
 80016fa:	d002      	beq.n	8001702 <_Unwind_VRS_Pop+0xd2>
 80016fc:	6829      	ldr	r1, [r5, #0]
 80016fe:	6001      	str	r1, [r0, #0]
 8001700:	3504      	adds	r5, #4
 8001702:	2b10      	cmp	r3, #16
 8001704:	f100 0004 	add.w	r0, r0, #4
 8001708:	d1f2      	bne.n	80016f0 <_Unwind_VRS_Pop+0xc0>
 800170a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800170e:	d13b      	bne.n	8001788 <_Unwind_VRS_Pop+0x158>
 8001710:	63a5      	str	r5, [r4, #56]	; 0x38
 8001712:	e7a1      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 8001714:	2b05      	cmp	r3, #5
 8001716:	d19e      	bne.n	8001656 <_Unwind_VRS_Pop+0x26>
 8001718:	1977      	adds	r7, r6, r5
 800171a:	2f20      	cmp	r7, #32
 800171c:	d89b      	bhi.n	8001656 <_Unwind_VRS_Pop+0x26>
 800171e:	2e0f      	cmp	r6, #15
 8001720:	d966      	bls.n	80017f0 <_Unwind_VRS_Pop+0x1c0>
 8001722:	462f      	mov	r7, r5
 8001724:	2d00      	cmp	r5, #0
 8001726:	d13a      	bne.n	800179e <_Unwind_VRS_Pop+0x16e>
 8001728:	462a      	mov	r2, r5
 800172a:	2700      	movs	r7, #0
 800172c:	2a00      	cmp	r2, #0
 800172e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001730:	dd72      	ble.n	8001818 <_Unwind_VRS_Pop+0x1e8>
 8001732:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001736:	4601      	mov	r1, r0
 8001738:	a844      	add	r0, sp, #272	; 0x110
 800173a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800173e:	388c      	subs	r0, #140	; 0x8c
 8001740:	f851 5b04 	ldr.w	r5, [r1], #4
 8001744:	f840 5f04 	str.w	r5, [r0, #4]!
 8001748:	4291      	cmp	r1, r2
 800174a:	d1f9      	bne.n	8001740 <_Unwind_VRS_Pop+0x110>
 800174c:	4608      	mov	r0, r1
 800174e:	b197      	cbz	r7, 8001776 <_Unwind_VRS_Pop+0x146>
 8001750:	2e10      	cmp	r6, #16
 8001752:	4632      	mov	r2, r6
 8001754:	a944      	add	r1, sp, #272	; 0x110
 8001756:	bf38      	it	cc
 8001758:	2210      	movcc	r2, #16
 800175a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800175e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001762:	0079      	lsls	r1, r7, #1
 8001764:	3a04      	subs	r2, #4
 8001766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800176a:	f850 5b04 	ldr.w	r5, [r0], #4
 800176e:	f842 5f04 	str.w	r5, [r2, #4]!
 8001772:	4288      	cmp	r0, r1
 8001774:	d1f9      	bne.n	800176a <_Unwind_VRS_Pop+0x13a>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d048      	beq.n	800180c <_Unwind_VRS_Pop+0x1dc>
 800177a:	2e0f      	cmp	r6, #15
 800177c:	63a1      	str	r1, [r4, #56]	; 0x38
 800177e:	d933      	bls.n	80017e8 <_Unwind_VRS_Pop+0x1b8>
 8001780:	b117      	cbz	r7, 8001788 <_Unwind_VRS_Pop+0x158>
 8001782:	a802      	add	r0, sp, #8
 8001784:	f000 f894 	bl	80018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001788:	2000      	movs	r0, #0
 800178a:	e765      	b.n	8001658 <_Unwind_VRS_Pop+0x28>
 800178c:	2e0f      	cmp	r6, #15
 800178e:	f63f af62 	bhi.w	8001656 <_Unwind_VRS_Pop+0x26>
 8001792:	2700      	movs	r7, #0
 8001794:	6822      	ldr	r2, [r4, #0]
 8001796:	07d1      	lsls	r1, r2, #31
 8001798:	d417      	bmi.n	80017ca <_Unwind_VRS_Pop+0x19a>
 800179a:	2f00      	cmp	r7, #0
 800179c:	d060      	beq.n	8001860 <_Unwind_VRS_Pop+0x230>
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	0751      	lsls	r1, r2, #29
 80017a2:	d445      	bmi.n	8001830 <_Unwind_VRS_Pop+0x200>
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d04d      	beq.n	8001844 <_Unwind_VRS_Pop+0x214>
 80017a8:	2e0f      	cmp	r6, #15
 80017aa:	d806      	bhi.n	80017ba <_Unwind_VRS_Pop+0x18a>
 80017ac:	a822      	add	r0, sp, #136	; 0x88
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f000 f87a 	bl	80018a8 <__gnu_Unwind_Save_VFP_D>
 80017b4:	9b01      	ldr	r3, [sp, #4]
 80017b6:	2f00      	cmp	r7, #0
 80017b8:	d0b6      	beq.n	8001728 <_Unwind_VRS_Pop+0xf8>
 80017ba:	a802      	add	r0, sp, #8
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f000 f87b 	bl	80018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	f1c6 0210 	rsb	r2, r6, #16
 80017c8:	e7b0      	b.n	800172c <_Unwind_VRS_Pop+0xfc>
 80017ca:	f022 0101 	bic.w	r1, r2, #1
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	6021      	str	r1, [r4, #0]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	4620      	mov	r0, r4
 80017d6:	d03b      	beq.n	8001850 <_Unwind_VRS_Pop+0x220>
 80017d8:	f022 0203 	bic.w	r2, r2, #3
 80017dc:	f840 2b48 	str.w	r2, [r0], #72
 80017e0:	f000 f85a 	bl	8001898 <__gnu_Unwind_Save_VFP>
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	e7d8      	b.n	800179a <_Unwind_VRS_Pop+0x16a>
 80017e8:	a822      	add	r0, sp, #136	; 0x88
 80017ea:	f000 f859 	bl	80018a0 <__gnu_Unwind_Restore_VFP_D>
 80017ee:	e7c7      	b.n	8001780 <_Unwind_VRS_Pop+0x150>
 80017f0:	2f10      	cmp	r7, #16
 80017f2:	d9ce      	bls.n	8001792 <_Unwind_VRS_Pop+0x162>
 80017f4:	3f10      	subs	r7, #16
 80017f6:	e7cd      	b.n	8001794 <_Unwind_VRS_Pop+0x164>
 80017f8:	f023 0310 	bic.w	r3, r3, #16
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	f000 f8aa 	bl	800195c <__gnu_Unwind_Save_WMMXC>
 8001808:	9a01      	ldr	r2, [sp, #4]
 800180a:	e72f      	b.n	800166c <_Unwind_VRS_Pop+0x3c>
 800180c:	3104      	adds	r1, #4
 800180e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001810:	a822      	add	r0, sp, #136	; 0x88
 8001812:	f000 f83d 	bl	8001890 <__gnu_Unwind_Restore_VFP>
 8001816:	e7b7      	b.n	8001788 <_Unwind_VRS_Pop+0x158>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d199      	bne.n	8001750 <_Unwind_VRS_Pop+0x120>
 800181c:	4601      	mov	r1, r0
 800181e:	e7aa      	b.n	8001776 <_Unwind_VRS_Pop+0x146>
 8001820:	f023 0308 	bic.w	r3, r3, #8
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800182a:	f000 f86b 	bl	8001904 <__gnu_Unwind_Save_WMMXD>
 800182e:	e742      	b.n	80016b6 <_Unwind_VRS_Pop+0x86>
 8001830:	4620      	mov	r0, r4
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	f840 2bd0 	str.w	r2, [r0], #208
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f000 f83c 	bl	80018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	e7af      	b.n	80017a4 <_Unwind_VRS_Pop+0x174>
 8001844:	a822      	add	r0, sp, #136	; 0x88
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	f000 f826 	bl	8001898 <__gnu_Unwind_Save_VFP>
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	e7b9      	b.n	80017c4 <_Unwind_VRS_Pop+0x194>
 8001850:	f041 0102 	orr.w	r1, r1, #2
 8001854:	f840 1b48 	str.w	r1, [r0], #72
 8001858:	f000 f826 	bl	80018a8 <__gnu_Unwind_Save_VFP_D>
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	e79c      	b.n	800179a <_Unwind_VRS_Pop+0x16a>
 8001860:	2b01      	cmp	r3, #1
 8001862:	d003      	beq.n	800186c <_Unwind_VRS_Pop+0x23c>
 8001864:	2e0f      	cmp	r6, #15
 8001866:	f63f af5f 	bhi.w	8001728 <_Unwind_VRS_Pop+0xf8>
 800186a:	e79f      	b.n	80017ac <_Unwind_VRS_Pop+0x17c>
 800186c:	a822      	add	r0, sp, #136	; 0x88
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	f000 f812 	bl	8001898 <__gnu_Unwind_Save_VFP>
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	e757      	b.n	8001728 <_Unwind_VRS_Pop+0xf8>

08001878 <__restore_core_regs>:
 8001878:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800187c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001880:	469c      	mov	ip, r3
 8001882:	46a6      	mov	lr, r4
 8001884:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001888:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800188c:	46e5      	mov	sp, ip
 800188e:	bd00      	pop	{pc}

08001890 <__gnu_Unwind_Restore_VFP>:
 8001890:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <__gnu_Unwind_Save_VFP>:
 8001898:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <__gnu_Unwind_Restore_VFP_D>:
 80018a0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <__gnu_Unwind_Save_VFP_D>:
 80018a8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80018b0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80018b8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <__gnu_Unwind_Restore_WMMXD>:
 80018c0:	ecf0 0102 	ldfe	f0, [r0], #8
 80018c4:	ecf0 1102 	ldfe	f1, [r0], #8
 80018c8:	ecf0 2102 	ldfe	f2, [r0], #8
 80018cc:	ecf0 3102 	ldfe	f3, [r0], #8
 80018d0:	ecf0 4102 	ldfe	f4, [r0], #8
 80018d4:	ecf0 5102 	ldfe	f5, [r0], #8
 80018d8:	ecf0 6102 	ldfe	f6, [r0], #8
 80018dc:	ecf0 7102 	ldfe	f7, [r0], #8
 80018e0:	ecf0 8102 	ldfp	f0, [r0], #8
 80018e4:	ecf0 9102 	ldfp	f1, [r0], #8
 80018e8:	ecf0 a102 	ldfp	f2, [r0], #8
 80018ec:	ecf0 b102 	ldfp	f3, [r0], #8
 80018f0:	ecf0 c102 	ldfp	f4, [r0], #8
 80018f4:	ecf0 d102 	ldfp	f5, [r0], #8
 80018f8:	ecf0 e102 	ldfp	f6, [r0], #8
 80018fc:	ecf0 f102 	ldfp	f7, [r0], #8
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <__gnu_Unwind_Save_WMMXD>:
 8001904:	ece0 0102 	stfe	f0, [r0], #8
 8001908:	ece0 1102 	stfe	f1, [r0], #8
 800190c:	ece0 2102 	stfe	f2, [r0], #8
 8001910:	ece0 3102 	stfe	f3, [r0], #8
 8001914:	ece0 4102 	stfe	f4, [r0], #8
 8001918:	ece0 5102 	stfe	f5, [r0], #8
 800191c:	ece0 6102 	stfe	f6, [r0], #8
 8001920:	ece0 7102 	stfe	f7, [r0], #8
 8001924:	ece0 8102 	stfp	f0, [r0], #8
 8001928:	ece0 9102 	stfp	f1, [r0], #8
 800192c:	ece0 a102 	stfp	f2, [r0], #8
 8001930:	ece0 b102 	stfp	f3, [r0], #8
 8001934:	ece0 c102 	stfp	f4, [r0], #8
 8001938:	ece0 d102 	stfp	f5, [r0], #8
 800193c:	ece0 e102 	stfp	f6, [r0], #8
 8001940:	ece0 f102 	stfp	f7, [r0], #8
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <__gnu_Unwind_Restore_WMMXC>:
 8001948:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800194c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001950:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001954:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <__gnu_Unwind_Save_WMMXC>:
 800195c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001960:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001964:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001968:	fca0 b101 	stc2	1, cr11, [r0], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <_Unwind_RaiseException>:
 8001970:	46ec      	mov	ip, sp
 8001972:	b500      	push	{lr}
 8001974:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001978:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001984:	a901      	add	r1, sp, #4
 8001986:	f7ff fbf3 	bl	8001170 <__gnu_Unwind_RaiseException>
 800198a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800198e:	b012      	add	sp, #72	; 0x48
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <_Unwind_Resume>:
 8001994:	46ec      	mov	ip, sp
 8001996:	b500      	push	{lr}
 8001998:	e92d 5000 	stmdb	sp!, {ip, lr}
 800199c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019a8:	a901      	add	r1, sp, #4
 80019aa:	f7ff fc1b 	bl	80011e4 <__gnu_Unwind_Resume>
 80019ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019b2:	b012      	add	sp, #72	; 0x48
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <_Unwind_Resume_or_Rethrow>:
 80019b8:	46ec      	mov	ip, sp
 80019ba:	b500      	push	{lr}
 80019bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019cc:	a901      	add	r1, sp, #4
 80019ce:	f7ff fc2b 	bl	8001228 <__gnu_Unwind_Resume_or_Rethrow>
 80019d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019d6:	b012      	add	sp, #72	; 0x48
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <_Unwind_ForcedUnwind>:
 80019dc:	46ec      	mov	ip, sp
 80019de:	b500      	push	{lr}
 80019e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f0:	ab01      	add	r3, sp, #4
 80019f2:	f7ff fbed 	bl	80011d0 <__gnu_Unwind_ForcedUnwind>
 80019f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019fa:	b012      	add	sp, #72	; 0x48
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <_Unwind_Backtrace>:
 8001a00:	46ec      	mov	ip, sp
 8001a02:	b500      	push	{lr}
 8001a04:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a08:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a14:	aa01      	add	r2, sp, #4
 8001a16:	f7ff fc65 	bl	80012e4 <__gnu_Unwind_Backtrace>
 8001a1a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a1e:	b012      	add	sp, #72	; 0x48
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <next_unwind_byte>:
 8001a24:	7a02      	ldrb	r2, [r0, #8]
 8001a26:	b91a      	cbnz	r2, 8001a30 <next_unwind_byte+0xc>
 8001a28:	7a43      	ldrb	r3, [r0, #9]
 8001a2a:	b943      	cbnz	r3, 8001a3e <next_unwind_byte+0x1a>
 8001a2c:	20b0      	movs	r0, #176	; 0xb0
 8001a2e:	4770      	bx	lr
 8001a30:	6803      	ldr	r3, [r0, #0]
 8001a32:	3a01      	subs	r2, #1
 8001a34:	7202      	strb	r2, [r0, #8]
 8001a36:	021a      	lsls	r2, r3, #8
 8001a38:	6002      	str	r2, [r0, #0]
 8001a3a:	0e18      	lsrs	r0, r3, #24
 8001a3c:	4770      	bx	lr
 8001a3e:	6842      	ldr	r2, [r0, #4]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b410      	push	{r4}
 8001a44:	7243      	strb	r3, [r0, #9]
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	2103      	movs	r1, #3
 8001a4a:	1d14      	adds	r4, r2, #4
 8001a4c:	7201      	strb	r1, [r0, #8]
 8001a4e:	021a      	lsls	r2, r3, #8
 8001a50:	6044      	str	r4, [r0, #4]
 8001a52:	6002      	str	r2, [r0, #0]
 8001a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a58:	0e18      	lsrs	r0, r3, #24
 8001a5a:	4770      	bx	lr

08001a5c <_Unwind_GetGR.constprop.0>:
 8001a5c:	b500      	push	{lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	aa03      	add	r2, sp, #12
 8001a62:	2300      	movs	r3, #0
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	220c      	movs	r2, #12
 8001a6a:	f7ff fbed 	bl	8001248 <_Unwind_VRS_Get>
 8001a6e:	9803      	ldr	r0, [sp, #12]
 8001a70:	b005      	add	sp, #20
 8001a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a76:	bf00      	nop

08001a78 <unwind_UCB_from_context>:
 8001a78:	e7f0      	b.n	8001a5c <_Unwind_GetGR.constprop.0>
 8001a7a:	bf00      	nop

08001a7c <__gnu_unwind_execute>:
 8001a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a80:	4606      	mov	r6, r0
 8001a82:	b085      	sub	sp, #20
 8001a84:	460f      	mov	r7, r1
 8001a86:	f04f 0800 	mov.w	r8, #0
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	f7ff ffca 	bl	8001a24 <next_unwind_byte>
 8001a90:	28b0      	cmp	r0, #176	; 0xb0
 8001a92:	4604      	mov	r4, r0
 8001a94:	d023      	beq.n	8001ade <__gnu_unwind_execute+0x62>
 8001a96:	0605      	lsls	r5, r0, #24
 8001a98:	d427      	bmi.n	8001aea <__gnu_unwind_execute+0x6e>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f10d 090c 	add.w	r9, sp, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	0085      	lsls	r5, r0, #2
 8001aa4:	220d      	movs	r2, #13
 8001aa6:	f8cd 9000 	str.w	r9, [sp]
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f7ff fbcc 	bl	8001248 <_Unwind_VRS_Get>
 8001ab0:	b2ed      	uxtb	r5, r5
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	f8cd 9000 	str.w	r9, [sp]
 8001ab8:	0660      	lsls	r0, r4, #25
 8001aba:	f105 0504 	add.w	r5, r5, #4
 8001abe:	bf4c      	ite	mi
 8001ac0:	1b5d      	submi	r5, r3, r5
 8001ac2:	18ed      	addpl	r5, r5, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	220d      	movs	r2, #13
 8001aca:	4630      	mov	r0, r6
 8001acc:	9503      	str	r5, [sp, #12]
 8001ace:	f7ff fbe1 	bl	8001294 <_Unwind_VRS_Set>
 8001ad2:	4638      	mov	r0, r7
 8001ad4:	f7ff ffa6 	bl	8001a24 <next_unwind_byte>
 8001ad8:	28b0      	cmp	r0, #176	; 0xb0
 8001ada:	4604      	mov	r4, r0
 8001adc:	d1db      	bne.n	8001a96 <__gnu_unwind_execute+0x1a>
 8001ade:	f1b8 0f00 	cmp.w	r8, #0
 8001ae2:	f000 8095 	beq.w	8001c10 <__gnu_unwind_execute+0x194>
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	e01c      	b.n	8001b24 <__gnu_unwind_execute+0xa8>
 8001aea:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001aee:	2b80      	cmp	r3, #128	; 0x80
 8001af0:	d05d      	beq.n	8001bae <__gnu_unwind_execute+0x132>
 8001af2:	2b90      	cmp	r3, #144	; 0x90
 8001af4:	d019      	beq.n	8001b2a <__gnu_unwind_execute+0xae>
 8001af6:	2ba0      	cmp	r3, #160	; 0xa0
 8001af8:	d02c      	beq.n	8001b54 <__gnu_unwind_execute+0xd8>
 8001afa:	2bb0      	cmp	r3, #176	; 0xb0
 8001afc:	d03f      	beq.n	8001b7e <__gnu_unwind_execute+0x102>
 8001afe:	2bc0      	cmp	r3, #192	; 0xc0
 8001b00:	d06c      	beq.n	8001bdc <__gnu_unwind_execute+0x160>
 8001b02:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b06:	2bd0      	cmp	r3, #208	; 0xd0
 8001b08:	d10b      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b0a:	f000 0207 	and.w	r2, r0, #7
 8001b0e:	3201      	adds	r2, #1
 8001b10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b14:	2305      	movs	r3, #5
 8001b16:	2101      	movs	r1, #1
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f7ff fd89 	bl	8001630 <_Unwind_VRS_Pop>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d0b3      	beq.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b22:	2009      	movs	r0, #9
 8001b24:	b005      	add	sp, #20
 8001b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2a:	f000 030d 	and.w	r3, r0, #13
 8001b2e:	2b0d      	cmp	r3, #13
 8001b30:	d0f7      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b32:	ad03      	add	r5, sp, #12
 8001b34:	2300      	movs	r3, #0
 8001b36:	f000 020f 	and.w	r2, r0, #15
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	9500      	str	r5, [sp, #0]
 8001b3e:	4630      	mov	r0, r6
 8001b40:	f7ff fb82 	bl	8001248 <_Unwind_VRS_Get>
 8001b44:	2300      	movs	r3, #0
 8001b46:	9500      	str	r5, [sp, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	220d      	movs	r2, #13
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff fba1 	bl	8001294 <_Unwind_VRS_Set>
 8001b52:	e79a      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b54:	43c2      	mvns	r2, r0
 8001b56:	f002 0307 	and.w	r3, r2, #7
 8001b5a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001b5e:	411a      	asrs	r2, r3
 8001b60:	0701      	lsls	r1, r0, #28
 8001b62:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	bf48      	it	mi
 8001b6c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001b70:	4619      	mov	r1, r3
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7ff fd5c 	bl	8001630 <_Unwind_VRS_Pop>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d1d2      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b7c:	e785      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001b7e:	28b1      	cmp	r0, #177	; 0xb1
 8001b80:	d057      	beq.n	8001c32 <__gnu_unwind_execute+0x1b6>
 8001b82:	28b2      	cmp	r0, #178	; 0xb2
 8001b84:	d068      	beq.n	8001c58 <__gnu_unwind_execute+0x1dc>
 8001b86:	28b3      	cmp	r0, #179	; 0xb3
 8001b88:	f000 8095 	beq.w	8001cb6 <__gnu_unwind_execute+0x23a>
 8001b8c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001b90:	2bb4      	cmp	r3, #180	; 0xb4
 8001b92:	d0c6      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001b94:	f000 0207 	and.w	r2, r0, #7
 8001b98:	3201      	adds	r2, #1
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f7ff fd44 	bl	8001630 <_Unwind_VRS_Pop>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d1ba      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bac:	e76d      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001bae:	4638      	mov	r0, r7
 8001bb0:	f7ff ff38 	bl	8001a24 <next_unwind_byte>
 8001bb4:	0224      	lsls	r4, r4, #8
 8001bb6:	4304      	orrs	r4, r0
 8001bb8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001bbc:	d0b1      	beq.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bbe:	0124      	lsls	r4, r4, #4
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	b2a2      	uxth	r2, r4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff fd32 	bl	8001630 <_Unwind_VRS_Pop>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1a8      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bd0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001bd4:	bf18      	it	ne
 8001bd6:	f04f 0801 	movne.w	r8, #1
 8001bda:	e756      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001bdc:	28c6      	cmp	r0, #198	; 0xc6
 8001bde:	d07d      	beq.n	8001cdc <__gnu_unwind_execute+0x260>
 8001be0:	28c7      	cmp	r0, #199	; 0xc7
 8001be2:	f000 8086 	beq.w	8001cf2 <__gnu_unwind_execute+0x276>
 8001be6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001bea:	2bc0      	cmp	r3, #192	; 0xc0
 8001bec:	f000 8094 	beq.w	8001d18 <__gnu_unwind_execute+0x29c>
 8001bf0:	28c8      	cmp	r0, #200	; 0xc8
 8001bf2:	f000 809f 	beq.w	8001d34 <__gnu_unwind_execute+0x2b8>
 8001bf6:	28c9      	cmp	r0, #201	; 0xc9
 8001bf8:	d193      	bne.n	8001b22 <__gnu_unwind_execute+0xa6>
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f7ff ff12 	bl	8001a24 <next_unwind_byte>
 8001c00:	0302      	lsls	r2, r0, #12
 8001c02:	f000 000f 	and.w	r0, r0, #15
 8001c06:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	e781      	b.n	8001b14 <__gnu_unwind_execute+0x98>
 8001c10:	ac03      	add	r4, sp, #12
 8001c12:	4643      	mov	r3, r8
 8001c14:	220e      	movs	r2, #14
 8001c16:	4641      	mov	r1, r8
 8001c18:	9400      	str	r4, [sp, #0]
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff fb14 	bl	8001248 <_Unwind_VRS_Get>
 8001c20:	9400      	str	r4, [sp, #0]
 8001c22:	4630      	mov	r0, r6
 8001c24:	4643      	mov	r3, r8
 8001c26:	220f      	movs	r2, #15
 8001c28:	4641      	mov	r1, r8
 8001c2a:	f7ff fb33 	bl	8001294 <_Unwind_VRS_Set>
 8001c2e:	4640      	mov	r0, r8
 8001c30:	e778      	b.n	8001b24 <__gnu_unwind_execute+0xa8>
 8001c32:	4638      	mov	r0, r7
 8001c34:	f7ff fef6 	bl	8001a24 <next_unwind_byte>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	f43f af72 	beq.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c3e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001c42:	f47f af6e 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f7ff fcf0 	bl	8001630 <_Unwind_VRS_Pop>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f47f af66 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001c56:	e718      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f10d 090c 	add.w	r9, sp, #12
 8001c5e:	220d      	movs	r2, #13
 8001c60:	4619      	mov	r1, r3
 8001c62:	f8cd 9000 	str.w	r9, [sp]
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff faee 	bl	8001248 <_Unwind_VRS_Get>
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	f7ff fed9 	bl	8001a24 <next_unwind_byte>
 8001c72:	0602      	lsls	r2, r0, #24
 8001c74:	f04f 0402 	mov.w	r4, #2
 8001c78:	d50c      	bpl.n	8001c94 <__gnu_unwind_execute+0x218>
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001c80:	40a0      	lsls	r0, r4
 8001c82:	4403      	add	r3, r0
 8001c84:	4638      	mov	r0, r7
 8001c86:	9303      	str	r3, [sp, #12]
 8001c88:	f7ff fecc 	bl	8001a24 <next_unwind_byte>
 8001c8c:	0603      	lsls	r3, r0, #24
 8001c8e:	f104 0407 	add.w	r4, r4, #7
 8001c92:	d4f2      	bmi.n	8001c7a <__gnu_unwind_execute+0x1fe>
 8001c94:	9b03      	ldr	r3, [sp, #12]
 8001c96:	f8cd 9000 	str.w	r9, [sp]
 8001c9a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001c9e:	40a2      	lsls	r2, r4
 8001ca0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4414      	add	r4, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	220d      	movs	r2, #13
 8001cac:	4630      	mov	r0, r6
 8001cae:	9403      	str	r4, [sp, #12]
 8001cb0:	f7ff faf0 	bl	8001294 <_Unwind_VRS_Set>
 8001cb4:	e6e9      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	f7ff feb4 	bl	8001a24 <next_unwind_byte>
 8001cbc:	0301      	lsls	r1, r0, #12
 8001cbe:	f000 000f 	and.w	r0, r0, #15
 8001cc2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cc6:	1c42      	adds	r2, r0, #1
 8001cc8:	2301      	movs	r3, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	4630      	mov	r0, r6
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7ff fcae 	bl	8001630 <_Unwind_VRS_Pop>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	f47f af24 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001cda:	e6d6      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001cdc:	4638      	mov	r0, r7
 8001cde:	f7ff fea1 	bl	8001a24 <next_unwind_byte>
 8001ce2:	0301      	lsls	r1, r0, #12
 8001ce4:	f000 000f 	and.w	r0, r0, #15
 8001ce8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cec:	1c42      	adds	r2, r0, #1
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e7eb      	b.n	8001cca <__gnu_unwind_execute+0x24e>
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fe96 	bl	8001a24 <next_unwind_byte>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af12 	beq.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001cfe:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d02:	f47f af0e 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d06:	4602      	mov	r2, r0
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7ff fc90 	bl	8001630 <_Unwind_VRS_Pop>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	f47f af06 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d16:	e6b8      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001d18:	f000 020f 	and.w	r2, r0, #15
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	2303      	movs	r3, #3
 8001d20:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d24:	4619      	mov	r1, r3
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fc82 	bl	8001630 <_Unwind_VRS_Pop>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f47f aef8 	bne.w	8001b22 <__gnu_unwind_execute+0xa6>
 8001d32:	e6aa      	b.n	8001a8a <__gnu_unwind_execute+0xe>
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff fe75 	bl	8001a24 <next_unwind_byte>
 8001d3a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d3e:	f000 030f 	and.w	r3, r0, #15
 8001d42:	3210      	adds	r2, #16
 8001d44:	3301      	adds	r3, #1
 8001d46:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d4a:	e6e3      	b.n	8001b14 <__gnu_unwind_execute+0x98>

08001d4c <__gnu_unwind_frame>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d50:	b084      	sub	sp, #16
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2003      	movs	r0, #3
 8001d56:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d5a:	79dc      	ldrb	r4, [r3, #7]
 8001d5c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d60:	0212      	lsls	r2, r2, #8
 8001d62:	3308      	adds	r3, #8
 8001d64:	4608      	mov	r0, r1
 8001d66:	a901      	add	r1, sp, #4
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	f7ff fe86 	bl	8001a7c <__gnu_unwind_execute>
 8001d70:	b004      	add	sp, #16
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <_Unwind_GetRegionStart>:
 8001d74:	b508      	push	{r3, lr}
 8001d76:	f7ff fe7f 	bl	8001a78 <unwind_UCB_from_context>
 8001d7a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001d7c:	bd08      	pop	{r3, pc}
 8001d7e:	bf00      	nop

08001d80 <_Unwind_GetLanguageSpecificData>:
 8001d80:	b508      	push	{r3, lr}
 8001d82:	f7ff fe79 	bl	8001a78 <unwind_UCB_from_context>
 8001d86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001d88:	79c3      	ldrb	r3, [r0, #7]
 8001d8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001d8e:	3008      	adds	r0, #8
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop

08001d94 <_Unwind_GetTextRelBase>:
 8001d94:	b508      	push	{r3, lr}
 8001d96:	f008 fea2 	bl	800aade <abort>
 8001d9a:	bf00      	nop

08001d9c <_Unwind_GetDataRelBase>:
 8001d9c:	b508      	push	{r3, lr}
 8001d9e:	f7ff fff9 	bl	8001d94 <_Unwind_GetTextRelBase>
 8001da2:	bf00      	nop

08001da4 <__aeabi_idiv0>:
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_Init+0x28>)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x28>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f001 fb8f 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f004 fe2c 	bl	8006a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fba7 	bl	8003546 <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f001 fb6f 	bl	80034f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000004 	.word	0x20000004
 8001e58:	2000071c 	.word	0x2000071c

08001e5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000071c 	.word	0x2000071c

08001e74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b09c      	sub	sp, #112	; 0x70
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e170      	b.n	80021b2 <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d176      	bne.n	8001fd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d152      	bne.n	8001f90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f004 f9d1 	bl	80062ac <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13b      	bne.n	8001f90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fe79 	bl	8002c10 <ADC_Disable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d12f      	bne.n	8001f90 <HAL_ADC_Init+0xe0>
 8001f30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d12b      	bne.n	8001f90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f40:	f023 0302 	bic.w	r3, r3, #2
 8001f44:	f043 0202 	orr.w	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	6892      	ldr	r2, [r2, #8]
 8001f66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6c:	4b93      	ldr	r3, [pc, #588]	; (80021bc <HAL_ADC_Init+0x30c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a93      	ldr	r2, [pc, #588]	; (80021c0 <HAL_ADC_Init+0x310>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9a      	lsrs	r2, r3, #18
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001f82:	e002      	b.n	8001f8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fac:	d110      	bne.n	8001fd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f023 0312 	bic.w	r3, r3, #18
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 80dd 	bne.w	8002198 <HAL_ADC_Init+0x2e8>
 8001fde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80d8 	bne.w	8002198 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 80d0 	bne.w	8002198 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002000:	f043 0202 	orr.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <HAL_ADC_Init+0x314>)
 800200a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002014:	d102      	bne.n	800201c <HAL_ADC_Init+0x16c>
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <HAL_ADC_Init+0x318>)
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e002      	b.n	8002022 <HAL_ADC_Init+0x172>
 800201c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002020:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_ADC_Init+0x192>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x192>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_ADC_Init+0x194>
 8002042:	2300      	movs	r3, #0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11c      	bne.n	8002082 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002048:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_ADC_Init+0x1ba>
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x1ba>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_ADC_Init+0x1bc>
 800206a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002080:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	035a      	lsls	r2, r3, #13
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	2b01      	cmp	r3, #1
 800208e:	d002      	beq.n	8002096 <HAL_ADC_Init+0x1e6>
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	e000      	b.n	8002098 <HAL_ADC_Init+0x1e8>
 8002096:	2300      	movs	r3, #0
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020a8:	4313      	orrs	r3, r2
 80020aa:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d11b      	bne.n	80020ec <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	045a      	lsls	r2, r3, #17
 80020c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ce:	e00d      	b.n	80020ec <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d007      	beq.n	8002104 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002100:	4313      	orrs	r3, r2
 8002102:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d113      	bne.n	800213a <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	039a      	lsls	r2, r3, #14
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4313      	orrs	r3, r2
 8002134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002136:	4313      	orrs	r3, r2
 8002138:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_ADC_Init+0x31c>)
 8002146:	400b      	ands	r3, r1
 8002148:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800214a:	430b      	orrs	r3, r1
 800214c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10c      	bne.n	8002170 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002160:	f022 010f 	bic.w	r1, r2, #15
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6a12      	ldr	r2, [r2, #32]
 8002168:	3a01      	subs	r2, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e007      	b.n	8002180 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800217a:	f022 020f 	bic.w	r2, r2, #15
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
 8002196:	e00a      	b.n	80021ae <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f023 0312 	bic.w	r3, r3, #18
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80021ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3770      	adds	r7, #112	; 0x70
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000008 	.word	0x20000008
 80021c0:	431bde83 	.word	0x431bde83
 80021c4:	50000300 	.word	0x50000300
 80021c8:	50000100 	.word	0x50000100
 80021cc:	fff0c007 	.word	0xfff0c007

080021d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80b9 	bne.w	8002362 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Start_DMA+0x2e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0b4      	b.n	8002368 <HAL_ADC_Start_DMA+0x198>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002206:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <HAL_ADC_Start_DMA+0x1a0>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 80a0 	bne.w	8002354 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fc9d 	bl	8002b54 <ADC_Enable>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 8092 	bne.w	800234a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_ADC_Start_DMA+0x1a0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_ADC_Start_DMA+0x80>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224e:	d115      	bne.n	800227c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d027      	beq.n	80022ba <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800227a:	e01e      	b.n	80022ba <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADC_Start_DMA+0xcc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <HAL_ADC_Start_DMA+0x1a4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10e      	bne.n	80022ba <HAL_ADC_Start_DMA+0xea>
 800229c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c6:	d106      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	f023 0206 	bic.w	r2, r3, #6
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	649a      	str	r2, [r3, #72]	; 0x48
 80022d4:	e002      	b.n	80022dc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_ADC_Start_DMA+0x1a8>)
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_ADC_Start_DMA+0x1ac>)
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_ADC_Start_DMA+0x1b0>)
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	221c      	movs	r2, #28
 8002302:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	6852      	ldr	r2, [r2, #4]
 800230e:	f042 0210 	orr.w	r2, r2, #16
 8002312:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	68d2      	ldr	r2, [r2, #12]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3340      	adds	r3, #64	; 0x40
 800232e:	4619      	mov	r1, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f001 f95a 	bl	80035ec <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	f042 0204 	orr.w	r2, r2, #4
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e00d      	b.n	8002366 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002352:	e008      	b.n	8002366 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	e001      	b.n	8002366 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	50000300 	.word	0x50000300
 8002374:	50000100 	.word	0x50000100
 8002378:	08002a89 	.word	0x08002a89
 800237c:	08002b03 	.word	0x08002b03
 8002380:	08002b1f 	.word	0x08002b1f

08002384 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b09c      	sub	sp, #112	; 0x70
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x22>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e2a3      	b.n	80028ee <HAL_ADC_ConfigChannel+0x56a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8287 	bne.w	80028cc <HAL_ADC_ConfigChannel+0x548>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d81c      	bhi.n	8002400 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	461a      	mov	r2, r3
 80023de:	231f      	movs	r3, #31
 80023e0:	4093      	lsls	r3, r2
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4018      	ands	r0, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681c      	ldr	r4, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa04 f303 	lsl.w	r3, r4, r3
 80023fa:	4303      	orrs	r3, r0
 80023fc:	630b      	str	r3, [r1, #48]	; 0x30
 80023fe:	e063      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d81e      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	3b1e      	subs	r3, #30
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	4018      	ands	r0, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681c      	ldr	r4, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	3b1e      	subs	r3, #30
 800243c:	fa04 f303 	lsl.w	r3, r4, r3
 8002440:	4303      	orrs	r3, r0
 8002442:	634b      	str	r3, [r1, #52]	; 0x34
 8002444:	e040      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b0e      	cmp	r3, #14
 800244c:	d81e      	bhi.n	800248c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	3b3c      	subs	r3, #60	; 0x3c
 8002466:	221f      	movs	r2, #31
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4018      	ands	r0, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	3b3c      	subs	r3, #60	; 0x3c
 8002482:	fa04 f303 	lsl.w	r3, r4, r3
 8002486:	4303      	orrs	r3, r0
 8002488:	638b      	str	r3, [r1, #56]	; 0x38
 800248a:	e01d      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	3b5a      	subs	r3, #90	; 0x5a
 80024a4:	221f      	movs	r2, #31
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	4018      	ands	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681c      	ldr	r4, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	3b5a      	subs	r3, #90	; 0x5a
 80024c0:	fa04 f303 	lsl.w	r3, r4, r3
 80024c4:	4303      	orrs	r3, r0
 80024c6:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 80e5 	bne.w	80026a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d91c      	bls.n	800251a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6998      	ldr	r0, [r3, #24]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4018      	ands	r0, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689c      	ldr	r4, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b1e      	subs	r3, #30
 8002510:	fa04 f303 	lsl.w	r3, r4, r3
 8002514:	4303      	orrs	r3, r0
 8002516:	618b      	str	r3, [r1, #24]
 8002518:	e019      	b.n	800254e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6958      	ldr	r0, [r3, #20]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4018      	ands	r0, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689c      	ldr	r4, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	fa04 f303 	lsl.w	r3, r4, r3
 800254a:	4303      	orrs	r3, r0
 800254c:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	3b01      	subs	r3, #1
 800256c:	2b03      	cmp	r3, #3
 800256e:	d84f      	bhi.n	8002610 <HAL_ADC_ConfigChannel+0x28c>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <HAL_ADC_ConfigChannel+0x1f4>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	080025ab 	.word	0x080025ab
 8002580:	080025cd 	.word	0x080025cd
 8002584:	080025ef 	.word	0x080025ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002592:	4b9c      	ldr	r3, [pc, #624]	; (8002804 <HAL_ADC_ConfigChannel+0x480>)
 8002594:	400b      	ands	r3, r1
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	6809      	ldr	r1, [r1, #0]
 800259a:	0688      	lsls	r0, r1, #26
 800259c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800259e:	4301      	orrs	r1, r0
 80025a0:	430b      	orrs	r3, r1
 80025a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025a8:	e07b      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80025b4:	4b93      	ldr	r3, [pc, #588]	; (8002804 <HAL_ADC_ConfigChannel+0x480>)
 80025b6:	400b      	ands	r3, r1
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	0688      	lsls	r0, r1, #26
 80025be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025c0:	4301      	orrs	r1, r0
 80025c2:	430b      	orrs	r3, r1
 80025c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c8:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025ca:	e06a      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80025d6:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_ADC_ConfigChannel+0x480>)
 80025d8:	400b      	ands	r3, r1
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	6809      	ldr	r1, [r1, #0]
 80025de:	0688      	lsls	r0, r1, #26
 80025e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e2:	4301      	orrs	r1, r0
 80025e4:	430b      	orrs	r3, r1
 80025e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025ec:	e059      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_ADC_ConfigChannel+0x480>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	6809      	ldr	r1, [r1, #0]
 8002600:	0688      	lsls	r0, r1, #26
 8002602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002604:	4301      	orrs	r1, r0
 8002606:	430b      	orrs	r3, r1
 8002608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260c:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800260e:	e048      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800262e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002632:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800263a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002652:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002656:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	069b      	lsls	r3, r3, #26
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800267a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	429a      	cmp	r2, r3
 800268e:	d107      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800269a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800269e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80026a0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x33e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x33e>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x340>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 810c 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x55e>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d00f      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	2001      	movs	r0, #1
 80026e4:	fa00 f202 	lsl.w	r2, r0, r2
 80026e8:	43d2      	mvns	r2, r2
 80026ea:	400a      	ands	r2, r1
 80026ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80026f0:	e04a      	b.n	8002788 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	2001      	movs	r0, #1
 8002704:	fa00 f202 	lsl.w	r2, r0, r2
 8002708:	430a      	orrs	r2, r1
 800270a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b09      	cmp	r3, #9
 8002714:	d91c      	bls.n	8002750 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6998      	ldr	r0, [r3, #24]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	3b1b      	subs	r3, #27
 800272c:	2207      	movs	r2, #7
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	4018      	ands	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689c      	ldr	r4, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3b1b      	subs	r3, #27
 8002746:	fa04 f303 	lsl.w	r3, r4, r3
 800274a:	4303      	orrs	r3, r0
 800274c:	618b      	str	r3, [r1, #24]
 800274e:	e01b      	b.n	8002788 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6958      	ldr	r0, [r3, #20]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	2207      	movs	r2, #7
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	4018      	ands	r0, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689c      	ldr	r4, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	fa04 f303 	lsl.w	r3, r4, r3
 8002784:	4303      	orrs	r3, r0
 8002786:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_ADC_ConfigChannel+0x484>)
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b10      	cmp	r3, #16
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x41c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x448>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x430>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80027a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x448>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	f040 8092 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x55e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80027be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 808b 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x55e>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d4:	d102      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x458>
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_ADC_ConfigChannel+0x488>)
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e002      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x45e>
 80027dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027e0:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10f      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x48c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x48c>
 80027fe:	2301      	movs	r3, #1
 8002800:	e007      	b.n	8002812 <HAL_ADC_ConfigChannel+0x48e>
 8002802:	bf00      	nop
 8002804:	83fff000 	.word	0x83fff000
 8002808:	50000300 	.word	0x50000300
 800280c:	50000100 	.word	0x50000100
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d150      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x534>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002816:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_ADC_ConfigChannel+0x4ba>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4b4>
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4b4>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_ADC_ConfigChannel+0x4b6>
 8002838:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13c      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x534>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d11d      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x4fe>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284e:	d118      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x4fe>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_ADC_ConfigChannel+0x574>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_ADC_ConfigChannel+0x578>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9a      	lsrs	r2, r3, #18
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002872:	e002      	b.n	800287a <HAL_ADC_ConfigChannel+0x4f6>
          {
            wait_loop_index--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3b01      	subs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x4f0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002880:	e02e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x55c>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b11      	cmp	r3, #17
 8002888:	d10b      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x51e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x51e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800289c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x55c>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d11a      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x55c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80028aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028b6:	e013      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x55c>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80028ca:	e00a      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x55e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80028de:	e000      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x55e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80028ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3770      	adds	r7, #112	; 0x70
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc90      	pop	{r4, r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000008 	.word	0x20000008
 80028fc:	431bde83 	.word	0x431bde83

08002900 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002900:	b480      	push	{r7}
 8002902:	b09b      	sub	sp, #108	; 0x6c
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002918:	d102      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800291a:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e002      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002924:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0a1      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800293a:	2302      	movs	r3, #2
 800293c:	e09a      	b.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d17e      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d178      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002960:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002962:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03f      	beq.n	80029ec <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800296c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	035b      	lsls	r3, r3, #13
 800297e:	430b      	orrs	r3, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002984:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d15c      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80029c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d14b      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029d6:	f023 030f 	bic.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	431a      	orrs	r2, r3
 80029e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e8:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ea:	e03c      	b.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f6:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d108      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d123      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002a3a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d112      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a48:	f023 030f 	bic.w	r3, r3, #15
 8002a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a4e:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	e009      	b.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a64:	e000      	b.n	8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a66:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8002a70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8002a74:	4618      	mov	r0, r3
 8002a76:	376c      	adds	r7, #108	; 0x6c
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000300 	.word	0x50000300

08002a88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d126      	bne.n	8002af0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d115      	bne.n	8002ae8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	69db      	ldr	r3, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d111      	bne.n	8002ae8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff f9c3 	bl	8001e74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002aee:	e004      	b.n	8002afa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff f9b9 	bl	8001e88 <HAL_ADC_ConvHalfCpltCallback>
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	f043 0204 	orr.w	r2, r3, #4
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff f9a9 	bl	8001e9c <HAL_ADC_ErrorCallback>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <ADC_Enable+0x2c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <ADC_Enable+0x2c>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <ADC_Enable+0x2e>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13c      	bne.n	8002c00 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <ADC_Enable+0xb8>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e028      	b.n	8002c02 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	6892      	ldr	r2, [r2, #8]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002bc0:	f7ff f94c 	bl	8001e5c <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bc6:	e014      	b.n	8002bf2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc8:	f7ff f948 	bl	8001e5c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d90d      	bls.n	8002bf2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d1e3      	bne.n	8002bc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	8000003f 	.word	0x8000003f

08002c10 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <ADC_Disable+0x2c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <ADC_Disable+0x2c>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <ADC_Disable+0x2e>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d040      	beq.n	8002cc4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030d 	and.w	r3, r3, #13
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10f      	bne.n	8002c70 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	6892      	ldr	r2, [r2, #8]
 8002c5a:	f042 0202 	orr.w	r2, r2, #2
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2203      	movs	r2, #3
 8002c66:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c68:	f7ff f8f8 	bl	8001e5c <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c6e:	e022      	b.n	8002cb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0210 	orr.w	r2, r3, #16
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01c      	b.n	8002cc6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c8c:	f7ff f8e6 	bl	8001e5c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d90d      	bls.n	8002cb6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0210 	orr.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d0e3      	beq.n	8002c8c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <HAL_CAN_GetRxMessage+0x24>
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 80f4 	bne.w	8002eda <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10e      	bne.n	8002d16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0e8      	b.n	8002ee8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d9      	b.n	8002ee8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	331b      	adds	r3, #27
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4413      	add	r3, r2
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0204 	and.w	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	331b      	adds	r3, #27
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0d5b      	lsrs	r3, r3, #21
 8002d62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	331b      	adds	r3, #27
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	331b      	adds	r3, #27
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	331b      	adds	r3, #27
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6811      	ldr	r1, [r2, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	0a12      	lsrs	r2, r2, #8
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3302      	adds	r3, #2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	440a      	add	r2, r1
 8002e22:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	0c12      	lsrs	r2, r2, #16
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3303      	adds	r3, #3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	6811      	ldr	r1, [r2, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	440a      	add	r2, r1
 8002e3c:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	0e12      	lsrs	r2, r2, #24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	440a      	add	r2, r1
 8002e56:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	3305      	adds	r3, #5
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	6811      	ldr	r1, [r2, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	440a      	add	r2, r1
 8002e6e:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	0a12      	lsrs	r2, r2, #8
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6811      	ldr	r1, [r2, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	440a      	add	r2, r1
 8002e88:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	0c12      	lsrs	r2, r2, #16
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	3307      	adds	r3, #7
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	440a      	add	r2, r1
 8002ea2:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	0e12      	lsrs	r2, r2, #24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	f042 0220 	orr.w	r2, r2, #32
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e007      	b.n	8002ed6 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	6912      	ldr	r2, [r2, #16]
 8002ed0:	f042 0220 	orr.w	r2, r2, #32
 8002ed4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e006      	b.n	8002ee8 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07c      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f97d 	bl	8003256 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f5c:	e016      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e00c      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e002      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f983 	bl	8003292 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d024      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f95d 	bl	800326a <HAL_CAN_TxMailbox1CompleteCallback>
 8002fb0:	e016      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e00c      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e002      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f963 	bl	80032a6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d024      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ff2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f93d 	bl	800327e <HAL_CAN_TxMailbox2CompleteCallback>
 8003004:	e016      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e00c      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e002      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f943 	bl	80032ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f92a 	bl	80032ce <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f002 ffda 	bl	800604c <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f90c 	bl	80032f6 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8f3 	bl	80032e2 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8f6 	bl	800330a <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2208      	movs	r2, #8
 8003138:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8ef 	bl	800331e <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d06c      	beq.n	800322e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d03d      	beq.n	800322e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d038      	beq.n	800322e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	2b30      	cmp	r3, #48	; 0x30
 80031c4:	d017      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x302>
 80031c6:	2b30      	cmp	r3, #48	; 0x30
 80031c8:	d804      	bhi.n	80031d4 <HAL_CAN_IRQHandler+0x2e0>
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d009      	beq.n	80031e2 <HAL_CAN_IRQHandler+0x2ee>
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d00c      	beq.n	80031ec <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031d2:	e024      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d018      	beq.n	800320a <HAL_CAN_IRQHandler+0x316>
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d01b      	beq.n	8003214 <HAL_CAN_IRQHandler+0x320>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d00f      	beq.n	8003200 <HAL_CAN_IRQHandler+0x30c>
            break;
 80031e0:	e01d      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ea:	e018      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0310 	orr.w	r3, r3, #16
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f4:	e013      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031fe:	e00e      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003208:	e009      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003212:	e004      	b.n	800321e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800321c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	6992      	ldr	r2, [r2, #24]
 8003228:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800322c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2204      	movs	r2, #4
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f872 	bl	8003332 <HAL_CAN_ErrorCallback>
  }
}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80033b6:	4909      	ldr	r1, [pc, #36]	; (80033dc <NVIC_EnableIRQ+0x30>)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0b      	bge.n	800340c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	490d      	ldr	r1, [pc, #52]	; (800342c <NVIC_SetPriority+0x4c>)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	3b04      	subs	r3, #4
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340a:	e009      	b.n	8003420 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	4908      	ldr	r1, [pc, #32]	; (8003430 <NVIC_SetPriority+0x50>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	e000e100 	.word	0xe000e100

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	2201      	movs	r2, #1
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	401a      	ands	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347a:	2101      	movs	r1, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	1e59      	subs	r1, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff90 	bl	80033e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff2f 	bl	8003348 <NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff44 	bl	8003390 <NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff90 	bl	8003434 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5f 	bl	80033e0 <NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff37 	bl	80033ac <NVIC_EnableIRQ>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffa2 	bl	8003498 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e037      	b.n	80035e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800358a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800358e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f940 	bl	800384c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}  
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_DMA_Start_IT+0x20>
 8003608:	2302      	movs	r3, #2
 800360a:	e04a      	b.n	80036a2 <HAL_DMA_Start_IT+0xb6>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800361a:	2b01      	cmp	r3, #1
 800361c:	d13a      	bne.n	8003694 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8d4 	bl	80037f0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	f042 020e 	orr.w	r2, r2, #14
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e00f      	b.n	8003682 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	f042 020a 	orr.w	r2, r2, #10
 8003670:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	f022 0204 	bic.w	r2, r2, #4
 8003680:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e005      	b.n	80036a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2204      	movs	r2, #4
 80036c8:	409a      	lsls	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d024      	beq.n	800371c <HAL_DMA_IRQHandler+0x72>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01f      	beq.n	800371c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003702:	2104      	movs	r1, #4
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d06a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800371a:	e065      	b.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2202      	movs	r2, #2
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02c      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdc>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d027      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	f022 020a 	bic.w	r2, r2, #10
 8003752:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003764:	2102      	movs	r1, #2
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d035      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003784:	e030      	b.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2208      	movs	r2, #8
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d028      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f022 020e 	bic.w	r2, r2, #14
 80037ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    }
  }
}  
 80037e6:	e7ff      	b.n	80037e8 <HAL_DMA_IRQHandler+0x13e>
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b10      	cmp	r3, #16
 800381c:	d108      	bne.n	8003830 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800382e:	e007      	b.n	8003840 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <DMA_CalcBaseAndBitshift+0x34>)
 800385c:	4413      	add	r3, r2
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <DMA_CalcBaseAndBitshift+0x38>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a06      	ldr	r2, [pc, #24]	; (8003888 <DMA_CalcBaseAndBitshift+0x3c>)
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	bffdfff8 	.word	0xbffdfff8
 8003884:	cccccccd 	.word	0xcccccccd
 8003888:	40020000 	.word	0x40020000

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80038a2:	e14e      	b.n	8003b42 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	4013      	ands	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8140 	beq.w	8003b3c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x40>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b12      	cmp	r3, #18
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	6939      	ldr	r1, [r7, #16]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d00b      	beq.n	8003968 <HAL_GPIO_Init+0xdc>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d007      	beq.n	8003968 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800395c:	2b11      	cmp	r3, #17
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b12      	cmp	r3, #18
 8003966:	d130      	bne.n	80039ca <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399e:	2201      	movs	r2, #1
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0201 	and.w	r2, r3, #1
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 809a 	beq.w	8003b3c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	4a55      	ldr	r2, [pc, #340]	; (8003b60 <HAL_GPIO_Init+0x2d4>)
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_GPIO_Init+0x2d4>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b52      	ldr	r3, [pc, #328]	; (8003b60 <HAL_GPIO_Init+0x2d4>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a20:	4a50      	ldr	r2, [pc, #320]	; (8003b64 <HAL_GPIO_Init+0x2d8>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a4a:	d013      	beq.n	8003a74 <HAL_GPIO_Init+0x1e8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_GPIO_Init+0x2dc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00d      	beq.n	8003a70 <HAL_GPIO_Init+0x1e4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a45      	ldr	r2, [pc, #276]	; (8003b6c <HAL_GPIO_Init+0x2e0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1e0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <HAL_GPIO_Init+0x2e4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_GPIO_Init+0x1dc>
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x1ea>
 8003a68:	2305      	movs	r3, #5
 8003a6a:	e004      	b.n	8003a76 <HAL_GPIO_Init+0x1ea>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e002      	b.n	8003a76 <HAL_GPIO_Init+0x1ea>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_GPIO_Init+0x1ea>
 8003a74:	2300      	movs	r3, #0
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a86:	4937      	ldr	r1, [pc, #220]	; (8003b64 <HAL_GPIO_Init+0x2d8>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aea9 	bne.w	80038a4 <HAL_GPIO_Init+0x18>
  }
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010000 	.word	0x40010000
 8003b68:	48000400 	.word	0x48000400
 8003b6c:	48000800 	.word	0x48000800
 8003b70:	48000c00 	.word	0x48000c00
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e080      	b.n	8003cbc <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f002 fd18 	bl	8006604 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6852      	ldr	r2, [r2, #4]
 8003bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	6892      	ldr	r2, [r2, #8]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e006      	b.n	8003c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d104      	bne.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	68d2      	ldr	r2, [r2, #12]
 8003c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6911      	ldr	r1, [r2, #16]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6952      	ldr	r2, [r2, #20]
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6992      	ldr	r2, [r2, #24]
 8003c78:	0212      	lsls	r2, r2, #8
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	69d1      	ldr	r1, [r2, #28]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a12      	ldr	r2, [r2, #32]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d138      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e032      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d139      	bne.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e033      	b.n	8003dea <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2224      	movs	r2, #36	; 0x24
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003db0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f000 beda 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 816e 	beq.w	80040fe <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e22:	4bb5      	ldr	r3, [pc, #724]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e2e:	4bb2      	ldr	r3, [pc, #712]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d15a      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xf8>
 8003e3a:	4baf      	ldr	r3, [pc, #700]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d153      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xf8>
 8003e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003e5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <HAL_RCC_OscConfig+0x82>
 8003e74:	4ba0      	ldr	r3, [pc, #640]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0xae>
 8003e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003e96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ea2:	4b95      	ldr	r3, [pc, #596]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eaa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003eae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003eb2:	fa92 f2a2 	rbit	r2, r2
 8003eb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8003eba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003ebe:	fab2 f282 	clz	r2, r2
 8003ec2:	b252      	sxtb	r2, r2
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	b252      	sxtb	r2, r2
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	f002 021f 	and.w	r2, r2, #31
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 810f 	beq.w	80040fc <HAL_RCC_OscConfig+0x304>
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 8109 	bne.w	80040fc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f000 be6b 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x112>
 8003efc:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003efe:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e030      	b.n	8003f6c <HAL_RCC_OscConfig+0x174>
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x136>
 8003f14:	4a78      	ldr	r2, [pc, #480]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f16:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4a75      	ldr	r2, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f22:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e01e      	b.n	8003f6c <HAL_RCC_OscConfig+0x174>
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x15c>
 8003f3a:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f3c:	4b6e      	ldr	r3, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f48:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0x174>
 8003f54:	4a68      	ldr	r2, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f62:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f6c:	4962      	ldr	r1, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f6e:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f023 020f 	bic.w	r2, r3, #15
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d05a      	beq.n	8004040 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd ff67 	bl	8001e5c <HAL_GetTick>
 8003f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fd ff62 	bl	8001e5c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d902      	bls.n	8003faa <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	f000 be0e 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8003faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fae:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8003fbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d102      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1e4>
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	e015      	b.n	8004008 <HAL_RCC_OscConfig+0x210>
 8003fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ff4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ff8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004004:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800400c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004010:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800401c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b252      	sxtb	r2, r2
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	b252      	sxtb	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0aa      	beq.n	8003f94 <HAL_RCC_OscConfig+0x19c>
 800403e:	e05e      	b.n	80040fe <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd ff0c 	bl	8001e5c <HAL_GetTick>
 8004044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404a:	f7fd ff07 	bl	8001e5c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d902      	bls.n	8004060 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	f000 bdb3 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004064:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8004074:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <HAL_RCC_OscConfig+0x29a>
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x2c6>
 8004092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004096:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80040a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80040ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RCC_OscConfig+0x300>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80040c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80040ca:	fa92 f2a2 	rbit	r2, r2
 80040ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80040d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80040d6:	fab2 f282 	clz	r2, r2
 80040da:	b252      	sxtb	r2, r2
 80040dc:	f042 0220 	orr.w	r2, r2, #32
 80040e0:	b252      	sxtb	r2, r2
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1aa      	bne.n	800404a <HAL_RCC_OscConfig+0x252>
 80040f4:	e003      	b.n	80040fe <HAL_RCC_OscConfig+0x306>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8170 	beq.w	80043ee <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800410e:	4bd0      	ldr	r3, [pc, #832]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800411a:	4bcd      	ldr	r3, [pc, #820]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d16d      	bne.n	8004202 <HAL_RCC_OscConfig+0x40a>
 8004126:	4bca      	ldr	r3, [pc, #808]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d167      	bne.n	8004202 <HAL_RCC_OscConfig+0x40a>
 8004132:	2302      	movs	r3, #2
 8004134:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8004144:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <HAL_RCC_OscConfig+0x36a>
 800415c:	4bbc      	ldr	r3, [pc, #752]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	e013      	b.n	800418a <HAL_RCC_OscConfig+0x392>
 8004162:	2302      	movs	r3, #2
 8004164:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004174:	2302      	movs	r3, #2
 8004176:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800417a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004186:	4bb2      	ldr	r3, [pc, #712]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2202      	movs	r2, #2
 800418c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004190:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004194:	fa92 f2a2 	rbit	r2, r2
 8004198:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800419c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80041a0:	fab2 f282 	clz	r2, r2
 80041a4:	b252      	sxtb	r2, r2
 80041a6:	f042 0220 	orr.w	r2, r2, #32
 80041aa:	b252      	sxtb	r2, r2
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	f002 021f 	and.w	r2, r2, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_RCC_OscConfig+0x3d6>
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f000 bcfc 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	48a0      	ldr	r0, [pc, #640]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80041d0:	4b9f      	ldr	r3, [pc, #636]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6959      	ldr	r1, [r3, #20]
 80041de:	23f8      	movs	r3, #248	; 0xf8
 80041e0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80041f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004200:	e0f5      	b.n	80043ee <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8085 	beq.w	8004318 <HAL_RCC_OscConfig+0x520>
 800420e:	2301      	movs	r3, #1
 8004210:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8004220:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800422c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	461a      	mov	r2, r3
 8004234:	2301      	movs	r3, #1
 8004236:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fe10 	bl	8001e5c <HAL_GetTick>
 800423c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004242:	f7fd fe0b 	bl	8001e5c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	f000 bcb7 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004258:	2302      	movs	r3, #2
 800425a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800426a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0x490>
 8004282:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	e013      	b.n	80042b0 <HAL_RCC_OscConfig+0x4b8>
 8004288:	2302      	movs	r3, #2
 800428a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800429a:	2302      	movs	r3, #2
 800429c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80042a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2202      	movs	r2, #2
 80042b2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80042b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042ba:	fa92 f2a2 	rbit	r2, r2
 80042be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80042c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b252      	sxtb	r2, r2
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	b252      	sxtb	r2, r2
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ae      	beq.n	8004242 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	485a      	ldr	r0, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80042e6:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6959      	ldr	r1, [r3, #20]
 80042f4:	23f8      	movs	r3, #248	; 0xf8
 80042f6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8004306:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	6003      	str	r3, [r0, #0]
 8004316:	e06a      	b.n	80043ee <HAL_RCC_OscConfig+0x5f6>
 8004318:	2301      	movs	r3, #1
 800431a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800432a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004336:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fd fd8b 	bl	8001e5c <HAL_GetTick>
 8004346:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434c:	f7fd fd86 	bl	8001e5c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d902      	bls.n	8004362 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	f000 bc32 	b.w	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004362:	2302      	movs	r3, #2
 8004364:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8004374:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_RCC_OscConfig+0x59a>
 800438c:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	e013      	b.n	80043ba <HAL_RCC_OscConfig+0x5c2>
 8004392:	2302      	movs	r3, #2
 8004394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043a4:	2302      	movs	r3, #2
 80043a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_RCC_OscConfig+0x658>)
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2202      	movs	r2, #2
 80043bc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80043c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80043c4:	fa92 f2a2 	rbit	r2, r2
 80043c8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80043cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80043d0:	fab2 f282 	clz	r2, r2
 80043d4:	b252      	sxtb	r2, r2
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	b252      	sxtb	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	f002 021f 	and.w	r2, r2, #31
 80043e2:	2101      	movs	r1, #1
 80043e4:	fa01 f202 	lsl.w	r2, r1, r2
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ae      	bne.n	800434c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80d8 	beq.w	80045ae <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d067      	beq.n	80044d8 <HAL_RCC_OscConfig+0x6e0>
 8004408:	2301      	movs	r3, #1
 800440a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800441a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x65c>)
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	461a      	mov	r2, r3
 800442c:	2301      	movs	r3, #1
 800442e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fd fd14 	bl	8001e5c <HAL_GetTick>
 8004434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004438:	e00e      	b.n	8004458 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fd0f 	bl	8001e5c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d906      	bls.n	8004458 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e3bb      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	10908120 	.word	0x10908120
 8004458:	2302      	movs	r3, #2
 800445a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800446a:	2302      	movs	r3, #2
 800446c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004482:	2202      	movs	r2, #2
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004494:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	4ba5      	ldr	r3, [pc, #660]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800449e:	2102      	movs	r1, #2
 80044a0:	6019      	str	r1, [r3, #0]
 80044a2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	fa93 f1a3 	rbit	r1, r3
 80044ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044b0:	6019      	str	r1, [r3, #0]
  return(result);
 80044b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0b1      	beq.n	800443a <HAL_RCC_OscConfig+0x642>
 80044d6:	e06a      	b.n	80045ae <HAL_RCC_OscConfig+0x7b6>
 80044d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80044ee:	601a      	str	r2, [r3, #0]
  return(result);
 80044f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80044f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <HAL_RCC_OscConfig+0x938>)
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	461a      	mov	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004508:	f7fd fca8 	bl	8001e5c <HAL_GetTick>
 800450c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e009      	b.n	8004526 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004512:	f7fd fca3 	bl	8001e5c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e34f      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004526:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800452a:	2202      	movs	r2, #2
 800452c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004542:	2202      	movs	r2, #2
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	fa93 f2a3 	rbit	r2, r3
 8004550:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800455a:	2202      	movs	r2, #2
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	fa93 f2a3 	rbit	r2, r3
 8004568:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800456c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456e:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004572:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004576:	2102      	movs	r1, #2
 8004578:	6019      	str	r1, [r3, #0]
 800457a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	fa93 f1a3 	rbit	r1, r3
 8004584:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004588:	6019      	str	r1, [r3, #0]
  return(result);
 800458a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b25b      	sxtb	r3, r3
 8004596:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800459a:	b25b      	sxtb	r3, r3
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1b1      	bne.n	8004512 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8159 	beq.w	8004870 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d112      	bne.n	80045f6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80045d2:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045da:	61d3      	str	r3, [r2, #28]
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f107 030c 	add.w	r3, r7, #12
 80045ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_RCC_OscConfig+0x93c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11a      	bne.n	8004638 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4a4c      	ldr	r2, [pc, #304]	; (8004734 <HAL_RCC_OscConfig+0x93c>)
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCC_OscConfig+0x93c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fc25 	bl	8001e5c <HAL_GetTick>
 8004612:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	e009      	b.n	800462c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fd fc20 	bl	8001e5c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b64      	cmp	r3, #100	; 0x64
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e2cc      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x93c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ef      	beq.n	8004618 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d106      	bne.n	8004650 <HAL_RCC_OscConfig+0x858>
 8004642:	4a3a      	ldr	r2, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6213      	str	r3, [r2, #32]
 800464e:	e02f      	b.n	80046b0 <HAL_RCC_OscConfig+0x8b8>
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x87c>
 800465a:	4a34      	ldr	r2, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800465c:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6213      	str	r3, [r2, #32]
 8004666:	4a31      	ldr	r2, [pc, #196]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6213      	str	r3, [r2, #32]
 8004672:	e01d      	b.n	80046b0 <HAL_RCC_OscConfig+0x8b8>
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x8a0>
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	6213      	str	r3, [r2, #32]
 800468a:	4a28      	ldr	r2, [pc, #160]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6213      	str	r3, [r2, #32]
 8004696:	e00b      	b.n	80046b0 <HAL_RCC_OscConfig+0x8b8>
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_RCC_OscConfig+0x934>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	6213      	str	r3, [r2, #32]
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <HAL_RCC_OscConfig+0x934>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0304 	bic.w	r3, r3, #4
 80046ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d06b      	beq.n	8004792 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ba:	f7fd fbcf 	bl	8001e5c <HAL_GetTick>
 80046be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd fbca 	bl	8001e5c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e274      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 80046dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046e0:	2202      	movs	r2, #2
 80046e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	fa93 f2a3 	rbit	r2, r3
 80046ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80046f8:	2202      	movs	r2, #2
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	fa93 f2a3 	rbit	r2, r3
 8004706:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800470a:	601a      	str	r2, [r3, #0]
  return(result);
 800470c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004710:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d108      	bne.n	8004738 <HAL_RCC_OscConfig+0x940>
 8004726:	4b01      	ldr	r3, [pc, #4]	; (800472c <HAL_RCC_OscConfig+0x934>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	e013      	b.n	8004754 <HAL_RCC_OscConfig+0x95c>
 800472c:	40021000 	.word	0x40021000
 8004730:	10908120 	.word	0x10908120
 8004734:	40007000 	.word	0x40007000
 8004738:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	fa93 f2a3 	rbit	r2, r3
 800474a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	4bbb      	ldr	r3, [pc, #748]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004758:	2102      	movs	r1, #2
 800475a:	6011      	str	r1, [r2, #0]
 800475c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	fa92 f1a2 	rbit	r1, r2
 8004766:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800476a:	6011      	str	r1, [r2, #0]
  return(result);
 800476c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	fab2 f282 	clz	r2, r2
 8004776:	b252      	sxtb	r2, r2
 8004778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800477c:	b252      	sxtb	r2, r2
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	f002 021f 	and.w	r2, r2, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f202 	lsl.w	r2, r1, r2
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d099      	beq.n	80046c4 <HAL_RCC_OscConfig+0x8cc>
 8004790:	e064      	b.n	800485c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fd fb63 	bl	8001e5c <HAL_GetTick>
 8004796:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd fb5e 	bl	8001e5c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e208      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 80047b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047b8:	2202      	movs	r2, #2
 80047ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047d0:	2202      	movs	r2, #2
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fa93 f2a3 	rbit	r2, r3
 80047de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80047e2:	601a      	str	r2, [r3, #0]
  return(result);
 80047e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80047e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	fab3 f383 	clz	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d102      	bne.n	8004804 <HAL_RCC_OscConfig+0xa0c>
 80047fe:	4b90      	ldr	r3, [pc, #576]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	e00d      	b.n	8004820 <HAL_RCC_OscConfig+0xa28>
 8004804:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004808:	2202      	movs	r2, #2
 800480a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f2a3 	rbit	r2, r3
 8004816:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004824:	2102      	movs	r1, #2
 8004826:	6011      	str	r1, [r2, #0]
 8004828:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	fa92 f1a2 	rbit	r1, r2
 8004832:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004836:	6011      	str	r1, [r2, #0]
  return(result);
 8004838:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	fab2 f282 	clz	r2, r2
 8004842:	b252      	sxtb	r2, r2
 8004844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004848:	b252      	sxtb	r2, r2
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	f002 021f 	and.w	r2, r2, #31
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f202 	lsl.w	r2, r1, r2
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d19f      	bne.n	800479c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800485c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4a76      	ldr	r2, [pc, #472]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004866:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 81a4 	beq.w	8004bc4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800487c:	4b70      	ldr	r3, [pc, #448]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	f000 819b 	beq.w	8004bc0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f040 8113 	bne.w	8004abc <HAL_RCC_OscConfig+0xcc4>
 8004896:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800489a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800489e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	fa93 f2a3 	rbit	r2, r3
 80048aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048ae:	601a      	str	r2, [r3, #0]
  return(result);
 80048b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	461a      	mov	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fac7 	bl	8001e5c <HAL_GetTick>
 80048ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d2:	e009      	b.n	80048e8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd fac2 	bl	8001e5c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e16e      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 80048e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	fa93 f2a3 	rbit	r2, r3
 80048fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004900:	601a      	str	r2, [r3, #0]
  return(result);
 8004902:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_RCC_OscConfig+0xb2a>
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	e01b      	b.n	800495a <HAL_RCC_OscConfig+0xb62>
 8004922:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800492a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	fa93 f2a3 	rbit	r2, r3
 8004936:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fa93 f2a3 	rbit	r2, r3
 8004950:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4b3a      	ldr	r3, [pc, #232]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800495e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	fa92 f1a2 	rbit	r1, r2
 800496e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004972:	6011      	str	r1, [r2, #0]
  return(result);
 8004974:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	fab2 f282 	clz	r2, r2
 800497e:	b252      	sxtb	r2, r2
 8004980:	f042 0220 	orr.w	r2, r2, #32
 8004984:	b252      	sxtb	r2, r2
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	f002 021f 	and.w	r2, r2, #31
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d19d      	bne.n	80048d4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4829      	ldr	r0, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	6043      	str	r3, [r0, #4]
 80049b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049cc:	601a      	str	r2, [r3, #0]
  return(result);
 80049ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	461a      	mov	r2, r3
 80049e4:	2301      	movs	r3, #1
 80049e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd fa38 	bl	8001e5c <HAL_GetTick>
 80049ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f0:	e009      	b.n	8004a06 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fd fa33 	bl	8001e5c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0df      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	fa93 f2a3 	rbit	r2, r3
 8004a1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a1e:	601a      	str	r2, [r3, #0]
  return(result);
 8004a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d104      	bne.n	8004a44 <HAL_RCC_OscConfig+0xc4c>
 8004a3a:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <HAL_RCC_OscConfig+0xc48>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	e01d      	b.n	8004a7c <HAL_RCC_OscConfig+0xc84>
 8004a40:	40021000 	.word	0x40021000
 8004a44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	fa93 f2a3 	rbit	r2, r3
 8004a72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <HAL_RCC_OscConfig+0xdd8>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	fa92 f1a2 	rbit	r1, r2
 8004a90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a94:	6011      	str	r1, [r2, #0]
  return(result);
 8004a96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	fab2 f282 	clz	r2, r2
 8004aa0:	b252      	sxtb	r2, r2
 8004aa2:	f042 0220 	orr.w	r2, r2, #32
 8004aa6:	b252      	sxtb	r2, r2
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	f002 021f 	and.w	r2, r2, #31
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d09b      	beq.n	80049f2 <HAL_RCC_OscConfig+0xbfa>
 8004aba:	e083      	b.n	8004bc4 <HAL_RCC_OscConfig+0xdcc>
 8004abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ad4:	601a      	str	r2, [r3, #0]
  return(result);
 8004ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ada:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd f9b4 	bl	8001e5c <HAL_GetTick>
 8004af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af8:	e009      	b.n	8004b0e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afa:	f7fd f9af 	bl	8001e5c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e05b      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
 8004b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b26:	601a      	str	r2, [r3, #0]
  return(result);
 8004b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_OscConfig+0xd50>
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <HAL_RCC_OscConfig+0xdd8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0xd88>
 8004b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f107 0320 	add.w	r3, r7, #32
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f107 031c 	add.w	r3, r7, #28
 8004b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fa93 f2a3 	rbit	r2, r3
 8004b76:	f107 0318 	add.w	r3, r7, #24
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCC_OscConfig+0xdd8>)
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f107 0214 	add.w	r2, r7, #20
 8004b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	f107 0214 	add.w	r2, r7, #20
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	fa92 f1a2 	rbit	r1, r2
 8004b94:	f107 0210 	add.w	r2, r7, #16
 8004b98:	6011      	str	r1, [r2, #0]
  return(result);
 8004b9a:	f107 0210 	add.w	r2, r7, #16
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	fab2 f282 	clz	r2, r2
 8004ba4:	b252      	sxtb	r2, r2
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	b252      	sxtb	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	f002 021f 	and.w	r2, r2, #31
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d19d      	bne.n	8004afa <HAL_RCC_OscConfig+0xd02>
 8004bbe:	e001      	b.n	8004bc4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b09e      	sub	sp, #120	; 0x78
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e164      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0207 	and.w	r2, r3, #7
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d210      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	498f      	ldr	r1, [pc, #572]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004bfc:	4b8e      	ldr	r3, [pc, #568]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 0207 	bic.w	r2, r3, #7
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b8b      	ldr	r3, [pc, #556]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0207 	and.w	r2, r3, #7
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e14c      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4984      	ldr	r1, [pc, #528]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004c2a:	4b84      	ldr	r3, [pc, #528]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80df 	beq.w	8004e06 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d13d      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
 8004c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8004c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d102      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xa6>
 8004c74:	4b71      	ldr	r3, [pc, #452]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	e00f      	b.n	8004c9a <HAL_RCC_ClockConfig+0xc6>
 8004c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	667b      	str	r3, [r7, #100]	; 0x64
 8004c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c96:	4b69      	ldr	r3, [pc, #420]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca2:	fa92 f2a2 	rbit	r2, r2
 8004ca6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8004ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004caa:	fab2 f282 	clz	r2, r2
 8004cae:	b252      	sxtb	r2, r2
 8004cb0:	f042 0220 	orr.w	r2, r2, #32
 8004cb4:	b252      	sxtb	r2, r2
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f002 021f 	and.w	r2, r2, #31
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d17d      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0f4      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d13d      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x17c>
 8004cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce4:	fab3 f383 	clz	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCC_ClockConfig+0x12a>
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x14a>
 8004cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1a:	4b48      	ldr	r3, [pc, #288]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d22:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d26:	fa92 f2a2 	rbit	r2, r2
 8004d2a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8004d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2e:	fab2 f282 	clz	r2, r2
 8004d32:	b252      	sxtb	r2, r2
 8004d34:	f042 0220 	orr.w	r2, r2, #32
 8004d38:	b252      	sxtb	r2, r2
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	f002 021f 	and.w	r2, r2, #31
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d13b      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b2      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
 8004d50:	2302      	movs	r3, #2
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d102      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x1a4>
 8004d72:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	e00d      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1c0>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
 8004d84:	2302      	movs	r3, #2
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2202      	movs	r2, #2
 8004d96:	61ba      	str	r2, [r7, #24]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	fa92 f2a2 	rbit	r2, r2
 8004d9e:	617a      	str	r2, [r7, #20]
  return(result);
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	fab2 f282 	clz	r2, r2
 8004da6:	b252      	sxtb	r2, r2
 8004da8:	f042 0220 	orr.w	r2, r2, #32
 8004dac:	b252      	sxtb	r2, r2
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f002 021f 	and.w	r2, r2, #31
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e078      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc4:	491d      	ldr	r1, [pc, #116]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f023 0203 	bic.w	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd6:	f7fd f841 	bl	8001e5c <HAL_GetTick>
 8004dda:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dde:	f7fd f83d 	bl	8001e5c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e060      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_RCC_ClockConfig+0x268>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 020c 	and.w	r2, r3, #12
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d1eb      	bne.n	8004dde <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e06:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d915      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e14:	4908      	ldr	r1, [pc, #32]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0207 	bic.w	r2, r3, #7
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCC_ClockConfig+0x264>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0207 	and.w	r2, r3, #7
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d006      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e03f      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x2e2>
 8004e36:	bf00      	nop
 8004e38:	40022000 	.word	0x40022000
 8004e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	491c      	ldr	r1, [pc, #112]	; (8004ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4915      	ldr	r1, [pc, #84]	; (8004ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8004e6c:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e7e:	f000 f825 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8004e82:	4601      	mov	r1, r0
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e8c:	23f0      	movs	r3, #240	; 0xf0
 8004e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ea4:	5cd3      	ldrb	r3, [r2, r3]
 8004ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_RCC_ClockConfig+0x2f4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7fc ff90 	bl	8001dd4 <HAL_InitTick>
  
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3778      	adds	r7, #120	; 0x78
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800abb4 	.word	0x0800abb4
 8004ec8:	20000008 	.word	0x20000008

08004ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b08b      	sub	sp, #44	; 0x2c
 8004ed0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004ee6:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d002      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x30>
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x36>
 8004efa:	e03c      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004efe:	623b      	str	r3, [r7, #32]
      break;
 8004f00:	e03c      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f08:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004f0c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	607b      	str	r3, [r7, #4]
  return(result);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	fab3 f383 	clz	r3, r3
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f26:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	230f      	movs	r3, #15
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004f54:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	e004      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	623b      	str	r3, [r7, #32]
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f78:	623b      	str	r3, [r7, #32]
      break;
 8004f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	372c      	adds	r7, #44	; 0x2c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	007a1200 	.word	0x007a1200
 8004f94:	0800ab94 	.word	0x0800ab94
 8004f98:	0800aba4 	.word	0x0800aba4
 8004f9c:	003d0900 	.word	0x003d0900

08004fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000008 	.word	0x20000008

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004fbe:	f7ff ffef 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fcc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004fd0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	603b      	str	r3, [r7, #0]
  return(result);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	0800abc4 	.word	0x0800abc4

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005002:	f7ff ffcd 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8005006:	4601      	mov	r1, r0
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8005010:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005014:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	603b      	str	r3, [r7, #0]
  return(result);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	fab3 f383 	clz	r3, r3
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_RCC_GetPCLK2Freq+0x40>)
 800502a:	5cd3      	ldrb	r3, [r2, r3]
 800502c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	0800abc4 	.word	0x0800abc4

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b092      	sub	sp, #72	; 0x48
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80cf 	beq.w	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005064:	4b86      	ldr	r3, [pc, #536]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10e      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005070:	4a83      	ldr	r2, [pc, #524]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005072:	4b83      	ldr	r3, [pc, #524]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507a:	61d3      	str	r3, [r2, #28]
 800507c:	4b80      	ldr	r3, [pc, #512]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d118      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800509c:	4b79      	ldr	r3, [pc, #484]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fc fed9 	bl	8001e5c <HAL_GetTick>
 80050aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fc fed5 	bl	8001e5c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0da      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	4b70      	ldr	r3, [pc, #448]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050cc:	4b6c      	ldr	r3, [pc, #432]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d07c      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d075      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ea:	4b65      	ldr	r3, [pc, #404]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	4b5f      	ldr	r3, [pc, #380]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	461a      	mov	r2, r3
 8005112:	2301      	movs	r3, #1
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	4b56      	ldr	r3, [pc, #344]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005138:	4a51      	ldr	r2, [pc, #324]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d046      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fc fe88 	bl	8001e5c <HAL_GetTick>
 800514c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fc fe84 	bl	8001e5c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e087      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005166:	2302      	movs	r3, #2
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	fa93 f3a3 	rbit	r3, r3
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	2302      	movs	r3, #2
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	61fb      	str	r3, [r7, #28]
  return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	fab3 f383 	clz	r3, r3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d102      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005194:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	e007      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800519a:	2302      	movs	r3, #2
 800519c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	4b36      	ldr	r3, [pc, #216]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2202      	movs	r2, #2
 80051ac:	613a      	str	r2, [r7, #16]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	fa92 f2a2 	rbit	r2, r2
 80051b4:	60fa      	str	r2, [r7, #12]
  return(result);
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	fab2 f282 	clz	r2, r2
 80051bc:	b252      	sxtb	r2, r2
 80051be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c2:	b252      	sxtb	r2, r2
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	f002 021f 	and.w	r2, r2, #31
 80051ca:	2101      	movs	r1, #1
 80051cc:	fa01 f202 	lsl.w	r2, r1, r2
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0bc      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051d6:	492a      	ldr	r1, [pc, #168]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051d8:	4b29      	ldr	r3, [pc, #164]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f0:	4a23      	ldr	r2, [pc, #140]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051f2:	4b23      	ldr	r3, [pc, #140]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005208:	491d      	ldr	r1, [pc, #116]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800520a:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005226:	4916      	ldr	r1, [pc, #88]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	f023 0210 	bic.w	r2, r3, #16
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005244:	490e      	ldr	r1, [pc, #56]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005246:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005262:	4907      	ldr	r1, [pc, #28]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3748      	adds	r7, #72	; 0x48
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	40007000 	.word	0x40007000
 8005288:	10908100 	.word	0x10908100

0800528c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e01d      	b.n	80052da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fd0a 	bl	8006ccc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f000 f950 	bl	8005570 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d122      	bne.n	800533e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d11b      	bne.n	800533e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f06f 0202 	mvn.w	r2, #2
 800530e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f905 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 800532a:	e005      	b.n	8005338 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f8f7 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f908 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d122      	bne.n	8005392 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d11b      	bne.n	8005392 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0204 	mvn.w	r2, #4
 8005362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8db 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 800537e:	e005      	b.n	800538c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8cd 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8de 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b08      	cmp	r3, #8
 800539e:	d122      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d11b      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0208 	mvn.w	r2, #8
 80053b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2204      	movs	r2, #4
 80053bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f8b1 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 80053d2:	e005      	b.n	80053e0 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f8a3 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8b4 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d122      	bne.n	800543a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d11b      	bne.n	800543a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0210 	mvn.w	r2, #16
 800540a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2208      	movs	r2, #8
 8005410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f887 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8005426:	e005      	b.n	8005434 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f879 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f88a 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0201 	mvn.w	r2, #1
 800545e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fe0b 	bl	800607c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b80      	cmp	r3, #128	; 0x80
 8005472:	d10e      	bne.n	8005492 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f941 	bl	8005714 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f934 	bl	8005728 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f838 	bl	800555c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0220 	mvn.w	r2, #32
 8005510:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8f4 	bl	8005700 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a32      	ldr	r2, [pc, #200]	; (8005650 <TIM_Base_SetConfig+0xe0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x2c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x2c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <TIM_Base_SetConfig+0xe4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a27      	ldr	r2, [pc, #156]	; (8005650 <TIM_Base_SetConfig+0xe0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <TIM_Base_SetConfig+0x6e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d00f      	beq.n	80055de <TIM_Base_SetConfig+0x6e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a24      	ldr	r2, [pc, #144]	; (8005654 <TIM_Base_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_Base_SetConfig+0x6e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a23      	ldr	r2, [pc, #140]	; (8005658 <TIM_Base_SetConfig+0xe8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_Base_SetConfig+0x6e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a22      	ldr	r2, [pc, #136]	; (800565c <TIM_Base_SetConfig+0xec>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_Base_SetConfig+0x6e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <TIM_Base_SetConfig+0xf0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <TIM_Base_SetConfig+0xe0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0xc4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <TIM_Base_SetConfig+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0xc4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <TIM_Base_SetConfig+0xec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0xc4>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <TIM_Base_SetConfig+0xf0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d103      	bne.n	800563c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	615a      	str	r2, [r3, #20]
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40000400 	.word	0x40000400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e038      	b.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d108      	bne.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
} 
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00

08005700 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e043      	b.n	80057d6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fb08 	bl	8006d78 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f97d 	bl	8005a80 <UART_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e022      	b.n	80057d6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fad7 	bl	8005d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	6852      	ldr	r2, [r2, #4]
 80057a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	6892      	ldr	r2, [r2, #8]
 80057b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057bc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb5e 	bl	8005e90 <UART_CheckIdleState>
 80057d4:	4603      	mov	r3, r0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af02      	add	r7, sp, #8
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d177      	bne.n	80058ee <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_UART_Transmit+0x2c>
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e070      	b.n	80058f0 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_UART_Transmit+0x3e>
 8005818:	2302      	movs	r3, #2
 800581a:	e069      	b.n	80058f0 <HAL_UART_Transmit+0x112>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2221      	movs	r2, #33	; 0x21
 800582e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005832:	f7fc fb13 	bl	8001e5c <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8005848:	e034      	b.n	80058b4 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fb5b 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e03c      	b.n	80058f0 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	d111      	bne.n	80058a4 <HAL_UART_Transmit+0xc6>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005898:	b292      	uxth	r2, r2
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3302      	adds	r3, #2
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	e007      	b.n	80058b4 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1c4      	bne.n	800584a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fb29 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e00a      	b.n	80058f0 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	f040 80ad 	bne.w	8005a74 <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Receive+0x2e>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e0a5      	b.n	8005a76 <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Receive+0x40>
 8005934:	2302      	movs	r3, #2
 8005936:	e09e      	b.n	8005a76 <HAL_UART_Receive+0x17e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2222      	movs	r2, #34	; 0x22
 800594a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800594e:	f7fc fa85 	bl	8001e5c <HAL_GetTick>
 8005952:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	d10e      	bne.n	800598c <HAL_UART_Receive+0x94>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <HAL_UART_Receive+0x8a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f240 12ff 	movw	r2, #511	; 0x1ff
 800597c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005980:	e028      	b.n	80059d4 <HAL_UART_Receive+0xdc>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800598a:	e023      	b.n	80059d4 <HAL_UART_Receive+0xdc>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <HAL_UART_Receive+0xb8>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_Receive+0xae>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a4:	e016      	b.n	80059d4 <HAL_UART_Receive+0xdc>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	227f      	movs	r2, #127	; 0x7f
 80059aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ae:	e011      	b.n	80059d4 <HAL_UART_Receive+0xdc>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b8:	d10c      	bne.n	80059d4 <HAL_UART_Receive+0xdc>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <HAL_UART_Receive+0xd4>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	227f      	movs	r2, #127	; 0x7f
 80059c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ca:	e003      	b.n	80059d4 <HAL_UART_Receive+0xdc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059da:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80059dc:	e03a      	b.n	8005a54 <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2120      	movs	r1, #32
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa91 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e035      	b.n	8005a76 <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d112      	bne.n	8005a3a <HAL_UART_Receive+0x142>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10e      	bne.n	8005a3a <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	8b7b      	ldrh	r3, [r7, #26]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3302      	adds	r3, #2
 8005a36:	60bb      	str	r3, [r7, #8]
 8005a38:	e00c      	b.n	8005a54 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	60ba      	str	r2, [r7, #8]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005a46:	b292      	uxth	r2, r2
 8005a48:	b2d1      	uxtb	r1, r2
 8005a4a:	8b7a      	ldrh	r2, [r7, #26]
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	400a      	ands	r2, r1
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1be      	bne.n	80059de <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	4b9e      	ldr	r3, [pc, #632]	; (8005d38 <UART_SetConfig+0x2b8>)
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	6852      	ldr	r2, [r2, #4]
 8005ad2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a8e      	ldr	r2, [pc, #568]	; (8005d3c <UART_SetConfig+0x2bc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d121      	bne.n	8005b4c <UART_SetConfig+0xcc>
 8005b08:	4b8d      	ldr	r3, [pc, #564]	; (8005d40 <UART_SetConfig+0x2c0>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d817      	bhi.n	8005b44 <UART_SetConfig+0xc4>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x9c>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b3f 	.word	0x08005b3f
 8005b28:	08005b33 	.word	0x08005b33
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]
 8005b30:	e01e      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
 8005b36:	e01b      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	75fb      	strb	r3, [r7, #23]
 8005b3c:	e018      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	75fb      	strb	r3, [r7, #23]
 8005b42:	e015      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b44:	2310      	movs	r3, #16
 8005b46:	75fb      	strb	r3, [r7, #23]
 8005b48:	bf00      	nop
 8005b4a:	e011      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a7c      	ldr	r2, [pc, #496]	; (8005d44 <UART_SetConfig+0x2c4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d102      	bne.n	8005b5c <UART_SetConfig+0xdc>
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
 8005b5a:	e009      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a79      	ldr	r2, [pc, #484]	; (8005d48 <UART_SetConfig+0x2c8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d102      	bne.n	8005b6c <UART_SetConfig+0xec>
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
 8005b6a:	e001      	b.n	8005b70 <UART_SetConfig+0xf0>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b78:	d16f      	bne.n	8005c5a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d857      	bhi.n	8005c30 <UART_SetConfig+0x1b0>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x108>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bc9 	.word	0x08005bc9
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005c31 	.word	0x08005c31
 8005b98:	08005bff 	.word	0x08005bff
 8005b9c:	08005c31 	.word	0x08005c31
 8005ba0:	08005c31 	.word	0x08005c31
 8005ba4:	08005c31 	.word	0x08005c31
 8005ba8:	08005c1b 	.word	0x08005c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bac:	f7ff fa04 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	005a      	lsls	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	441a      	add	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	82bb      	strh	r3, [r7, #20]
        break;
 8005bc6:	e036      	b.n	8005c36 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005bc8:	f7ff fa18 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	005a      	lsls	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	441a      	add	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	82bb      	strh	r3, [r7, #20]
        break;
 8005be2:	e028      	b.n	8005c36 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005bee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6852      	ldr	r2, [r2, #4]
 8005bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfa:	82bb      	strh	r3, [r7, #20]
        break;
 8005bfc:	e01b      	b.n	8005c36 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bfe:	f7ff f965 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8005c02:	4603      	mov	r3, r0
 8005c04:	005a      	lsls	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	82bb      	strh	r3, [r7, #20]
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	82bb      	strh	r3, [r7, #20]
        break;
 8005c2e:	e002      	b.n	8005c36 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	74fb      	strb	r3, [r7, #19]
        break;
 8005c34:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005c36:	8abb      	ldrh	r3, [r7, #20]
 8005c38:	f023 030f 	bic.w	r3, r3, #15
 8005c3c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c3e:	8abb      	ldrh	r3, [r7, #20]
 8005c40:	105b      	asrs	r3, r3, #1
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	897a      	ldrh	r2, [r7, #10]
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	e069      	b.n	8005d2e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d863      	bhi.n	8005d28 <UART_SetConfig+0x2a8>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x1e8>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005ccd 	.word	0x08005ccd
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005ced 	.word	0x08005ced
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d0d 	.word	0x08005d0d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681c      	ldr	r4, [r3, #0]
 8005c90:	f7ff f992 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005c94:	4602      	mov	r2, r0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	441a      	add	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	60e3      	str	r3, [r4, #12]
        break;
 8005caa:	e040      	b.n	8005d2e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681c      	ldr	r4, [r3, #0]
 8005cb0:	f7ff f9a4 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	60e3      	str	r3, [r4, #12]
        break;
 8005cca:	e030      	b.n	8005d2e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005cda:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	6849      	ldr	r1, [r1, #4]
 8005ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	60d3      	str	r3, [r2, #12]
        break;
 8005cea:	e020      	b.n	8005d2e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681c      	ldr	r4, [r3, #0]
 8005cf0:	f7ff f8ec 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	60e3      	str	r3, [r4, #12]
        break;
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	0852      	lsrs	r2, r2, #1
 8005d16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6852      	ldr	r2, [r2, #4]
 8005d1e:	fbb1 f2f2 	udiv	r2, r1, r2
 8005d22:	b292      	uxth	r2, r2
 8005d24:	60da      	str	r2, [r3, #12]
        break;
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d2c:	bf00      	nop
    }
  }

  return ret;
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]

}
 8005d30:	4618      	mov	r0, r3
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}
 8005d38:	efff69f3 	.word	0xefff69f3
 8005d3c:	40013800 	.word	0x40013800
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40004400 	.word	0x40004400
 8005d48:	40004800 	.word	0x40004800

08005d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	6852      	ldr	r2, [r2, #4]
 8005d6a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	6852      	ldr	r2, [r2, #4]
 8005dae:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	6852      	ldr	r2, [r2, #4]
 8005dd0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	6892      	ldr	r2, [r2, #8]
 8005df2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	6852      	ldr	r2, [r2, #4]
 8005e36:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d10a      	bne.n	8005e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	6852      	ldr	r2, [r2, #4]
 8005e56:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	6852      	ldr	r2, [r2, #4]
 8005e78:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ea2:	f7fb ffdb 	bl	8001e5c <HAL_GetTick>
 8005ea6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d10e      	bne.n	8005ed4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f82c 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e022      	b.n	8005f1a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d10e      	bne.n	8005f00 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f816 	bl	8005f22 <UART_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e00c      	b.n	8005f1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f32:	e02c      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d028      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f42:	f7fb ff8b 	bl	8001e5c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d91d      	bls.n	8005f8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	6892      	ldr	r2, [r2, #8]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e00f      	b.n	8005fae <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	401a      	ands	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d0c3      	beq.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <_ZN3ADC5StartEv>:
uint16_t adcValue2[6]={0,};



void ADC::Start()
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue1, 3);
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	4905      	ldr	r1, [pc, #20]	; (8005fd4 <_ZN3ADC5StartEv+0x1c>)
 8005fc0:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <_ZN3ADC5StartEv+0x20>)
 8005fc2:	f7fc f905 	bl	80021d0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adcValue2, 3);
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	4904      	ldr	r1, [pc, #16]	; (8005fdc <_ZN3ADC5StartEv+0x24>)
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <_ZN3ADC5StartEv+0x28>)
 8005fcc:	f7fc f900 	bl	80021d0 <HAL_ADC_Start_DMA>
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000698 	.word	0x20000698
 8005fd8:	20000774 	.word	0x20000774
 8005fdc:	200006a4 	.word	0x200006a4
 8005fe0:	20000720 	.word	0x20000720

08005fe4 <_ZN3ADC8GetValueEv>:

unsigned short ADC::GetValue()
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	if(adc_x==1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d111      	bne.n	800601a <_ZN3ADC8GetValueEv+0x36>
	{
		switch(channel)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d006      	beq.n	800600e <_ZN3ADC8GetValueEv+0x2a>
 8006000:	2b04      	cmp	r3, #4
 8006002:	d007      	beq.n	8006014 <_ZN3ADC8GetValueEv+0x30>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d115      	bne.n	8006034 <_ZN3ADC8GetValueEv+0x50>
		{
		case 1:
			return adcValue1[0];
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <_ZN3ADC8GetValueEv+0x60>)
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	e013      	b.n	8006036 <_ZN3ADC8GetValueEv+0x52>
			break;
		case 2:
			return adcValue1[1];
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <_ZN3ADC8GetValueEv+0x60>)
 8006010:	885b      	ldrh	r3, [r3, #2]
 8006012:	e010      	b.n	8006036 <_ZN3ADC8GetValueEv+0x52>
			break;
		case 4:
			return adcValue1[3];
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <_ZN3ADC8GetValueEv+0x60>)
 8006016:	88db      	ldrh	r3, [r3, #6]
 8006018:	e00d      	b.n	8006036 <_ZN3ADC8GetValueEv+0x52>
			break;
		}
	}
	else if(adc_x==2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d107      	bne.n	8006034 <_ZN3ADC8GetValueEv+0x50>
	{
		return adcValue2[this->channel-1];
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a06      	ldr	r2, [pc, #24]	; (8006048 <_ZN3ADC8GetValueEv+0x64>)
 800602e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006032:	e000      	b.n	8006036 <_ZN3ADC8GetValueEv+0x52>
	}
	return 0;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000698 	.word	0x20000698
 8006048:	200006a4 	.word	0x200006a4

0800604c <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_Start(&hcan);
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8006058:	2100      	movs	r1, #0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fe37 	bl	8002cce <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8006062:	2201      	movs	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
 }
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200006b0 	.word	0x200006b0
 8006074:	200006b8 	.word	0x200006b8
 8006078:	200006d4 	.word	0x200006d4

0800607c <HAL_TIM_PeriodElapsedCallback>:
#include "LowlayerHandel.hpp"
extern LowlayerHandelTypedef *plow;
bool IntFlag=false;
int warikan=0;
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 			{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	 	 	 	if(htim->Instance==TIM6)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d102      	bne.n	8006094 <HAL_TIM_PeriodElapsedCallback+0x18>
	 	 	 		{
 					IntFlag=true;
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]

 					}

 			}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	40001000 	.word	0x40001000
 80060a4:	200006d8 	.word	0x200006d8

080060a8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80060ae:	f107 031c 	add.w	r3, r7, #28
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
 80060b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	611a      	str	r2, [r3, #16]
 80060c8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80060ca:	4b3b      	ldr	r3, [pc, #236]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80060d2:	4b39      	ldr	r3, [pc, #228]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80060d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80060e0:	4b35      	ldr	r3, [pc, #212]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80060e6:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80060ec:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80060f2:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80060f8:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <MX_ADC1_Init+0x110>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006100:	2200      	movs	r2, #0
 8006102:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006106:	2203      	movs	r2, #3
 8006108:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <MX_ADC1_Init+0x110>)
 800610c:	2201      	movs	r2, #1
 800610e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006110:	4b29      	ldr	r3, [pc, #164]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006112:	2204      	movs	r2, #4
 8006114:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006116:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006118:	2200      	movs	r2, #0
 800611a:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800611c:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <MX_ADC1_Init+0x110>)
 800611e:	2200      	movs	r2, #0
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006122:	4825      	ldr	r0, [pc, #148]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006124:	f7fb fec4 	bl	8001eb0 <HAL_ADC_Init>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800612e:	f000 fc3c 	bl	80069aa <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	481e      	ldr	r0, [pc, #120]	; (80061b8 <MX_ADC1_Init+0x110>)
 800613e:	f7fc fbdf 	bl	8002900 <HAL_ADCEx_MultiModeConfigChannel>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8006148:	f000 fc2f 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800614c:	2301      	movs	r3, #1
 800614e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006150:	2301      	movs	r3, #1
 8006152:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8006158:	2306      	movs	r3, #6
 800615a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006164:	1d3b      	adds	r3, r7, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4813      	ldr	r0, [pc, #76]	; (80061b8 <MX_ADC1_Init+0x110>)
 800616a:	f7fc f90b 	bl	8002384 <HAL_ADC_ConfigChannel>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8006174:	f000 fc19 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006178:	2302      	movs	r3, #2
 800617a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800617c:	2302      	movs	r3, #2
 800617e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	4619      	mov	r1, r3
 8006184:	480c      	ldr	r0, [pc, #48]	; (80061b8 <MX_ADC1_Init+0x110>)
 8006186:	f7fc f8fd 	bl	8002384 <HAL_ADC_ConfigChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8006190:	f000 fc0b 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006194:	2304      	movs	r3, #4
 8006196:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006198:	2303      	movs	r3, #3
 800619a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	4619      	mov	r1, r3
 80061a0:	4805      	ldr	r0, [pc, #20]	; (80061b8 <MX_ADC1_Init+0x110>)
 80061a2:	f7fc f8ef 	bl	8002384 <HAL_ADC_ConfigChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80061ac:	f000 fbfd 	bl	80069aa <Error_Handler>
  }

}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000774 	.word	0x20000774

080061bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80061c2:	463b      	mov	r3, r7
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	611a      	str	r2, [r3, #16]
 80061d0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80061d2:	4b34      	ldr	r3, [pc, #208]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061d4:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <MX_ADC2_Init+0xec>)
 80061d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80061d8:	4b32      	ldr	r3, [pc, #200]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80061e0:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80061e6:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <MX_ADC2_Init+0xe8>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006200:	2201      	movs	r2, #1
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006204:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006206:	2200      	movs	r2, #0
 8006208:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <MX_ADC2_Init+0xe8>)
 800620c:	2203      	movs	r2, #3
 800620e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006210:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006212:	2201      	movs	r2, #1
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006216:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006218:	2204      	movs	r2, #4
 800621a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <MX_ADC2_Init+0xe8>)
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006224:	2200      	movs	r2, #0
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006228:	481e      	ldr	r0, [pc, #120]	; (80062a4 <MX_ADC2_Init+0xe8>)
 800622a:	f7fb fe41 	bl	8001eb0 <HAL_ADC_Init>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 8006234:	f000 fbb9 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006238:	2301      	movs	r3, #1
 800623a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800623c:	2301      	movs	r3, #1
 800623e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8006244:	2306      	movs	r3, #6
 8006246:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006250:	463b      	mov	r3, r7
 8006252:	4619      	mov	r1, r3
 8006254:	4813      	ldr	r0, [pc, #76]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006256:	f7fc f895 	bl	8002384 <HAL_ADC_ConfigChannel>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8006260:	f000 fba3 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006264:	2302      	movs	r3, #2
 8006266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006268:	2302      	movs	r3, #2
 800626a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800626c:	463b      	mov	r3, r7
 800626e:	4619      	mov	r1, r3
 8006270:	480c      	ldr	r0, [pc, #48]	; (80062a4 <MX_ADC2_Init+0xe8>)
 8006272:	f7fc f887 	bl	8002384 <HAL_ADC_ConfigChannel>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 800627c:	f000 fb95 	bl	80069aa <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006280:	2303      	movs	r3, #3
 8006282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006284:	2303      	movs	r3, #3
 8006286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006288:	463b      	mov	r3, r7
 800628a:	4619      	mov	r1, r3
 800628c:	4805      	ldr	r0, [pc, #20]	; (80062a4 <MX_ADC2_Init+0xe8>)
 800628e:	f7fc f879 	bl	8002384 <HAL_ADC_ConfigChannel>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <MX_ADC2_Init+0xe0>
  {
    Error_Handler();
 8006298:	f000 fb87 	bl	80069aa <Error_Handler>
  }

}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000720 	.word	0x20000720
 80062a8:	50000100 	.word	0x50000100

080062ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	; 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b4:	f107 031c 	add.w	r3, r7, #28
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062cc:	d156      	bne.n	800637c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80062ce:	4b5b      	ldr	r3, [pc, #364]	; (800643c <HAL_ADC_MspInit+0x190>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a59      	ldr	r2, [pc, #356]	; (800643c <HAL_ADC_MspInit+0x190>)
 80062d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80062d8:	4b58      	ldr	r3, [pc, #352]	; (800643c <HAL_ADC_MspInit+0x190>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10b      	bne.n	80062f8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80062e0:	4a57      	ldr	r2, [pc, #348]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80062e2:	4b57      	ldr	r3, [pc, #348]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ea:	6153      	str	r3, [r2, #20]
 80062ec:	4b54      	ldr	r3, [pc, #336]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f8:	4a51      	ldr	r2, [pc, #324]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006302:	6153      	str	r3, [r2, #20]
 8006304:	4b4e      	ldr	r3, [pc, #312]	; (8006440 <HAL_ADC_MspInit+0x194>)
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8006310:	230b      	movs	r3, #11
 8006312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006314:	2303      	movs	r3, #3
 8006316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006318:	2300      	movs	r3, #0
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800631c:	f107 031c 	add.w	r3, r7, #28
 8006320:	4619      	mov	r1, r3
 8006322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006326:	f7fd fab1 	bl	800388c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800632a:	4b46      	ldr	r3, [pc, #280]	; (8006444 <HAL_ADC_MspInit+0x198>)
 800632c:	4a46      	ldr	r2, [pc, #280]	; (8006448 <HAL_ADC_MspInit+0x19c>)
 800632e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006330:	4b44      	ldr	r3, [pc, #272]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800633c:	4b41      	ldr	r3, [pc, #260]	; (8006444 <HAL_ADC_MspInit+0x198>)
 800633e:	2280      	movs	r2, #128	; 0x80
 8006340:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006342:	4b40      	ldr	r3, [pc, #256]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006348:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800634a:	4b3e      	ldr	r3, [pc, #248]	; (8006444 <HAL_ADC_MspInit+0x198>)
 800634c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006350:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006352:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006354:	2220      	movs	r2, #32
 8006356:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006358:	4b3a      	ldr	r3, [pc, #232]	; (8006444 <HAL_ADC_MspInit+0x198>)
 800635a:	2200      	movs	r2, #0
 800635c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800635e:	4839      	ldr	r0, [pc, #228]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006360:	f7fd f8fd 	bl	800355e <HAL_DMA_Init>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800636a:	f000 fb1e 	bl	80069aa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a34      	ldr	r2, [pc, #208]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006372:	63da      	str	r2, [r3, #60]	; 0x3c
 8006374:	4a33      	ldr	r2, [pc, #204]	; (8006444 <HAL_ADC_MspInit+0x198>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800637a:	e05a      	b.n	8006432 <HAL_ADC_MspInit+0x186>
  else if(adcHandle->Instance==ADC2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a32      	ldr	r2, [pc, #200]	; (800644c <HAL_ADC_MspInit+0x1a0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d155      	bne.n	8006432 <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006386:	4b2d      	ldr	r3, [pc, #180]	; (800643c <HAL_ADC_MspInit+0x190>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <HAL_ADC_MspInit+0x190>)
 800638e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_ADC_MspInit+0x190>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10b      	bne.n	80063b0 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <HAL_ADC_MspInit+0x194>)
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_ADC_MspInit+0x194>)
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a2:	6153      	str	r3, [r2, #20]
 80063a4:	4b26      	ldr	r3, [pc, #152]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b0:	4a23      	ldr	r2, [pc, #140]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80063b2:	4b23      	ldr	r3, [pc, #140]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	6153      	str	r3, [r2, #20]
 80063bc:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_ADC_MspInit+0x194>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80063c8:	2370      	movs	r3, #112	; 0x70
 80063ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063cc:	2303      	movs	r3, #3
 80063ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d4:	f107 031c 	add.w	r3, r7, #28
 80063d8:	4619      	mov	r1, r3
 80063da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063de:	f7fd fa55 	bl	800388c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80063e2:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 80063e4:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <HAL_ADC_MspInit+0x1a8>)
 80063e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ee:	4b18      	ldr	r3, [pc, #96]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 80063f6:	2280      	movs	r2, #128	; 0x80
 80063f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063fa:	4b15      	ldr	r3, [pc, #84]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 80063fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006400:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 8006404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006408:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 800640c:	2220      	movs	r2, #32
 800640e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 8006412:	2200      	movs	r2, #0
 8006414:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006416:	480e      	ldr	r0, [pc, #56]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 8006418:	f7fd f8a1 	bl	800355e <HAL_DMA_Init>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8006422:	f000 fac2 	bl	80069aa <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 800642a:	63da      	str	r2, [r3, #60]	; 0x3c
 800642c:	4a08      	ldr	r2, [pc, #32]	; (8006450 <HAL_ADC_MspInit+0x1a4>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006432:	bf00      	nop
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200006e0 	.word	0x200006e0
 8006440:	40021000 	.word	0x40021000
 8006444:	200007c8 	.word	0x200007c8
 8006448:	40020008 	.word	0x40020008
 800644c:	50000100 	.word	0x50000100
 8006450:	2000080c 	.word	0x2000080c
 8006454:	4002001c 	.word	0x4002001c

08006458 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800645e:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <MX_DMA_Init+0x48>)
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <MX_DMA_Init+0x48>)
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	6153      	str	r3, [r2, #20]
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <MX_DMA_Init+0x48>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	200b      	movs	r0, #11
 800647c:	f7fd f839 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006480:	200b      	movs	r0, #11
 8006482:	f7fd f852 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	200c      	movs	r0, #12
 800648c:	f7fd f831 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006490:	200c      	movs	r0, #12
 8006492:	f7fd f84a 	bl	800352a <HAL_NVIC_EnableIRQ>

}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000

080064a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064aa:	f107 030c 	add.w	r3, r7, #12
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	60da      	str	r2, [r3, #12]
 80064b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80064ba:	4a30      	ldr	r2, [pc, #192]	; (800657c <MX_GPIO_Init+0xd8>)
 80064bc:	4b2f      	ldr	r3, [pc, #188]	; (800657c <MX_GPIO_Init+0xd8>)
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064c4:	6153      	str	r3, [r2, #20]
 80064c6:	4b2d      	ldr	r3, [pc, #180]	; (800657c <MX_GPIO_Init+0xd8>)
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <MX_GPIO_Init+0xd8>)
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <MX_GPIO_Init+0xd8>)
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	6153      	str	r3, [r2, #20]
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <MX_GPIO_Init+0xd8>)
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ea:	4a24      	ldr	r2, [pc, #144]	; (800657c <MX_GPIO_Init+0xd8>)
 80064ec:	4b23      	ldr	r3, [pc, #140]	; (800657c <MX_GPIO_Init+0xd8>)
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f4:	6153      	str	r3, [r2, #20]
 80064f6:	4b21      	ldr	r3, [pc, #132]	; (800657c <MX_GPIO_Init+0xd8>)
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|echo_Pin, GPIO_PIN_RESET);
 8006502:	2200      	movs	r2, #0
 8006504:	2128      	movs	r1, #40	; 0x28
 8006506:	481e      	ldr	r0, [pc, #120]	; (8006580 <MX_GPIO_Init+0xdc>)
 8006508:	f7fd fb36 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800650c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006516:	2301      	movs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	4619      	mov	r1, r3
 8006520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006524:	f7fd f9b2 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006528:	2303      	movs	r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4619      	mov	r1, r3
 800653a:	4811      	ldr	r0, [pc, #68]	; (8006580 <MX_GPIO_Init+0xdc>)
 800653c:	f7fd f9a6 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|echo_Pin;
 8006540:	2328      	movs	r3, #40	; 0x28
 8006542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006544:	2301      	movs	r3, #1
 8006546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	4619      	mov	r1, r3
 8006556:	480a      	ldr	r0, [pc, #40]	; (8006580 <MX_GPIO_Init+0xdc>)
 8006558:	f7fd f998 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 800655c:	2310      	movs	r3, #16
 800655e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8006568:	f107 030c 	add.w	r3, r7, #12
 800656c:	4619      	mov	r1, r3
 800656e:	4804      	ldr	r0, [pc, #16]	; (8006580 <MX_GPIO_Init+0xdc>)
 8006570:	f7fd f98c 	bl	800388c <HAL_GPIO_Init>

}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	48000400 	.word	0x48000400

08006584 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <MX_I2C1_Init+0x74>)
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <MX_I2C1_Init+0x78>)
 800658c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <MX_I2C1_Init+0x74>)
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <MX_I2C1_Init+0x7c>)
 8006592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <MX_I2C1_Init+0x74>)
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <MX_I2C1_Init+0x74>)
 800659c:	2201      	movs	r2, #1
 800659e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065a0:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065b2:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80065be:	480e      	ldr	r0, [pc, #56]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065c0:	f7fd faf2 	bl	8003ba8 <HAL_I2C_Init>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80065ca:	f000 f9ee 	bl	80069aa <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065ce:	2100      	movs	r1, #0
 80065d0:	4809      	ldr	r0, [pc, #36]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065d2:	f7fd fb77 	bl	8003cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80065dc:	f000 f9e5 	bl	80069aa <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80065e0:	2100      	movs	r1, #0
 80065e2:	4805      	ldr	r0, [pc, #20]	; (80065f8 <MX_I2C1_Init+0x74>)
 80065e4:	f7fd fbb9 	bl	8003d5a <HAL_I2CEx_ConfigDigitalFilter>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80065ee:	f000 f9dc 	bl	80069aa <Error_Handler>
  }

}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000878 	.word	0x20000878
 80065fc:	40005400 	.word	0x40005400
 8006600:	2000090e 	.word	0x2000090e

08006604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a17      	ldr	r2, [pc, #92]	; (8006680 <HAL_I2C_MspInit+0x7c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d127      	bne.n	8006676 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <HAL_I2C_MspInit+0x80>)
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <HAL_I2C_MspInit+0x80>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006630:	6153      	str	r3, [r2, #20]
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <HAL_I2C_MspInit+0x80>)
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800663e:	23c0      	movs	r3, #192	; 0xc0
 8006640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006642:	2312      	movs	r3, #18
 8006644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006646:	2301      	movs	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800664a:	2303      	movs	r3, #3
 800664c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800664e:	2304      	movs	r3, #4
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	4619      	mov	r1, r3
 8006658:	480b      	ldr	r0, [pc, #44]	; (8006688 <HAL_I2C_MspInit+0x84>)
 800665a:	f7fd f917 	bl	800388c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <HAL_I2C_MspInit+0x80>)
 8006660:	4b08      	ldr	r3, [pc, #32]	; (8006684 <HAL_I2C_MspInit+0x80>)
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006668:	61d3      	str	r3, [r2, #28]
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_I2C_MspInit+0x80>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006676:	bf00      	nop
 8006678:	3728      	adds	r7, #40	; 0x28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40005400 	.word	0x40005400
 8006684:	40021000 	.word	0x40021000
 8006688:	48000400 	.word	0x48000400

0800668c <_ZN6CanBusC1Emm>:
	bool txend=false;
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3318      	adds	r3, #24
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2020 	strb.w	r2, [r3, #32]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	625a      	str	r2, [r3, #36]	; 0x24
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

	}
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>:
class MicroSw
{
	GPIO_TypeDef *GPIOx;
	unsigned short pin;
public:
	MicroSw(GPIO_TypeDef *_GPIOx,unsigned short _pin):GPIOx(_GPIOx),pin(_pin)
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80fb      	strh	r3, [r7, #6]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	88fa      	ldrh	r2, [r7, #6]
 80066f2:	809a      	strh	r2, [r3, #4]
	{

	}
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <_ZN3ADCC1Ess>:
class ADC
{
	short channel=0;
	short adc_x=0;
public:
	ADC(short _adc_x,short _channel):channel(_channel),adc_x(_adc_x)
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	807b      	strh	r3, [r7, #2]
 800670e:	4613      	mov	r3, r2
 8006710:	803b      	strh	r3, [r7, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	883a      	ldrh	r2, [r7, #0]
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	805a      	strh	r2, [r3, #2]
	{

	}
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <_ZN21LowlayerHandelTypedefC1Ev>:
public:
	CanBus extcan;
	MicroSw sw1,sw2,sw3,sw4,sw5,sw6;
	ADC ad1,ad2,ad3,ad4,ad5,ad6;

	LowlayerHandelTypedef():
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	sw1(GPIOA,GPIO_PIN_7),sw2(GPIOA,GPIO_PIN_9),sw3(GPIOA,GPIO_PIN_10),sw4(GPIOB,GPIO_PIN_0),sw5(GPIOB,GPIO_PIN_1),
	sw6(GPIOA,GPIO_PIN_8),
	ad1(2,3),ad2(2,2),ad3(2,1),ad4(1,4),ad5(1,2),ad6(1,1),
	extcan(CAN_ID_EXT,CAN_RTR_DATA)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	2104      	movs	r1, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ffa6 	bl	800668c <_ZN6CanBusC1Emm>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3330      	adds	r3, #48	; 0x30
 8006744:	2280      	movs	r2, #128	; 0x80
 8006746:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff ffc5 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3338      	adds	r3, #56	; 0x38
 8006754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006758:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ffbc 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3340      	adds	r3, #64	; 0x40
 8006766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800676a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff ffb3 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3348      	adds	r3, #72	; 0x48
 8006778:	2201      	movs	r2, #1
 800677a:	4921      	ldr	r1, [pc, #132]	; (8006800 <_ZN21LowlayerHandelTypedefC1Ev+0xd4>)
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ffac 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3350      	adds	r3, #80	; 0x50
 8006786:	2202      	movs	r2, #2
 8006788:	491d      	ldr	r1, [pc, #116]	; (8006800 <_ZN21LowlayerHandelTypedefC1Ev+0xd4>)
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff ffa5 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3358      	adds	r3, #88	; 0x58
 8006794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006798:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff ff9c 	bl	80066da <_ZN7MicroSwC1EP12GPIO_TypeDeft>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3360      	adds	r3, #96	; 0x60
 80067a6:	2203      	movs	r2, #3
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffa9 	bl	8006702 <_ZN3ADCC1Ess>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3364      	adds	r3, #100	; 0x64
 80067b4:	2202      	movs	r2, #2
 80067b6:	2102      	movs	r1, #2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ffa2 	bl	8006702 <_ZN3ADCC1Ess>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3368      	adds	r3, #104	; 0x68
 80067c2:	2201      	movs	r2, #1
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff ff9b 	bl	8006702 <_ZN3ADCC1Ess>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	336c      	adds	r3, #108	; 0x6c
 80067d0:	2204      	movs	r2, #4
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff ff94 	bl	8006702 <_ZN3ADCC1Ess>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3370      	adds	r3, #112	; 0x70
 80067de:	2202      	movs	r2, #2
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff ff8d 	bl	8006702 <_ZN3ADCC1Ess>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3374      	adds	r3, #116	; 0x74
 80067ec:	2201      	movs	r2, #1
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff ff86 	bl	8006702 <_ZN3ADCC1Ess>
	{

	}
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	48000400 	.word	0x48000400

08006804 <_ZN3AppC1EP21LowlayerHandelTypedef>:
	unsigned char txbuf2[8]={0,};
	unsigned char txbuf3[1]={0,};
	void DivideData();
	float distance[6];
public:
	App(LowlayerHandelTypedef *_plow):plow(_plow)
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	809a      	strh	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3306      	adds	r3, #6
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	605a      	str	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	330e      	adds	r3, #14
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	759a      	strb	r2, [r3, #22]
	{
	}
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b0aa      	sub	sp, #168	; 0xa8
 8006848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 setbuf(stdout, NULL);
 800684a:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <main+0x84>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb48 	bl	8006ee8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006858:	f7fb faa6 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800685c:	f000 f838 	bl	80068d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006860:	f7ff fe20 	bl	80064a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006864:	f7ff fdf8 	bl	8006458 <MX_DMA_Init>
  MX_ADC1_Init();
 8006868:	f7ff fc1e 	bl	80060a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800686c:	f7ff fca6 	bl	80061bc <MX_ADC2_Init>
 // MX_CAN_Init();
  MX_USART2_UART_Init();
 8006870:	f000 fa52 	bl	8006d18 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8006874:	f000 f9f4 	bl	8006c60 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006878:	f7ff fe84 	bl	8006584 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // FilterConfig();
  LowlayerHandelTypedef hlow;
 800687c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff ff53 	bl	800672c <_ZN21LowlayerHandelTypedefC1Ev>
 // Timer1 LoopInt(&htim6,20);
 // LoopInt.Start();
  hlow.ad1.Start();
 8006886:	f7ff fb97 	bl	8005fb8 <_ZN3ADC5StartEv>
  App app(&hlow);
 800688a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800688e:	463b      	mov	r3, r7
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ffb6 	bl	8006804 <_ZN3AppC1EP21LowlayerHandelTypedef>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //app.TaskShift();
	  printf("%d\n",hlow.ad6.GetValue());
 8006898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800689c:	3374      	adds	r3, #116	; 0x74
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fba0 	bl	8005fe4 <_ZN3ADC8GetValueEv>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4619      	mov	r1, r3
 80068a8:	4808      	ldr	r0, [pc, #32]	; (80068cc <main+0x88>)
 80068aa:	f000 fb05 	bl	8006eb8 <printf>
	  printf("%d\n",hlow.ad5.GetValue());
 80068ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068b2:	3370      	adds	r3, #112	; 0x70
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fb95 	bl	8005fe4 <_ZN3ADC8GetValueEv>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4619      	mov	r1, r3
 80068be:	4803      	ldr	r0, [pc, #12]	; (80068cc <main+0x88>)
 80068c0:	f000 fafa 	bl	8006eb8 <printf>
	  printf("%d\n",hlow.ad6.GetValue());
 80068c4:	e7e8      	b.n	8006898 <main+0x54>
 80068c6:	bf00      	nop
 80068c8:	2000000c 	.word	0x2000000c
 80068cc:	0800ab90 	.word	0x0800ab90

080068d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b096      	sub	sp, #88	; 0x58
 80068d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80068d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068da:	2228      	movs	r2, #40	; 0x28
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fae2 	bl	8006ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80068e4:	f107 031c 	add.w	r3, r7, #28
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	60da      	str	r2, [r3, #12]
 80068f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	609a      	str	r2, [r3, #8]
 80068fe:	60da      	str	r2, [r3, #12]
 8006900:	611a      	str	r2, [r3, #16]
 8006902:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006904:	2303      	movs	r3, #3
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800690e:	2300      	movs	r3, #0
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006912:	2301      	movs	r3, #1
 8006914:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006916:	2310      	movs	r3, #16
 8006918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800691a:	2302      	movs	r3, #2
 800691c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800691e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006922:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006928:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800692a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800692e:	4618      	mov	r0, r3
 8006930:	f7fd fa62 	bl	8003df8 <HAL_RCC_OscConfig>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8006944:	f000 f831 	bl	80069aa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006948:	230f      	movs	r3, #15
 800694a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800694c:	2302      	movs	r3, #2
 800694e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006950:	2300      	movs	r3, #0
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800695e:	f107 031c 	add.w	r3, r7, #28
 8006962:	2102      	movs	r1, #2
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe f935 	bl	8004bd4 <HAL_RCC_ClockConfig>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800697a:	f000 f816 	bl	80069aa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800697e:	2320      	movs	r3, #32
 8006980:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe fb59 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800699e:	f000 f804 	bl	80069aa <Error_Handler>
  }
}
 80069a2:	bf00      	nop
 80069a4:	3758      	adds	r7, #88	; 0x58
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069aa:	b480      	push	{r7}
 80069ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069ae:	bf00      	nop
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80069c0:	1d39      	adds	r1, r7, #4
 80069c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069c6:	2201      	movs	r2, #1
 80069c8:	4803      	ldr	r0, [pc, #12]	; (80069d8 <__io_putchar+0x20>)
 80069ca:	f7fe ff08 	bl	80057de <HAL_UART_Transmit>

  return ch;
 80069ce:	687b      	ldr	r3, [r7, #4]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20000904 	.word	0x20000904

080069dc <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint8_t ch = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive(&huart2,(uint8_t *)&ch, 1, 0xFFFF);
 80069e8:	f107 010f 	add.w	r1, r7, #15
 80069ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069f0:	2201      	movs	r2, #1
 80069f2:	480a      	ldr	r0, [pc, #40]	; (8006a1c <__io_getchar+0x40>)
 80069f4:	f7fe ff80 	bl	80058f8 <HAL_UART_Receive>

  if (ch == '\r')
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b0d      	cmp	r3, #13
 80069fc:	d104      	bne.n	8006a08 <__io_getchar+0x2c>
  {
      __io_putchar('\r');
 80069fe:	200d      	movs	r0, #13
 8006a00:	f7ff ffda 	bl	80069b8 <__io_putchar>
      ch = '\n';
 8006a04:	230a      	movs	r3, #10
 8006a06:	73fb      	strb	r3, [r7, #15]
  }

  return __io_putchar(ch);
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff ffd4 	bl	80069b8 <__io_putchar>
 8006a10:	4603      	mov	r3, r0
//  return ch;
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000904 	.word	0x20000904

08006a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a26:	4a0f      	ldr	r2, [pc, #60]	; (8006a64 <HAL_MspInit+0x44>)
 8006a28:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <HAL_MspInit+0x44>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6193      	str	r3, [r2, #24]
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <HAL_MspInit+0x44>)
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <HAL_MspInit+0x44>)
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <HAL_MspInit+0x44>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	61d3      	str	r3, [r2, #28]
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <HAL_MspInit+0x44>)
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40021000 	.word	0x40021000

08006a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a7a:	e7fe      	b.n	8006a7a <HardFault_Handler+0x4>

08006a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a80:	e7fe      	b.n	8006a80 <MemManage_Handler+0x4>

08006a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a86:	e7fe      	b.n	8006a86 <BusFault_Handler+0x4>

08006a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a8c:	e7fe      	b.n	8006a8c <UsageFault_Handler+0x4>

08006a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006aa0:	bf00      	nop
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006aae:	bf00      	nop
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006abc:	f7fb f9ba 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ac0:	bf00      	nop
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ac8:	4802      	ldr	r0, [pc, #8]	; (8006ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8006aca:	f7fc fdee 	bl	80036aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200007c8 	.word	0x200007c8

08006ad8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006adc:	4802      	ldr	r0, [pc, #8]	; (8006ae8 <DMA1_Channel2_IRQHandler+0x10>)
 8006ade:	f7fc fde4 	bl	80036aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000080c 	.word	0x2000080c

08006aec <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006af0:	4802      	ldr	r0, [pc, #8]	; (8006afc <CAN_RX0_IRQHandler+0x10>)
 8006af2:	f7fc f9ff 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8006af6:	bf00      	nop
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000850 	.word	0x20000850

08006b00 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006b04:	4802      	ldr	r0, [pc, #8]	; (8006b10 <CAN_RX1_IRQHandler+0x10>)
 8006b06:	f7fc f9f5 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000850 	.word	0x20000850

08006b14 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006b18:	4802      	ldr	r0, [pc, #8]	; (8006b24 <TIM6_DAC1_IRQHandler+0x10>)
 8006b1a:	f7fe fbe2 	bl	80052e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	200008c4 	.word	0x200008c4

08006b28 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006b28:	2001      	movs	r0, #1
 8006b2a:	4770      	bx	lr

08006b2c <_kill>:

int _kill(int pid, int sig)
{
 8006b2c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006b2e:	f000 f991 	bl	8006e54 <__errno>
 8006b32:	2316      	movs	r3, #22
 8006b34:	6003      	str	r3, [r0, #0]
	return -1;
}
 8006b36:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3a:	bd08      	pop	{r3, pc}

08006b3c <_exit>:

void _exit (int status)
{
 8006b3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006b3e:	f000 f989 	bl	8006e54 <__errno>
 8006b42:	2316      	movs	r3, #22
 8006b44:	6003      	str	r3, [r0, #0]
 8006b46:	e7fe      	b.n	8006b46 <_exit+0xa>

08006b48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	460e      	mov	r6, r1
 8006b4c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b4e:	460c      	mov	r4, r1
 8006b50:	1ba3      	subs	r3, r4, r6
 8006b52:	429d      	cmp	r5, r3
 8006b54:	dc01      	bgt.n	8006b5a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006b56:	4628      	mov	r0, r5
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8006b5a:	f7ff ff3f 	bl	80069dc <__io_getchar>
 8006b5e:	f804 0b01 	strb.w	r0, [r4], #1
 8006b62:	e7f5      	b.n	8006b50 <_read+0x8>

08006b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	460e      	mov	r6, r1
 8006b68:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	1ba3      	subs	r3, r4, r6
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	dc01      	bgt.n	8006b76 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8006b72:	4628      	mov	r0, r5
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8006b76:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006b7a:	f7ff ff1d 	bl	80069b8 <__io_putchar>
 8006b7e:	e7f5      	b.n	8006b6c <_write+0x8>

08006b80 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006b80:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <_sbrk+0x2c>)
 8006b84:	6819      	ldr	r1, [r3, #0]
{
 8006b86:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006b88:	b909      	cbnz	r1, 8006b8e <_sbrk+0xe>
		heap_end = &end;
 8006b8a:	4909      	ldr	r1, [pc, #36]	; (8006bb0 <_sbrk+0x30>)
 8006b8c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006b8e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006b90:	4669      	mov	r1, sp
 8006b92:	4402      	add	r2, r0
 8006b94:	428a      	cmp	r2, r1
 8006b96:	d906      	bls.n	8006ba6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006b98:	f000 f95c 	bl	8006e54 <__errno>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8006ba6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8006ba8:	bd08      	pop	{r3, pc}
 8006baa:	bf00      	nop
 8006bac:	200006e4 	.word	0x200006e4
 8006bb0:	20000984 	.word	0x20000984

08006bb4 <_close>:

int _close(int file)
{
	return -1;
}
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	4770      	bx	lr

08006bba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bbe:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr

08006bc4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	4770      	bx	lr

08006bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006bc8:	2000      	movs	r0, #0
 8006bca:	4770      	bx	lr

08006bcc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <SystemInit+0x84>)
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <SystemInit+0x84>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006be0:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <SystemInit+0x88>)
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <SystemInit+0x88>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8006bec:	4919      	ldr	r1, [pc, #100]	; (8006c54 <SystemInit+0x88>)
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <SystemInit+0x88>)
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <SystemInit+0x8c>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006bf8:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <SystemInit+0x88>)
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <SystemInit+0x88>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c06:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006c08:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <SystemInit+0x88>)
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <SystemInit+0x88>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c12:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <SystemInit+0x88>)
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <SystemInit+0x88>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006c1e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <SystemInit+0x88>)
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <SystemInit+0x88>)
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	f023 030f 	bic.w	r3, r3, #15
 8006c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006c2c:	4909      	ldr	r1, [pc, #36]	; (8006c54 <SystemInit+0x88>)
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <SystemInit+0x88>)
 8006c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <SystemInit+0x90>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <SystemInit+0x88>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c3e:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <SystemInit+0x84>)
 8006c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c44:	609a      	str	r2, [r3, #8]
#endif
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	40021000 	.word	0x40021000
 8006c58:	f87fc00c 	.word	0xf87fc00c
 8006c5c:	ff00fccc 	.word	0xff00fccc

08006c60 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8006c70:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <MX_TIM6_Init+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c88:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006c8e:	480d      	ldr	r0, [pc, #52]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006c90:	f7fe fafc 	bl	800528c <HAL_TIM_Base_Init>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006c9a:	f7ff fe86 	bl	80069aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <MX_TIM6_Init+0x64>)
 8006cac:	f7fe fcda 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006cb6:	f7ff fe78 	bl	80069aa <Error_Handler>
  }

}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200008c4 	.word	0x200008c4
 8006cc8:	40001000 	.word	0x40001000

08006ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <HAL_TIM_Base_MspInit+0x44>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d113      	bne.n	8006d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006cde:	4a0d      	ldr	r2, [pc, #52]	; (8006d14 <HAL_TIM_Base_MspInit+0x48>)
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <HAL_TIM_Base_MspInit+0x48>)
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f043 0310 	orr.w	r3, r3, #16
 8006ce8:	61d3      	str	r3, [r2, #28]
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_TIM_Base_MspInit+0x48>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2036      	movs	r0, #54	; 0x36
 8006cfc:	f7fc fbf9 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8006d00:	2036      	movs	r0, #54	; 0x36
 8006d02:	f7fc fc12 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40001000 	.word	0x40001000
 8006d14:	40021000 	.word	0x40021000

08006d18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <MX_USART2_UART_Init+0x5c>)
 8006d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d30:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d36:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d3e:	220c      	movs	r2, #12
 8006d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d5a:	4805      	ldr	r0, [pc, #20]	; (8006d70 <MX_USART2_UART_Init+0x58>)
 8006d5c:	f7fe fcee 	bl	800573c <HAL_UART_Init>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006d66:	f7ff fe20 	bl	80069aa <Error_Handler>
  }

}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000904 	.word	0x20000904
 8006d74:	40004400 	.word	0x40004400

08006d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	60da      	str	r2, [r3, #12]
 8006d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_UART_MspInit+0x80>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d129      	bne.n	8006dee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d9a:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006d9c:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da4:	61d3      	str	r3, [r2, #28]
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbc:	6153      	str	r3, [r2, #20]
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <HAL_UART_MspInit+0x84>)
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8006dca:	f248 0304 	movw	r3, #32772	; 0x8004
 8006dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ddc:	2307      	movs	r3, #7
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de0:	f107 0314 	add.w	r3, r7, #20
 8006de4:	4619      	mov	r1, r3
 8006de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dea:	f7fc fd4f 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006dee:	bf00      	nop
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40004400 	.word	0x40004400
 8006dfc:	40021000 	.word	0x40021000

08006e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006e04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006e06:	e003      	b.n	8006e10 <LoopCopyDataInit>

08006e08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006e0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006e0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006e0e:	3104      	adds	r1, #4

08006e10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006e10:	480b      	ldr	r0, [pc, #44]	; (8006e40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006e14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006e16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006e18:	d3f6      	bcc.n	8006e08 <CopyDataInit>
	ldr	r2, =_sbss
 8006e1a:	4a0b      	ldr	r2, [pc, #44]	; (8006e48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006e1c:	e002      	b.n	8006e24 <LoopFillZerobss>

08006e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006e1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006e20:	f842 3b04 	str.w	r3, [r2], #4

08006e24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006e24:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <LoopForever+0x16>)
	cmp	r2, r3
 8006e26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006e28:	d3f9      	bcc.n	8006e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e2a:	f7ff fecf 	bl	8006bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e2e:	f000 f817 	bl	8006e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006e32:	f7ff fd07 	bl	8006844 <main>

08006e36 <LoopForever>:

LoopForever:
    b LoopForever
 8006e36:	e7fe      	b.n	8006e36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006e38:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006e3c:	0800afd4 	.word	0x0800afd4
	ldr	r0, =_sdata
 8006e40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006e44:	2000067c 	.word	0x2000067c
	ldr	r2, =_sbss
 8006e48:	2000067c 	.word	0x2000067c
	ldr	r3, = _ebss
 8006e4c:	20000984 	.word	0x20000984

08006e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006e50:	e7fe      	b.n	8006e50 <ADC1_2_IRQHandler>
	...

08006e54 <__errno>:
 8006e54:	4b01      	ldr	r3, [pc, #4]	; (8006e5c <__errno+0x8>)
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	2000000c 	.word	0x2000000c

08006e60 <__libc_init_array>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4e0d      	ldr	r6, [pc, #52]	; (8006e98 <__libc_init_array+0x38>)
 8006e64:	4c0d      	ldr	r4, [pc, #52]	; (8006e9c <__libc_init_array+0x3c>)
 8006e66:	1ba4      	subs	r4, r4, r6
 8006e68:	10a4      	asrs	r4, r4, #2
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	42a5      	cmp	r5, r4
 8006e6e:	d109      	bne.n	8006e84 <__libc_init_array+0x24>
 8006e70:	4e0b      	ldr	r6, [pc, #44]	; (8006ea0 <__libc_init_array+0x40>)
 8006e72:	4c0c      	ldr	r4, [pc, #48]	; (8006ea4 <__libc_init_array+0x44>)
 8006e74:	f003 fe7e 	bl	800ab74 <_init>
 8006e78:	1ba4      	subs	r4, r4, r6
 8006e7a:	10a4      	asrs	r4, r4, #2
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	42a5      	cmp	r5, r4
 8006e80:	d105      	bne.n	8006e8e <__libc_init_array+0x2e>
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e88:	4798      	blx	r3
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	e7ee      	b.n	8006e6c <__libc_init_array+0xc>
 8006e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e92:	4798      	blx	r3
 8006e94:	3501      	adds	r5, #1
 8006e96:	e7f2      	b.n	8006e7e <__libc_init_array+0x1e>
 8006e98:	0800afcc 	.word	0x0800afcc
 8006e9c:	0800afcc 	.word	0x0800afcc
 8006ea0:	0800afcc 	.word	0x0800afcc
 8006ea4:	0800afd0 	.word	0x0800afd0

08006ea8 <memset>:
 8006ea8:	4402      	add	r2, r0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d100      	bne.n	8006eb2 <memset+0xa>
 8006eb0:	4770      	bx	lr
 8006eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb6:	e7f9      	b.n	8006eac <memset+0x4>

08006eb8 <printf>:
 8006eb8:	b40f      	push	{r0, r1, r2, r3}
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <printf+0x2c>)
 8006ebc:	b513      	push	{r0, r1, r4, lr}
 8006ebe:	681c      	ldr	r4, [r3, #0]
 8006ec0:	b124      	cbz	r4, 8006ecc <printf+0x14>
 8006ec2:	69a3      	ldr	r3, [r4, #24]
 8006ec4:	b913      	cbnz	r3, 8006ecc <printf+0x14>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f002 f94e 	bl	8009168 <__sinit>
 8006ecc:	ab05      	add	r3, sp, #20
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	68a1      	ldr	r1, [r4, #8]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 f8db 	bl	8007090 <_vfprintf_r>
 8006eda:	b002      	add	sp, #8
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	b004      	add	sp, #16
 8006ee2:	4770      	bx	lr
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <setbuf>:
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eee:	bf0c      	ite	eq
 8006ef0:	2202      	moveq	r2, #2
 8006ef2:	2200      	movne	r2, #0
 8006ef4:	f000 b800 	b.w	8006ef8 <setvbuf>

08006ef8 <setvbuf>:
 8006ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	461d      	mov	r5, r3
 8006efe:	4b60      	ldr	r3, [pc, #384]	; (8007080 <setvbuf+0x188>)
 8006f00:	681e      	ldr	r6, [r3, #0]
 8006f02:	4604      	mov	r4, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	4690      	mov	r8, r2
 8006f08:	b126      	cbz	r6, 8006f14 <setvbuf+0x1c>
 8006f0a:	69b3      	ldr	r3, [r6, #24]
 8006f0c:	b913      	cbnz	r3, 8006f14 <setvbuf+0x1c>
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f002 f92a 	bl	8009168 <__sinit>
 8006f14:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <setvbuf+0x18c>)
 8006f16:	429c      	cmp	r4, r3
 8006f18:	d166      	bne.n	8006fe8 <setvbuf+0xf0>
 8006f1a:	6874      	ldr	r4, [r6, #4]
 8006f1c:	f1b8 0f02 	cmp.w	r8, #2
 8006f20:	d006      	beq.n	8006f30 <setvbuf+0x38>
 8006f22:	f1b8 0f01 	cmp.w	r8, #1
 8006f26:	f200 80a7 	bhi.w	8007078 <setvbuf+0x180>
 8006f2a:	2d00      	cmp	r5, #0
 8006f2c:	f2c0 80a4 	blt.w	8007078 <setvbuf+0x180>
 8006f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f32:	07da      	lsls	r2, r3, #31
 8006f34:	d405      	bmi.n	8006f42 <setvbuf+0x4a>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	059b      	lsls	r3, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <setvbuf+0x4a>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3e:	f002 fad3 	bl	80094e8 <__retarget_lock_acquire_recursive>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4630      	mov	r0, r6
 8006f46:	f002 f87b 	bl	8009040 <_fflush_r>
 8006f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f4c:	b141      	cbz	r1, 8006f60 <setvbuf+0x68>
 8006f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f52:	4299      	cmp	r1, r3
 8006f54:	d002      	beq.n	8006f5c <setvbuf+0x64>
 8006f56:	4630      	mov	r0, r6
 8006f58:	f002 f9dc 	bl	8009314 <_free_r>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6363      	str	r3, [r4, #52]	; 0x34
 8006f60:	2300      	movs	r3, #0
 8006f62:	61a3      	str	r3, [r4, #24]
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	0618      	lsls	r0, r3, #24
 8006f6a:	d503      	bpl.n	8006f74 <setvbuf+0x7c>
 8006f6c:	6921      	ldr	r1, [r4, #16]
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f002 f9d0 	bl	8009314 <_free_r>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	f1b8 0f02 	cmp.w	r8, #2
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	d072      	beq.n	800706c <setvbuf+0x174>
 8006f86:	ab01      	add	r3, sp, #4
 8006f88:	466a      	mov	r2, sp
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f002 faad 	bl	80094ec <__swhatbuf_r>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	4318      	orrs	r0, r3
 8006f96:	81a0      	strh	r0, [r4, #12]
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	d12f      	bne.n	8006ffc <setvbuf+0x104>
 8006f9c:	9d00      	ldr	r5, [sp, #0]
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f002 fb10 	bl	80095c4 <malloc>
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d162      	bne.n	8007070 <setvbuf+0x178>
 8006faa:	f8dd 9000 	ldr.w	r9, [sp]
 8006fae:	45a9      	cmp	r9, r5
 8006fb0:	d150      	bne.n	8007054 <setvbuf+0x15c>
 8006fb2:	f04f 35ff 	mov.w	r5, #4294967295
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	60a2      	str	r2, [r4, #8]
 8006fba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	6122      	str	r2, [r4, #16]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc8:	6162      	str	r2, [r4, #20]
 8006fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	07d1      	lsls	r1, r2, #31
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	d404      	bmi.n	8006fe0 <setvbuf+0xe8>
 8006fd6:	059b      	lsls	r3, r3, #22
 8006fd8:	d402      	bmi.n	8006fe0 <setvbuf+0xe8>
 8006fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fdc:	f002 fa85 	bl	80094ea <__retarget_lock_release_recursive>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	b003      	add	sp, #12
 8006fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fe8:	4b27      	ldr	r3, [pc, #156]	; (8007088 <setvbuf+0x190>)
 8006fea:	429c      	cmp	r4, r3
 8006fec:	d101      	bne.n	8006ff2 <setvbuf+0xfa>
 8006fee:	68b4      	ldr	r4, [r6, #8]
 8006ff0:	e794      	b.n	8006f1c <setvbuf+0x24>
 8006ff2:	4b26      	ldr	r3, [pc, #152]	; (800708c <setvbuf+0x194>)
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	bf08      	it	eq
 8006ff8:	68f4      	ldreq	r4, [r6, #12]
 8006ffa:	e78f      	b.n	8006f1c <setvbuf+0x24>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	d0ce      	beq.n	8006f9e <setvbuf+0xa6>
 8007000:	69b3      	ldr	r3, [r6, #24]
 8007002:	b913      	cbnz	r3, 800700a <setvbuf+0x112>
 8007004:	4630      	mov	r0, r6
 8007006:	f002 f8af 	bl	8009168 <__sinit>
 800700a:	9b00      	ldr	r3, [sp, #0]
 800700c:	6127      	str	r7, [r4, #16]
 800700e:	429d      	cmp	r5, r3
 8007010:	bf18      	it	ne
 8007012:	89a3      	ldrhne	r3, [r4, #12]
 8007014:	6027      	str	r7, [r4, #0]
 8007016:	bf1c      	itt	ne
 8007018:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800701c:	81a3      	strhne	r3, [r4, #12]
 800701e:	f1b8 0f01 	cmp.w	r8, #1
 8007022:	bf08      	it	eq
 8007024:	89a3      	ldrheq	r3, [r4, #12]
 8007026:	6165      	str	r5, [r4, #20]
 8007028:	bf04      	itt	eq
 800702a:	f043 0301 	orreq.w	r3, r3, #1
 800702e:	81a3      	strheq	r3, [r4, #12]
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f013 0208 	ands.w	r2, r3, #8
 8007036:	d01d      	beq.n	8007074 <setvbuf+0x17c>
 8007038:	07da      	lsls	r2, r3, #31
 800703a:	bf41      	itttt	mi
 800703c:	2200      	movmi	r2, #0
 800703e:	426d      	negmi	r5, r5
 8007040:	60a2      	strmi	r2, [r4, #8]
 8007042:	61a5      	strmi	r5, [r4, #24]
 8007044:	bf58      	it	pl
 8007046:	60a5      	strpl	r5, [r4, #8]
 8007048:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800704a:	f015 0501 	ands.w	r5, r5, #1
 800704e:	d0c2      	beq.n	8006fd6 <setvbuf+0xde>
 8007050:	2500      	movs	r5, #0
 8007052:	e7c5      	b.n	8006fe0 <setvbuf+0xe8>
 8007054:	4648      	mov	r0, r9
 8007056:	f002 fab5 	bl	80095c4 <malloc>
 800705a:	4607      	mov	r7, r0
 800705c:	2800      	cmp	r0, #0
 800705e:	d0a8      	beq.n	8006fb2 <setvbuf+0xba>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	464d      	mov	r5, r9
 800706a:	e7c9      	b.n	8007000 <setvbuf+0x108>
 800706c:	2500      	movs	r5, #0
 800706e:	e7a2      	b.n	8006fb6 <setvbuf+0xbe>
 8007070:	46a9      	mov	r9, r5
 8007072:	e7f5      	b.n	8007060 <setvbuf+0x168>
 8007074:	60a2      	str	r2, [r4, #8]
 8007076:	e7e7      	b.n	8007048 <setvbuf+0x150>
 8007078:	f04f 35ff 	mov.w	r5, #4294967295
 800707c:	e7b0      	b.n	8006fe0 <setvbuf+0xe8>
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c
 8007084:	0800ac54 	.word	0x0800ac54
 8007088:	0800ac74 	.word	0x0800ac74
 800708c:	0800ac34 	.word	0x0800ac34

08007090 <_vfprintf_r>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	b0bd      	sub	sp, #244	; 0xf4
 8007096:	4688      	mov	r8, r1
 8007098:	4615      	mov	r5, r2
 800709a:	461c      	mov	r4, r3
 800709c:	461f      	mov	r7, r3
 800709e:	4683      	mov	fp, r0
 80070a0:	f002 fa12 	bl	80094c8 <_localeconv_r>
 80070a4:	6803      	ldr	r3, [r0, #0]
 80070a6:	930d      	str	r3, [sp, #52]	; 0x34
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7f9 f8e1 	bl	8000270 <strlen>
 80070ae:	9009      	str	r0, [sp, #36]	; 0x24
 80070b0:	f1bb 0f00 	cmp.w	fp, #0
 80070b4:	d005      	beq.n	80070c2 <_vfprintf_r+0x32>
 80070b6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80070ba:	b913      	cbnz	r3, 80070c2 <_vfprintf_r+0x32>
 80070bc:	4658      	mov	r0, fp
 80070be:	f002 f853 	bl	8009168 <__sinit>
 80070c2:	4b99      	ldr	r3, [pc, #612]	; (8007328 <_vfprintf_r+0x298>)
 80070c4:	4598      	cmp	r8, r3
 80070c6:	d137      	bne.n	8007138 <_vfprintf_r+0xa8>
 80070c8:	f8db 8004 	ldr.w	r8, [fp, #4]
 80070cc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80070d0:	07d8      	lsls	r0, r3, #31
 80070d2:	d407      	bmi.n	80070e4 <_vfprintf_r+0x54>
 80070d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80070d8:	0599      	lsls	r1, r3, #22
 80070da:	d403      	bmi.n	80070e4 <_vfprintf_r+0x54>
 80070dc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80070e0:	f002 fa02 	bl	80094e8 <__retarget_lock_acquire_recursive>
 80070e4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80070e8:	049a      	lsls	r2, r3, #18
 80070ea:	d409      	bmi.n	8007100 <_vfprintf_r+0x70>
 80070ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070f0:	f8a8 300c 	strh.w	r3, [r8, #12]
 80070f4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80070f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fc:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8007100:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007104:	071e      	lsls	r6, r3, #28
 8007106:	d502      	bpl.n	800710e <_vfprintf_r+0x7e>
 8007108:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800710c:	bb03      	cbnz	r3, 8007150 <_vfprintf_r+0xc0>
 800710e:	4641      	mov	r1, r8
 8007110:	4658      	mov	r0, fp
 8007112:	f001 f839 	bl	8008188 <__swsetup_r>
 8007116:	b1d8      	cbz	r0, 8007150 <_vfprintf_r+0xc0>
 8007118:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800711c:	07dd      	lsls	r5, r3, #31
 800711e:	d407      	bmi.n	8007130 <_vfprintf_r+0xa0>
 8007120:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007124:	059c      	lsls	r4, r3, #22
 8007126:	d403      	bmi.n	8007130 <_vfprintf_r+0xa0>
 8007128:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800712c:	f002 f9dd 	bl	80094ea <__retarget_lock_release_recursive>
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	930a      	str	r3, [sp, #40]	; 0x28
 8007136:	e026      	b.n	8007186 <_vfprintf_r+0xf6>
 8007138:	4b7c      	ldr	r3, [pc, #496]	; (800732c <_vfprintf_r+0x29c>)
 800713a:	4598      	cmp	r8, r3
 800713c:	d102      	bne.n	8007144 <_vfprintf_r+0xb4>
 800713e:	f8db 8008 	ldr.w	r8, [fp, #8]
 8007142:	e7c3      	b.n	80070cc <_vfprintf_r+0x3c>
 8007144:	4b7a      	ldr	r3, [pc, #488]	; (8007330 <_vfprintf_r+0x2a0>)
 8007146:	4598      	cmp	r8, r3
 8007148:	bf08      	it	eq
 800714a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 800714e:	e7bd      	b.n	80070cc <_vfprintf_r+0x3c>
 8007150:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007154:	f003 021a 	and.w	r2, r3, #26
 8007158:	2a0a      	cmp	r2, #10
 800715a:	d118      	bne.n	800718e <_vfprintf_r+0xfe>
 800715c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8007160:	2a00      	cmp	r2, #0
 8007162:	db14      	blt.n	800718e <_vfprintf_r+0xfe>
 8007164:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8007168:	07d0      	lsls	r0, r2, #31
 800716a:	d405      	bmi.n	8007178 <_vfprintf_r+0xe8>
 800716c:	0599      	lsls	r1, r3, #22
 800716e:	d403      	bmi.n	8007178 <_vfprintf_r+0xe8>
 8007170:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8007174:	f002 f9b9 	bl	80094ea <__retarget_lock_release_recursive>
 8007178:	4623      	mov	r3, r4
 800717a:	462a      	mov	r2, r5
 800717c:	4641      	mov	r1, r8
 800717e:	4658      	mov	r0, fp
 8007180:	f000 ffc2 	bl	8008108 <__sbprintf>
 8007184:	900a      	str	r0, [sp, #40]	; 0x28
 8007186:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007188:	b03d      	add	sp, #244	; 0xf4
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8007320 <_vfprintf_r+0x290>
 8007192:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007196:	2300      	movs	r3, #0
 8007198:	ac2c      	add	r4, sp, #176	; 0xb0
 800719a:	941f      	str	r4, [sp, #124]	; 0x7c
 800719c:	9321      	str	r3, [sp, #132]	; 0x84
 800719e:	9320      	str	r3, [sp, #128]	; 0x80
 80071a0:	9505      	str	r5, [sp, #20]
 80071a2:	9303      	str	r3, [sp, #12]
 80071a4:	9311      	str	r3, [sp, #68]	; 0x44
 80071a6:	9310      	str	r3, [sp, #64]	; 0x40
 80071a8:	930a      	str	r3, [sp, #40]	; 0x28
 80071aa:	9d05      	ldr	r5, [sp, #20]
 80071ac:	462b      	mov	r3, r5
 80071ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b2:	b112      	cbz	r2, 80071ba <_vfprintf_r+0x12a>
 80071b4:	2a25      	cmp	r2, #37	; 0x25
 80071b6:	f040 8083 	bne.w	80072c0 <_vfprintf_r+0x230>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	1aee      	subs	r6, r5, r3
 80071be:	d00d      	beq.n	80071dc <_vfprintf_r+0x14c>
 80071c0:	e884 0048 	stmia.w	r4, {r3, r6}
 80071c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c6:	4433      	add	r3, r6
 80071c8:	9321      	str	r3, [sp, #132]	; 0x84
 80071ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071cc:	3301      	adds	r3, #1
 80071ce:	2b07      	cmp	r3, #7
 80071d0:	9320      	str	r3, [sp, #128]	; 0x80
 80071d2:	dc77      	bgt.n	80072c4 <_vfprintf_r+0x234>
 80071d4:	3408      	adds	r4, #8
 80071d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d8:	4433      	add	r3, r6
 80071da:	930a      	str	r3, [sp, #40]	; 0x28
 80071dc:	782b      	ldrb	r3, [r5, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8739 	beq.w	8008056 <_vfprintf_r+0xfc6>
 80071e4:	2300      	movs	r3, #0
 80071e6:	1c69      	adds	r1, r5, #1
 80071e8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80071ec:	461a      	mov	r2, r3
 80071ee:	f04f 3aff 	mov.w	sl, #4294967295
 80071f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f4:	461d      	mov	r5, r3
 80071f6:	200a      	movs	r0, #10
 80071f8:	1c4e      	adds	r6, r1, #1
 80071fa:	7809      	ldrb	r1, [r1, #0]
 80071fc:	9605      	str	r6, [sp, #20]
 80071fe:	9102      	str	r1, [sp, #8]
 8007200:	9902      	ldr	r1, [sp, #8]
 8007202:	3920      	subs	r1, #32
 8007204:	2958      	cmp	r1, #88	; 0x58
 8007206:	f200 841d 	bhi.w	8007a44 <_vfprintf_r+0x9b4>
 800720a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800720e:	00b3      	.short	0x00b3
 8007210:	041b041b 	.word	0x041b041b
 8007214:	041b00b8 	.word	0x041b00b8
 8007218:	041b041b 	.word	0x041b041b
 800721c:	041b041b 	.word	0x041b041b
 8007220:	00bb041b 	.word	0x00bb041b
 8007224:	041b0065 	.word	0x041b0065
 8007228:	00c700c4 	.word	0x00c700c4
 800722c:	00e4041b 	.word	0x00e4041b
 8007230:	00e700e7 	.word	0x00e700e7
 8007234:	00e700e7 	.word	0x00e700e7
 8007238:	00e700e7 	.word	0x00e700e7
 800723c:	00e700e7 	.word	0x00e700e7
 8007240:	041b00e7 	.word	0x041b00e7
 8007244:	041b041b 	.word	0x041b041b
 8007248:	041b041b 	.word	0x041b041b
 800724c:	041b041b 	.word	0x041b041b
 8007250:	041b041b 	.word	0x041b041b
 8007254:	011b041b 	.word	0x011b041b
 8007258:	041b0131 	.word	0x041b0131
 800725c:	041b0131 	.word	0x041b0131
 8007260:	041b041b 	.word	0x041b041b
 8007264:	00fa041b 	.word	0x00fa041b
 8007268:	041b041b 	.word	0x041b041b
 800726c:	041b0346 	.word	0x041b0346
 8007270:	041b041b 	.word	0x041b041b
 8007274:	041b041b 	.word	0x041b041b
 8007278:	041b03ad 	.word	0x041b03ad
 800727c:	0093041b 	.word	0x0093041b
 8007280:	041b041b 	.word	0x041b041b
 8007284:	041b041b 	.word	0x041b041b
 8007288:	041b041b 	.word	0x041b041b
 800728c:	041b041b 	.word	0x041b041b
 8007290:	041b041b 	.word	0x041b041b
 8007294:	006b010d 	.word	0x006b010d
 8007298:	01310131 	.word	0x01310131
 800729c:	00fd0131 	.word	0x00fd0131
 80072a0:	041b006b 	.word	0x041b006b
 80072a4:	0100041b 	.word	0x0100041b
 80072a8:	0328041b 	.word	0x0328041b
 80072ac:	037c0348 	.word	0x037c0348
 80072b0:	041b0107 	.word	0x041b0107
 80072b4:	041b038d 	.word	0x041b038d
 80072b8:	041b03af 	.word	0x041b03af
 80072bc:	03c7041b 	.word	0x03c7041b
 80072c0:	461d      	mov	r5, r3
 80072c2:	e773      	b.n	80071ac <_vfprintf_r+0x11c>
 80072c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80072c6:	4641      	mov	r1, r8
 80072c8:	4658      	mov	r0, fp
 80072ca:	f002 fecc 	bl	800a066 <__sprint_r>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 8699 	bne.w	8008006 <_vfprintf_r+0xf76>
 80072d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80072d6:	e77e      	b.n	80071d6 <_vfprintf_r+0x146>
 80072d8:	2301      	movs	r3, #1
 80072da:	222b      	movs	r2, #43	; 0x2b
 80072dc:	9905      	ldr	r1, [sp, #20]
 80072de:	e78b      	b.n	80071f8 <_vfprintf_r+0x168>
 80072e0:	460f      	mov	r7, r1
 80072e2:	e7fb      	b.n	80072dc <_vfprintf_r+0x24c>
 80072e4:	b10b      	cbz	r3, 80072ea <_vfprintf_r+0x25a>
 80072e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80072ea:	06aa      	lsls	r2, r5, #26
 80072ec:	f140 80b0 	bpl.w	8007450 <_vfprintf_r+0x3c0>
 80072f0:	3707      	adds	r7, #7
 80072f2:	f027 0707 	bic.w	r7, r7, #7
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	2e00      	cmp	r6, #0
 8007302:	f177 0300 	sbcs.w	r3, r7, #0
 8007306:	da06      	bge.n	8007316 <_vfprintf_r+0x286>
 8007308:	4276      	negs	r6, r6
 800730a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800730e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007312:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007316:	2301      	movs	r3, #1
 8007318:	e2d0      	b.n	80078bc <_vfprintf_r+0x82c>
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w
	...
 8007328:	0800ac54 	.word	0x0800ac54
 800732c:	0800ac74 	.word	0x0800ac74
 8007330:	0800ac34 	.word	0x0800ac34
 8007334:	b10b      	cbz	r3, 800733a <_vfprintf_r+0x2aa>
 8007336:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800733a:	4ba2      	ldr	r3, [pc, #648]	; (80075c4 <_vfprintf_r+0x534>)
 800733c:	9311      	str	r3, [sp, #68]	; 0x44
 800733e:	06a9      	lsls	r1, r5, #26
 8007340:	f140 8331 	bpl.w	80079a6 <_vfprintf_r+0x916>
 8007344:	3707      	adds	r7, #7
 8007346:	f027 0707 	bic.w	r7, r7, #7
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	07eb      	lsls	r3, r5, #31
 8007356:	d50b      	bpl.n	8007370 <_vfprintf_r+0x2e0>
 8007358:	ea56 0307 	orrs.w	r3, r6, r7
 800735c:	d008      	beq.n	8007370 <_vfprintf_r+0x2e0>
 800735e:	2330      	movs	r3, #48	; 0x30
 8007360:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8007364:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007368:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800736c:	f045 0502 	orr.w	r5, r5, #2
 8007370:	2302      	movs	r3, #2
 8007372:	e2a0      	b.n	80078b6 <_vfprintf_r+0x826>
 8007374:	2a00      	cmp	r2, #0
 8007376:	d1b1      	bne.n	80072dc <_vfprintf_r+0x24c>
 8007378:	2301      	movs	r3, #1
 800737a:	2220      	movs	r2, #32
 800737c:	e7ae      	b.n	80072dc <_vfprintf_r+0x24c>
 800737e:	f045 0501 	orr.w	r5, r5, #1
 8007382:	e7ab      	b.n	80072dc <_vfprintf_r+0x24c>
 8007384:	683e      	ldr	r6, [r7, #0]
 8007386:	960b      	str	r6, [sp, #44]	; 0x2c
 8007388:	2e00      	cmp	r6, #0
 800738a:	f107 0104 	add.w	r1, r7, #4
 800738e:	daa7      	bge.n	80072e0 <_vfprintf_r+0x250>
 8007390:	4276      	negs	r6, r6
 8007392:	960b      	str	r6, [sp, #44]	; 0x2c
 8007394:	460f      	mov	r7, r1
 8007396:	f045 0504 	orr.w	r5, r5, #4
 800739a:	e79f      	b.n	80072dc <_vfprintf_r+0x24c>
 800739c:	9905      	ldr	r1, [sp, #20]
 800739e:	1c4e      	adds	r6, r1, #1
 80073a0:	7809      	ldrb	r1, [r1, #0]
 80073a2:	9102      	str	r1, [sp, #8]
 80073a4:	292a      	cmp	r1, #42	; 0x2a
 80073a6:	d010      	beq.n	80073ca <_vfprintf_r+0x33a>
 80073a8:	f04f 0a00 	mov.w	sl, #0
 80073ac:	9605      	str	r6, [sp, #20]
 80073ae:	9902      	ldr	r1, [sp, #8]
 80073b0:	3930      	subs	r1, #48	; 0x30
 80073b2:	2909      	cmp	r1, #9
 80073b4:	f63f af24 	bhi.w	8007200 <_vfprintf_r+0x170>
 80073b8:	fb00 1a0a 	mla	sl, r0, sl, r1
 80073bc:	9905      	ldr	r1, [sp, #20]
 80073be:	460e      	mov	r6, r1
 80073c0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80073c4:	9102      	str	r1, [sp, #8]
 80073c6:	9605      	str	r6, [sp, #20]
 80073c8:	e7f1      	b.n	80073ae <_vfprintf_r+0x31e>
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	9605      	str	r6, [sp, #20]
 80073ce:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 80073d2:	3704      	adds	r7, #4
 80073d4:	e782      	b.n	80072dc <_vfprintf_r+0x24c>
 80073d6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80073da:	e77f      	b.n	80072dc <_vfprintf_r+0x24c>
 80073dc:	2100      	movs	r1, #0
 80073de:	910b      	str	r1, [sp, #44]	; 0x2c
 80073e0:	9902      	ldr	r1, [sp, #8]
 80073e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073e4:	3930      	subs	r1, #48	; 0x30
 80073e6:	fb00 1106 	mla	r1, r0, r6, r1
 80073ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80073ec:	9905      	ldr	r1, [sp, #20]
 80073ee:	460e      	mov	r6, r1
 80073f0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80073f4:	9102      	str	r1, [sp, #8]
 80073f6:	9902      	ldr	r1, [sp, #8]
 80073f8:	9605      	str	r6, [sp, #20]
 80073fa:	3930      	subs	r1, #48	; 0x30
 80073fc:	2909      	cmp	r1, #9
 80073fe:	d9ef      	bls.n	80073e0 <_vfprintf_r+0x350>
 8007400:	e6fe      	b.n	8007200 <_vfprintf_r+0x170>
 8007402:	f045 0508 	orr.w	r5, r5, #8
 8007406:	e769      	b.n	80072dc <_vfprintf_r+0x24c>
 8007408:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800740c:	e766      	b.n	80072dc <_vfprintf_r+0x24c>
 800740e:	9905      	ldr	r1, [sp, #20]
 8007410:	7809      	ldrb	r1, [r1, #0]
 8007412:	296c      	cmp	r1, #108	; 0x6c
 8007414:	d105      	bne.n	8007422 <_vfprintf_r+0x392>
 8007416:	9905      	ldr	r1, [sp, #20]
 8007418:	3101      	adds	r1, #1
 800741a:	9105      	str	r1, [sp, #20]
 800741c:	f045 0520 	orr.w	r5, r5, #32
 8007420:	e75c      	b.n	80072dc <_vfprintf_r+0x24c>
 8007422:	f045 0510 	orr.w	r5, r5, #16
 8007426:	e759      	b.n	80072dc <_vfprintf_r+0x24c>
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	2600      	movs	r6, #0
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8007434:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007438:	f04f 0a01 	mov.w	sl, #1
 800743c:	9608      	str	r6, [sp, #32]
 800743e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8007442:	e11e      	b.n	8007682 <_vfprintf_r+0x5f2>
 8007444:	b10b      	cbz	r3, 800744a <_vfprintf_r+0x3ba>
 8007446:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800744a:	f045 0510 	orr.w	r5, r5, #16
 800744e:	e74c      	b.n	80072ea <_vfprintf_r+0x25a>
 8007450:	f015 0f10 	tst.w	r5, #16
 8007454:	f107 0304 	add.w	r3, r7, #4
 8007458:	d003      	beq.n	8007462 <_vfprintf_r+0x3d2>
 800745a:	683e      	ldr	r6, [r7, #0]
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	17f7      	asrs	r7, r6, #31
 8007460:	e74e      	b.n	8007300 <_vfprintf_r+0x270>
 8007462:	683e      	ldr	r6, [r7, #0]
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	f015 0f40 	tst.w	r5, #64	; 0x40
 800746a:	bf18      	it	ne
 800746c:	b236      	sxthne	r6, r6
 800746e:	e7f6      	b.n	800745e <_vfprintf_r+0x3ce>
 8007470:	b10b      	cbz	r3, 8007476 <_vfprintf_r+0x3e6>
 8007472:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007476:	3707      	adds	r7, #7
 8007478:	f027 0707 	bic.w	r7, r7, #7
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	ed97 7b00 	vldr	d7, [r7]
 8007486:	ed8d 7b06 	vstr	d7, [sp, #24]
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	9312      	str	r3, [sp, #72]	; 0x48
 800748e:	9b07      	ldr	r3, [sp, #28]
 8007490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007494:	9313      	str	r3, [sp, #76]	; 0x4c
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	4b4b      	ldr	r3, [pc, #300]	; (80075c8 <_vfprintf_r+0x538>)
 800749c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80074a0:	f7f9 fb40 	bl	8000b24 <__aeabi_dcmpun>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f040 85e3 	bne.w	8008070 <_vfprintf_r+0xfe0>
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	4b46      	ldr	r3, [pc, #280]	; (80075c8 <_vfprintf_r+0x538>)
 80074b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80074b4:	f7f9 fb18 	bl	8000ae8 <__aeabi_dcmple>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f040 85d9 	bne.w	8008070 <_vfprintf_r+0xfe0>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c6:	f7f9 fb05 	bl	8000ad4 <__aeabi_dcmplt>
 80074ca:	b110      	cbz	r0, 80074d2 <_vfprintf_r+0x442>
 80074cc:	232d      	movs	r3, #45	; 0x2d
 80074ce:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80074d2:	4b3e      	ldr	r3, [pc, #248]	; (80075cc <_vfprintf_r+0x53c>)
 80074d4:	4a3e      	ldr	r2, [pc, #248]	; (80075d0 <_vfprintf_r+0x540>)
 80074d6:	9902      	ldr	r1, [sp, #8]
 80074d8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80074dc:	2947      	cmp	r1, #71	; 0x47
 80074de:	bfcc      	ite	gt
 80074e0:	4691      	movgt	r9, r2
 80074e2:	4699      	movle	r9, r3
 80074e4:	f04f 0a03 	mov.w	sl, #3
 80074e8:	2600      	movs	r6, #0
 80074ea:	9608      	str	r6, [sp, #32]
 80074ec:	e0c9      	b.n	8007682 <_vfprintf_r+0x5f2>
 80074ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 80074f2:	d022      	beq.n	800753a <_vfprintf_r+0x4aa>
 80074f4:	9b02      	ldr	r3, [sp, #8]
 80074f6:	f023 0320 	bic.w	r3, r3, #32
 80074fa:	2b47      	cmp	r3, #71	; 0x47
 80074fc:	d104      	bne.n	8007508 <_vfprintf_r+0x478>
 80074fe:	f1ba 0f00 	cmp.w	sl, #0
 8007502:	bf08      	it	eq
 8007504:	f04f 0a01 	moveq.w	sl, #1
 8007508:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800750c:	9314      	str	r3, [sp, #80]	; 0x50
 800750e:	9b07      	ldr	r3, [sp, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	da15      	bge.n	8007540 <_vfprintf_r+0x4b0>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	930e      	str	r3, [sp, #56]	; 0x38
 8007518:	9b07      	ldr	r3, [sp, #28]
 800751a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800751e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007520:	232d      	movs	r3, #45	; 0x2d
 8007522:	930c      	str	r3, [sp, #48]	; 0x30
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	f023 0720 	bic.w	r7, r3, #32
 800752a:	2f46      	cmp	r7, #70	; 0x46
 800752c:	d00e      	beq.n	800754c <_vfprintf_r+0x4bc>
 800752e:	2f45      	cmp	r7, #69	; 0x45
 8007530:	d146      	bne.n	80075c0 <_vfprintf_r+0x530>
 8007532:	f10a 0601 	add.w	r6, sl, #1
 8007536:	2102      	movs	r1, #2
 8007538:	e00a      	b.n	8007550 <_vfprintf_r+0x4c0>
 800753a:	f04f 0a06 	mov.w	sl, #6
 800753e:	e7e3      	b.n	8007508 <_vfprintf_r+0x478>
 8007540:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007544:	2300      	movs	r3, #0
 8007546:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800754a:	e7ea      	b.n	8007522 <_vfprintf_r+0x492>
 800754c:	4656      	mov	r6, sl
 800754e:	2103      	movs	r1, #3
 8007550:	ab1d      	add	r3, sp, #116	; 0x74
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	ab1a      	add	r3, sp, #104	; 0x68
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4632      	mov	r2, r6
 800755a:	ab19      	add	r3, sp, #100	; 0x64
 800755c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8007560:	4658      	mov	r0, fp
 8007562:	f000 ff0d 	bl	8008380 <_dtoa_r>
 8007566:	2f47      	cmp	r7, #71	; 0x47
 8007568:	4681      	mov	r9, r0
 800756a:	d102      	bne.n	8007572 <_vfprintf_r+0x4e2>
 800756c:	07eb      	lsls	r3, r5, #31
 800756e:	f140 858c 	bpl.w	800808a <_vfprintf_r+0xffa>
 8007572:	eb09 0306 	add.w	r3, r9, r6
 8007576:	2f46      	cmp	r7, #70	; 0x46
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	d111      	bne.n	80075a0 <_vfprintf_r+0x510>
 800757c:	f899 3000 	ldrb.w	r3, [r9]
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d109      	bne.n	8007598 <_vfprintf_r+0x508>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800758c:	f7f9 fa98 	bl	8000ac0 <__aeabi_dcmpeq>
 8007590:	b910      	cbnz	r0, 8007598 <_vfprintf_r+0x508>
 8007592:	f1c6 0601 	rsb	r6, r6, #1
 8007596:	9619      	str	r6, [sp, #100]	; 0x64
 8007598:	9a03      	ldr	r2, [sp, #12]
 800759a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800759c:	441a      	add	r2, r3
 800759e:	9203      	str	r2, [sp, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075a8:	f7f9 fa8a 	bl	8000ac0 <__aeabi_dcmpeq>
 80075ac:	b990      	cbnz	r0, 80075d4 <_vfprintf_r+0x544>
 80075ae:	2230      	movs	r2, #48	; 0x30
 80075b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075b2:	9903      	ldr	r1, [sp, #12]
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d90f      	bls.n	80075d8 <_vfprintf_r+0x548>
 80075b8:	1c59      	adds	r1, r3, #1
 80075ba:	911d      	str	r1, [sp, #116]	; 0x74
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e7f7      	b.n	80075b0 <_vfprintf_r+0x520>
 80075c0:	4656      	mov	r6, sl
 80075c2:	e7b8      	b.n	8007536 <_vfprintf_r+0x4a6>
 80075c4:	0800abe0 	.word	0x0800abe0
 80075c8:	7fefffff 	.word	0x7fefffff
 80075cc:	0800abd0 	.word	0x0800abd0
 80075d0:	0800abd4 	.word	0x0800abd4
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	931d      	str	r3, [sp, #116]	; 0x74
 80075d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075da:	2f47      	cmp	r7, #71	; 0x47
 80075dc:	eba3 0309 	sub.w	r3, r3, r9
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	f040 80f8 	bne.w	80077d6 <_vfprintf_r+0x746>
 80075e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075e8:	1cdf      	adds	r7, r3, #3
 80075ea:	db02      	blt.n	80075f2 <_vfprintf_r+0x562>
 80075ec:	459a      	cmp	sl, r3
 80075ee:	f280 811f 	bge.w	8007830 <_vfprintf_r+0x7a0>
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	3b02      	subs	r3, #2
 80075f6:	9302      	str	r3, [sp, #8]
 80075f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80075fe:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8007602:	1e53      	subs	r3, r2, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	9319      	str	r3, [sp, #100]	; 0x64
 8007608:	bfb6      	itet	lt
 800760a:	f1c2 0301 	rsblt	r3, r2, #1
 800760e:	222b      	movge	r2, #43	; 0x2b
 8007610:	222d      	movlt	r2, #45	; 0x2d
 8007612:	2b09      	cmp	r3, #9
 8007614:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8007618:	f340 80fa 	ble.w	8007810 <_vfprintf_r+0x780>
 800761c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8007620:	260a      	movs	r6, #10
 8007622:	fb93 f0f6 	sdiv	r0, r3, r6
 8007626:	fb06 3310 	mls	r3, r6, r0, r3
 800762a:	3330      	adds	r3, #48	; 0x30
 800762c:	2809      	cmp	r0, #9
 800762e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007632:	f102 31ff 	add.w	r1, r2, #4294967295
 8007636:	4603      	mov	r3, r0
 8007638:	f300 80e3 	bgt.w	8007802 <_vfprintf_r+0x772>
 800763c:	3330      	adds	r3, #48	; 0x30
 800763e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007642:	3a02      	subs	r2, #2
 8007644:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8007648:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800764c:	4282      	cmp	r2, r0
 800764e:	4619      	mov	r1, r3
 8007650:	f0c0 80d9 	bcc.w	8007806 <_vfprintf_r+0x776>
 8007654:	9a03      	ldr	r2, [sp, #12]
 8007656:	ab1b      	add	r3, sp, #108	; 0x6c
 8007658:	1acb      	subs	r3, r1, r3
 800765a:	2a01      	cmp	r2, #1
 800765c:	9310      	str	r3, [sp, #64]	; 0x40
 800765e:	eb03 0a02 	add.w	sl, r3, r2
 8007662:	dc03      	bgt.n	800766c <_vfprintf_r+0x5dc>
 8007664:	f015 0301 	ands.w	r3, r5, #1
 8007668:	9308      	str	r3, [sp, #32]
 800766a:	d003      	beq.n	8007674 <_vfprintf_r+0x5e4>
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	449a      	add	sl, r3
 8007670:	2300      	movs	r3, #0
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007676:	b113      	cbz	r3, 800767e <_vfprintf_r+0x5ee>
 8007678:	232d      	movs	r3, #45	; 0x2d
 800767a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800767e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007680:	2600      	movs	r6, #0
 8007682:	4556      	cmp	r6, sl
 8007684:	4633      	mov	r3, r6
 8007686:	bfb8      	it	lt
 8007688:	4653      	movlt	r3, sl
 800768a:	930c      	str	r3, [sp, #48]	; 0x30
 800768c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8007690:	b113      	cbz	r3, 8007698 <_vfprintf_r+0x608>
 8007692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007694:	3301      	adds	r3, #1
 8007696:	930c      	str	r3, [sp, #48]	; 0x30
 8007698:	f015 0302 	ands.w	r3, r5, #2
 800769c:	9314      	str	r3, [sp, #80]	; 0x50
 800769e:	bf1e      	ittt	ne
 80076a0:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 80076a2:	3302      	addne	r3, #2
 80076a4:	930c      	strne	r3, [sp, #48]	; 0x30
 80076a6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80076aa:	9315      	str	r3, [sp, #84]	; 0x54
 80076ac:	d114      	bne.n	80076d8 <_vfprintf_r+0x648>
 80076ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b2:	1a9f      	subs	r7, r3, r2
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	dd0f      	ble.n	80076d8 <_vfprintf_r+0x648>
 80076b8:	4ba8      	ldr	r3, [pc, #672]	; (800795c <_vfprintf_r+0x8cc>)
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	2f10      	cmp	r7, #16
 80076be:	f300 81d3 	bgt.w	8007a68 <_vfprintf_r+0x9d8>
 80076c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c4:	6067      	str	r7, [r4, #4]
 80076c6:	441f      	add	r7, r3
 80076c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80076ca:	9721      	str	r7, [sp, #132]	; 0x84
 80076cc:	3301      	adds	r3, #1
 80076ce:	2b07      	cmp	r3, #7
 80076d0:	9320      	str	r3, [sp, #128]	; 0x80
 80076d2:	f300 81e0 	bgt.w	8007a96 <_vfprintf_r+0xa06>
 80076d6:	3408      	adds	r4, #8
 80076d8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80076dc:	b173      	cbz	r3, 80076fc <_vfprintf_r+0x66c>
 80076de:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	2301      	movs	r3, #1
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076ea:	3301      	adds	r3, #1
 80076ec:	9321      	str	r3, [sp, #132]	; 0x84
 80076ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80076f0:	3301      	adds	r3, #1
 80076f2:	2b07      	cmp	r3, #7
 80076f4:	9320      	str	r3, [sp, #128]	; 0x80
 80076f6:	f300 81d8 	bgt.w	8007aaa <_vfprintf_r+0xa1a>
 80076fa:	3408      	adds	r4, #8
 80076fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076fe:	b16b      	cbz	r3, 800771c <_vfprintf_r+0x68c>
 8007700:	ab18      	add	r3, sp, #96	; 0x60
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	2302      	movs	r3, #2
 8007706:	6063      	str	r3, [r4, #4]
 8007708:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800770a:	3302      	adds	r3, #2
 800770c:	9321      	str	r3, [sp, #132]	; 0x84
 800770e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007710:	3301      	adds	r3, #1
 8007712:	2b07      	cmp	r3, #7
 8007714:	9320      	str	r3, [sp, #128]	; 0x80
 8007716:	f300 81d2 	bgt.w	8007abe <_vfprintf_r+0xa2e>
 800771a:	3408      	adds	r4, #8
 800771c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	d114      	bne.n	800774c <_vfprintf_r+0x6bc>
 8007722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007726:	1a9f      	subs	r7, r3, r2
 8007728:	2f00      	cmp	r7, #0
 800772a:	dd0f      	ble.n	800774c <_vfprintf_r+0x6bc>
 800772c:	4b8c      	ldr	r3, [pc, #560]	; (8007960 <_vfprintf_r+0x8d0>)
 800772e:	6023      	str	r3, [r4, #0]
 8007730:	2f10      	cmp	r7, #16
 8007732:	f300 81ce 	bgt.w	8007ad2 <_vfprintf_r+0xa42>
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	6067      	str	r7, [r4, #4]
 800773a:	441f      	add	r7, r3
 800773c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800773e:	9721      	str	r7, [sp, #132]	; 0x84
 8007740:	3301      	adds	r3, #1
 8007742:	2b07      	cmp	r3, #7
 8007744:	9320      	str	r3, [sp, #128]	; 0x80
 8007746:	f300 81dd 	bgt.w	8007b04 <_vfprintf_r+0xa74>
 800774a:	3408      	adds	r4, #8
 800774c:	eba6 060a 	sub.w	r6, r6, sl
 8007750:	2e00      	cmp	r6, #0
 8007752:	dd0f      	ble.n	8007774 <_vfprintf_r+0x6e4>
 8007754:	4f82      	ldr	r7, [pc, #520]	; (8007960 <_vfprintf_r+0x8d0>)
 8007756:	6027      	str	r7, [r4, #0]
 8007758:	2e10      	cmp	r6, #16
 800775a:	f300 81dd 	bgt.w	8007b18 <_vfprintf_r+0xa88>
 800775e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007760:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007762:	6066      	str	r6, [r4, #4]
 8007764:	3301      	adds	r3, #1
 8007766:	4406      	add	r6, r0
 8007768:	2b07      	cmp	r3, #7
 800776a:	9621      	str	r6, [sp, #132]	; 0x84
 800776c:	9320      	str	r3, [sp, #128]	; 0x80
 800776e:	f300 81ea 	bgt.w	8007b46 <_vfprintf_r+0xab6>
 8007772:	3408      	adds	r4, #8
 8007774:	05e9      	lsls	r1, r5, #23
 8007776:	f100 81f0 	bmi.w	8007b5a <_vfprintf_r+0xaca>
 800777a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800777c:	e884 0600 	stmia.w	r4, {r9, sl}
 8007780:	4453      	add	r3, sl
 8007782:	9321      	str	r3, [sp, #132]	; 0x84
 8007784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007786:	3301      	adds	r3, #1
 8007788:	2b07      	cmp	r3, #7
 800778a:	9320      	str	r3, [sp, #128]	; 0x80
 800778c:	f340 841b 	ble.w	8007fc6 <_vfprintf_r+0xf36>
 8007790:	aa1f      	add	r2, sp, #124	; 0x7c
 8007792:	4641      	mov	r1, r8
 8007794:	4658      	mov	r0, fp
 8007796:	f002 fc66 	bl	800a066 <__sprint_r>
 800779a:	2800      	cmp	r0, #0
 800779c:	f040 8433 	bne.w	8008006 <_vfprintf_r+0xf76>
 80077a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80077a2:	0768      	lsls	r0, r5, #29
 80077a4:	f100 8412 	bmi.w	8007fcc <_vfprintf_r+0xf3c>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077ae:	428a      	cmp	r2, r1
 80077b0:	bfac      	ite	ge
 80077b2:	189b      	addge	r3, r3, r2
 80077b4:	185b      	addlt	r3, r3, r1
 80077b6:	930a      	str	r3, [sp, #40]	; 0x28
 80077b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ba:	b13b      	cbz	r3, 80077cc <_vfprintf_r+0x73c>
 80077bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80077be:	4641      	mov	r1, r8
 80077c0:	4658      	mov	r0, fp
 80077c2:	f002 fc50 	bl	800a066 <__sprint_r>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f040 841d 	bne.w	8008006 <_vfprintf_r+0xf76>
 80077cc:	2300      	movs	r3, #0
 80077ce:	9320      	str	r3, [sp, #128]	; 0x80
 80077d0:	9f04      	ldr	r7, [sp, #16]
 80077d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80077d4:	e4e9      	b.n	80071aa <_vfprintf_r+0x11a>
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	2b65      	cmp	r3, #101	; 0x65
 80077da:	f77f af0d 	ble.w	80075f8 <_vfprintf_r+0x568>
 80077de:	9b02      	ldr	r3, [sp, #8]
 80077e0:	2b66      	cmp	r3, #102	; 0x66
 80077e2:	d125      	bne.n	8007830 <_vfprintf_r+0x7a0>
 80077e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd1a      	ble.n	8007820 <_vfprintf_r+0x790>
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	d101      	bne.n	80077f4 <_vfprintf_r+0x764>
 80077f0:	07ee      	lsls	r6, r5, #31
 80077f2:	d502      	bpl.n	80077fa <_vfprintf_r+0x76a>
 80077f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f6:	4413      	add	r3, r2
 80077f8:	4453      	add	r3, sl
 80077fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077fc:	9208      	str	r2, [sp, #32]
 80077fe:	469a      	mov	sl, r3
 8007800:	e738      	b.n	8007674 <_vfprintf_r+0x5e4>
 8007802:	460a      	mov	r2, r1
 8007804:	e70d      	b.n	8007622 <_vfprintf_r+0x592>
 8007806:	f812 1b01 	ldrb.w	r1, [r2], #1
 800780a:	f803 1b01 	strb.w	r1, [r3], #1
 800780e:	e71d      	b.n	800764c <_vfprintf_r+0x5bc>
 8007810:	2230      	movs	r2, #48	; 0x30
 8007812:	4413      	add	r3, r2
 8007814:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007818:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800781c:	a91c      	add	r1, sp, #112	; 0x70
 800781e:	e719      	b.n	8007654 <_vfprintf_r+0x5c4>
 8007820:	f1ba 0f00 	cmp.w	sl, #0
 8007824:	d101      	bne.n	800782a <_vfprintf_r+0x79a>
 8007826:	07ed      	lsls	r5, r5, #31
 8007828:	d515      	bpl.n	8007856 <_vfprintf_r+0x7c6>
 800782a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782c:	3301      	adds	r3, #1
 800782e:	e7e3      	b.n	80077f8 <_vfprintf_r+0x768>
 8007830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	429a      	cmp	r2, r3
 8007836:	db06      	blt.n	8007846 <_vfprintf_r+0x7b6>
 8007838:	07e8      	lsls	r0, r5, #31
 800783a:	d50e      	bpl.n	800785a <_vfprintf_r+0x7ca>
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	4413      	add	r3, r2
 8007840:	2267      	movs	r2, #103	; 0x67
 8007842:	9202      	str	r2, [sp, #8]
 8007844:	e7d9      	b.n	80077fa <_vfprintf_r+0x76a>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800784a:	2a00      	cmp	r2, #0
 800784c:	440b      	add	r3, r1
 800784e:	dcf7      	bgt.n	8007840 <_vfprintf_r+0x7b0>
 8007850:	f1c2 0201 	rsb	r2, r2, #1
 8007854:	e7f3      	b.n	800783e <_vfprintf_r+0x7ae>
 8007856:	2301      	movs	r3, #1
 8007858:	e7cf      	b.n	80077fa <_vfprintf_r+0x76a>
 800785a:	4613      	mov	r3, r2
 800785c:	e7f0      	b.n	8007840 <_vfprintf_r+0x7b0>
 800785e:	b10b      	cbz	r3, 8007864 <_vfprintf_r+0x7d4>
 8007860:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007864:	f015 0f20 	tst.w	r5, #32
 8007868:	f107 0304 	add.w	r3, r7, #4
 800786c:	d008      	beq.n	8007880 <_vfprintf_r+0x7f0>
 800786e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	17ce      	asrs	r6, r1, #31
 8007874:	4608      	mov	r0, r1
 8007876:	4631      	mov	r1, r6
 8007878:	e9c2 0100 	strd	r0, r1, [r2]
 800787c:	461f      	mov	r7, r3
 800787e:	e494      	b.n	80071aa <_vfprintf_r+0x11a>
 8007880:	06e9      	lsls	r1, r5, #27
 8007882:	d503      	bpl.n	800788c <_vfprintf_r+0x7fc>
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007888:	6011      	str	r1, [r2, #0]
 800788a:	e7f7      	b.n	800787c <_vfprintf_r+0x7ec>
 800788c:	066a      	lsls	r2, r5, #25
 800788e:	d5f9      	bpl.n	8007884 <_vfprintf_r+0x7f4>
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8007896:	8011      	strh	r1, [r2, #0]
 8007898:	e7f0      	b.n	800787c <_vfprintf_r+0x7ec>
 800789a:	f045 0510 	orr.w	r5, r5, #16
 800789e:	f015 0320 	ands.w	r3, r5, #32
 80078a2:	d022      	beq.n	80078ea <_vfprintf_r+0x85a>
 80078a4:	3707      	adds	r7, #7
 80078a6:	f027 0707 	bic.w	r7, r7, #7
 80078aa:	f107 0308 	add.w	r3, r7, #8
 80078ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	2300      	movs	r3, #0
 80078b6:	2200      	movs	r2, #0
 80078b8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80078bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80078c0:	f000 83e8 	beq.w	8008094 <_vfprintf_r+0x1004>
 80078c4:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80078c8:	9208      	str	r2, [sp, #32]
 80078ca:	ea56 0207 	orrs.w	r2, r6, r7
 80078ce:	f040 83e6 	bne.w	800809e <_vfprintf_r+0x100e>
 80078d2:	f1ba 0f00 	cmp.w	sl, #0
 80078d6:	f000 80a9 	beq.w	8007a2c <_vfprintf_r+0x99c>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d075      	beq.n	80079ca <_vfprintf_r+0x93a>
 80078de:	2b02      	cmp	r3, #2
 80078e0:	f000 8090 	beq.w	8007a04 <_vfprintf_r+0x974>
 80078e4:	2600      	movs	r6, #0
 80078e6:	2700      	movs	r7, #0
 80078e8:	e3df      	b.n	80080aa <_vfprintf_r+0x101a>
 80078ea:	1d3a      	adds	r2, r7, #4
 80078ec:	f015 0110 	ands.w	r1, r5, #16
 80078f0:	9204      	str	r2, [sp, #16]
 80078f2:	d002      	beq.n	80078fa <_vfprintf_r+0x86a>
 80078f4:	683e      	ldr	r6, [r7, #0]
 80078f6:	2700      	movs	r7, #0
 80078f8:	e7dd      	b.n	80078b6 <_vfprintf_r+0x826>
 80078fa:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80078fe:	d0f9      	beq.n	80078f4 <_vfprintf_r+0x864>
 8007900:	883e      	ldrh	r6, [r7, #0]
 8007902:	2700      	movs	r7, #0
 8007904:	e7d6      	b.n	80078b4 <_vfprintf_r+0x824>
 8007906:	1d3b      	adds	r3, r7, #4
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	2330      	movs	r3, #48	; 0x30
 800790c:	2278      	movs	r2, #120	; 0x78
 800790e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <_vfprintf_r+0x8d4>)
 8007914:	683e      	ldr	r6, [r7, #0]
 8007916:	9311      	str	r3, [sp, #68]	; 0x44
 8007918:	2700      	movs	r7, #0
 800791a:	f045 0502 	orr.w	r5, r5, #2
 800791e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8007922:	2302      	movs	r3, #2
 8007924:	9202      	str	r2, [sp, #8]
 8007926:	e7c6      	b.n	80078b6 <_vfprintf_r+0x826>
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	2600      	movs	r6, #0
 800792c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	f8d7 9000 	ldr.w	r9, [r7]
 8007936:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800793a:	d00a      	beq.n	8007952 <_vfprintf_r+0x8c2>
 800793c:	4652      	mov	r2, sl
 800793e:	4631      	mov	r1, r6
 8007940:	4648      	mov	r0, r9
 8007942:	f7f8 fc45 	bl	80001d0 <memchr>
 8007946:	2800      	cmp	r0, #0
 8007948:	f000 808c 	beq.w	8007a64 <_vfprintf_r+0x9d4>
 800794c:	eba0 0a09 	sub.w	sl, r0, r9
 8007950:	e5cb      	b.n	80074ea <_vfprintf_r+0x45a>
 8007952:	4648      	mov	r0, r9
 8007954:	f7f8 fc8c 	bl	8000270 <strlen>
 8007958:	4682      	mov	sl, r0
 800795a:	e5c6      	b.n	80074ea <_vfprintf_r+0x45a>
 800795c:	0800ac04 	.word	0x0800ac04
 8007960:	0800ac14 	.word	0x0800ac14
 8007964:	0800abf1 	.word	0x0800abf1
 8007968:	f045 0510 	orr.w	r5, r5, #16
 800796c:	06ae      	lsls	r6, r5, #26
 800796e:	d509      	bpl.n	8007984 <_vfprintf_r+0x8f4>
 8007970:	3707      	adds	r7, #7
 8007972:	f027 0707 	bic.w	r7, r7, #7
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	2301      	movs	r3, #1
 8007982:	e798      	b.n	80078b6 <_vfprintf_r+0x826>
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	f015 0f10 	tst.w	r5, #16
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	d001      	beq.n	8007992 <_vfprintf_r+0x902>
 800798e:	683e      	ldr	r6, [r7, #0]
 8007990:	e002      	b.n	8007998 <_vfprintf_r+0x908>
 8007992:	0668      	lsls	r0, r5, #25
 8007994:	d5fb      	bpl.n	800798e <_vfprintf_r+0x8fe>
 8007996:	883e      	ldrh	r6, [r7, #0]
 8007998:	2700      	movs	r7, #0
 800799a:	e7f1      	b.n	8007980 <_vfprintf_r+0x8f0>
 800799c:	b10b      	cbz	r3, 80079a2 <_vfprintf_r+0x912>
 800799e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80079a2:	4ba2      	ldr	r3, [pc, #648]	; (8007c2c <_vfprintf_r+0xb9c>)
 80079a4:	e4ca      	b.n	800733c <_vfprintf_r+0x2ac>
 80079a6:	1d3b      	adds	r3, r7, #4
 80079a8:	f015 0f10 	tst.w	r5, #16
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	d001      	beq.n	80079b4 <_vfprintf_r+0x924>
 80079b0:	683e      	ldr	r6, [r7, #0]
 80079b2:	e002      	b.n	80079ba <_vfprintf_r+0x92a>
 80079b4:	066a      	lsls	r2, r5, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_vfprintf_r+0x920>
 80079b8:	883e      	ldrh	r6, [r7, #0]
 80079ba:	2700      	movs	r7, #0
 80079bc:	e4ca      	b.n	8007354 <_vfprintf_r+0x2c4>
 80079be:	464b      	mov	r3, r9
 80079c0:	e374      	b.n	80080ac <_vfprintf_r+0x101c>
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	bf08      	it	eq
 80079c6:	2e0a      	cmpeq	r6, #10
 80079c8:	d205      	bcs.n	80079d6 <_vfprintf_r+0x946>
 80079ca:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80079ce:	3630      	adds	r6, #48	; 0x30
 80079d0:	f809 6d41 	strb.w	r6, [r9, #-65]!
 80079d4:	e385      	b.n	80080e2 <_vfprintf_r+0x1052>
 80079d6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	220a      	movs	r2, #10
 80079e0:	2300      	movs	r3, #0
 80079e2:	f7f9 f8dd 	bl	8000ba0 <__aeabi_uldivmod>
 80079e6:	3230      	adds	r2, #48	; 0x30
 80079e8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80079ec:	2300      	movs	r3, #0
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	220a      	movs	r2, #10
 80079f4:	f7f9 f8d4 	bl	8000ba0 <__aeabi_uldivmod>
 80079f8:	4606      	mov	r6, r0
 80079fa:	460f      	mov	r7, r1
 80079fc:	ea56 0307 	orrs.w	r3, r6, r7
 8007a00:	d1eb      	bne.n	80079da <_vfprintf_r+0x94a>
 8007a02:	e36e      	b.n	80080e2 <_vfprintf_r+0x1052>
 8007a04:	2600      	movs	r6, #0
 8007a06:	2700      	movs	r7, #0
 8007a08:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007a0c:	f006 030f 	and.w	r3, r6, #15
 8007a10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a12:	5cd3      	ldrb	r3, [r2, r3]
 8007a14:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007a18:	0933      	lsrs	r3, r6, #4
 8007a1a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007a1e:	093a      	lsrs	r2, r7, #4
 8007a20:	461e      	mov	r6, r3
 8007a22:	4617      	mov	r7, r2
 8007a24:	ea56 0307 	orrs.w	r3, r6, r7
 8007a28:	d1f0      	bne.n	8007a0c <_vfprintf_r+0x97c>
 8007a2a:	e35a      	b.n	80080e2 <_vfprintf_r+0x1052>
 8007a2c:	b93b      	cbnz	r3, 8007a3e <_vfprintf_r+0x9ae>
 8007a2e:	07e8      	lsls	r0, r5, #31
 8007a30:	d505      	bpl.n	8007a3e <_vfprintf_r+0x9ae>
 8007a32:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8007a36:	2330      	movs	r3, #48	; 0x30
 8007a38:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8007a3c:	e351      	b.n	80080e2 <_vfprintf_r+0x1052>
 8007a3e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8007a42:	e34e      	b.n	80080e2 <_vfprintf_r+0x1052>
 8007a44:	b10b      	cbz	r3, 8007a4a <_vfprintf_r+0x9ba>
 8007a46:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007a4a:	9b02      	ldr	r3, [sp, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8302 	beq.w	8008056 <_vfprintf_r+0xfc6>
 8007a52:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007a56:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007a60:	9704      	str	r7, [sp, #16]
 8007a62:	e4e9      	b.n	8007438 <_vfprintf_r+0x3a8>
 8007a64:	4606      	mov	r6, r0
 8007a66:	e540      	b.n	80074ea <_vfprintf_r+0x45a>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	6063      	str	r3, [r4, #4]
 8007a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a6e:	3310      	adds	r3, #16
 8007a70:	9321      	str	r3, [sp, #132]	; 0x84
 8007a72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a74:	3301      	adds	r3, #1
 8007a76:	2b07      	cmp	r3, #7
 8007a78:	9320      	str	r3, [sp, #128]	; 0x80
 8007a7a:	dc02      	bgt.n	8007a82 <_vfprintf_r+0x9f2>
 8007a7c:	3408      	adds	r4, #8
 8007a7e:	3f10      	subs	r7, #16
 8007a80:	e61a      	b.n	80076b8 <_vfprintf_r+0x628>
 8007a82:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a84:	4641      	mov	r1, r8
 8007a86:	4658      	mov	r0, fp
 8007a88:	f002 faed 	bl	800a066 <__sprint_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f040 82ba 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007a92:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a94:	e7f3      	b.n	8007a7e <_vfprintf_r+0x9ee>
 8007a96:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a98:	4641      	mov	r1, r8
 8007a9a:	4658      	mov	r0, fp
 8007a9c:	f002 fae3 	bl	800a066 <__sprint_r>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f040 82b0 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007aa6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007aa8:	e616      	b.n	80076d8 <_vfprintf_r+0x648>
 8007aaa:	aa1f      	add	r2, sp, #124	; 0x7c
 8007aac:	4641      	mov	r1, r8
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f002 fad9 	bl	800a066 <__sprint_r>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 82a6 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007aba:	ac2c      	add	r4, sp, #176	; 0xb0
 8007abc:	e61e      	b.n	80076fc <_vfprintf_r+0x66c>
 8007abe:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f002 facf 	bl	800a066 <__sprint_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f040 829c 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007ace:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ad0:	e624      	b.n	800771c <_vfprintf_r+0x68c>
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ad8:	3210      	adds	r2, #16
 8007ada:	9221      	str	r2, [sp, #132]	; 0x84
 8007adc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ade:	3201      	adds	r2, #1
 8007ae0:	2a07      	cmp	r2, #7
 8007ae2:	9220      	str	r2, [sp, #128]	; 0x80
 8007ae4:	dc02      	bgt.n	8007aec <_vfprintf_r+0xa5c>
 8007ae6:	3408      	adds	r4, #8
 8007ae8:	3f10      	subs	r7, #16
 8007aea:	e620      	b.n	800772e <_vfprintf_r+0x69e>
 8007aec:	aa1f      	add	r2, sp, #124	; 0x7c
 8007aee:	4641      	mov	r1, r8
 8007af0:	4658      	mov	r0, fp
 8007af2:	9314      	str	r3, [sp, #80]	; 0x50
 8007af4:	f002 fab7 	bl	800a066 <__sprint_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f040 8284 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007afe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b02:	e7f1      	b.n	8007ae8 <_vfprintf_r+0xa58>
 8007b04:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b06:	4641      	mov	r1, r8
 8007b08:	4658      	mov	r0, fp
 8007b0a:	f002 faac 	bl	800a066 <__sprint_r>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f040 8279 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007b14:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b16:	e619      	b.n	800774c <_vfprintf_r+0x6bc>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b1e:	3310      	adds	r3, #16
 8007b20:	9321      	str	r3, [sp, #132]	; 0x84
 8007b22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b24:	3301      	adds	r3, #1
 8007b26:	2b07      	cmp	r3, #7
 8007b28:	9320      	str	r3, [sp, #128]	; 0x80
 8007b2a:	dc02      	bgt.n	8007b32 <_vfprintf_r+0xaa2>
 8007b2c:	3408      	adds	r4, #8
 8007b2e:	3e10      	subs	r6, #16
 8007b30:	e611      	b.n	8007756 <_vfprintf_r+0x6c6>
 8007b32:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b34:	4641      	mov	r1, r8
 8007b36:	4658      	mov	r0, fp
 8007b38:	f002 fa95 	bl	800a066 <__sprint_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 8262 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007b42:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b44:	e7f3      	b.n	8007b2e <_vfprintf_r+0xa9e>
 8007b46:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b48:	4641      	mov	r1, r8
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f002 fa8b 	bl	800a066 <__sprint_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f040 8258 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007b56:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b58:	e60c      	b.n	8007774 <_vfprintf_r+0x6e4>
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	2b65      	cmp	r3, #101	; 0x65
 8007b5e:	f340 81ad 	ble.w	8007ebc <_vfprintf_r+0xe2c>
 8007b62:	2200      	movs	r2, #0
 8007b64:	2300      	movs	r3, #0
 8007b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b6a:	f7f8 ffa9 	bl	8000ac0 <__aeabi_dcmpeq>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d062      	beq.n	8007c38 <_vfprintf_r+0xba8>
 8007b72:	4b2f      	ldr	r3, [pc, #188]	; (8007c30 <_vfprintf_r+0xba0>)
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	2301      	movs	r3, #1
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	9321      	str	r3, [sp, #132]	; 0x84
 8007b80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b82:	3301      	adds	r3, #1
 8007b84:	2b07      	cmp	r3, #7
 8007b86:	9320      	str	r3, [sp, #128]	; 0x80
 8007b88:	dc25      	bgt.n	8007bd6 <_vfprintf_r+0xb46>
 8007b8a:	3408      	adds	r4, #8
 8007b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8e:	9a03      	ldr	r2, [sp, #12]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	db02      	blt.n	8007b9a <_vfprintf_r+0xb0a>
 8007b94:	07ea      	lsls	r2, r5, #31
 8007b96:	f57f ae04 	bpl.w	80077a2 <_vfprintf_r+0x712>
 8007b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	6063      	str	r3, [r4, #4]
 8007ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba6:	4413      	add	r3, r2
 8007ba8:	9321      	str	r3, [sp, #132]	; 0x84
 8007baa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bac:	3301      	adds	r3, #1
 8007bae:	2b07      	cmp	r3, #7
 8007bb0:	9320      	str	r3, [sp, #128]	; 0x80
 8007bb2:	dc1a      	bgt.n	8007bea <_vfprintf_r+0xb5a>
 8007bb4:	3408      	adds	r4, #8
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	1e5e      	subs	r6, r3, #1
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	f77f adf1 	ble.w	80077a2 <_vfprintf_r+0x712>
 8007bc0:	4f1c      	ldr	r7, [pc, #112]	; (8007c34 <_vfprintf_r+0xba4>)
 8007bc2:	f04f 0910 	mov.w	r9, #16
 8007bc6:	2e10      	cmp	r6, #16
 8007bc8:	6027      	str	r7, [r4, #0]
 8007bca:	dc18      	bgt.n	8007bfe <_vfprintf_r+0xb6e>
 8007bcc:	6066      	str	r6, [r4, #4]
 8007bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd0:	441e      	add	r6, r3
 8007bd2:	9621      	str	r6, [sp, #132]	; 0x84
 8007bd4:	e5d6      	b.n	8007784 <_vfprintf_r+0x6f4>
 8007bd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bd8:	4641      	mov	r1, r8
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f002 fa43 	bl	800a066 <__sprint_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f040 8210 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007be6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007be8:	e7d0      	b.n	8007b8c <_vfprintf_r+0xafc>
 8007bea:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bec:	4641      	mov	r1, r8
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f002 fa39 	bl	800a066 <__sprint_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f040 8206 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007bfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8007bfc:	e7db      	b.n	8007bb6 <_vfprintf_r+0xb26>
 8007bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c00:	f8c4 9004 	str.w	r9, [r4, #4]
 8007c04:	3310      	adds	r3, #16
 8007c06:	9321      	str	r3, [sp, #132]	; 0x84
 8007c08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	2b07      	cmp	r3, #7
 8007c0e:	9320      	str	r3, [sp, #128]	; 0x80
 8007c10:	dc02      	bgt.n	8007c18 <_vfprintf_r+0xb88>
 8007c12:	3408      	adds	r4, #8
 8007c14:	3e10      	subs	r6, #16
 8007c16:	e7d6      	b.n	8007bc6 <_vfprintf_r+0xb36>
 8007c18:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f002 fa22 	bl	800a066 <__sprint_r>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f040 81ef 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007c28:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c2a:	e7f3      	b.n	8007c14 <_vfprintf_r+0xb84>
 8007c2c:	0800abf1 	.word	0x0800abf1
 8007c30:	0800ac02 	.word	0x0800ac02
 8007c34:	0800ac14 	.word	0x0800ac14
 8007c38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dc7a      	bgt.n	8007d34 <_vfprintf_r+0xca4>
 8007c3e:	4b9d      	ldr	r3, [pc, #628]	; (8007eb4 <_vfprintf_r+0xe24>)
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	2301      	movs	r3, #1
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c48:	3301      	adds	r3, #1
 8007c4a:	9321      	str	r3, [sp, #132]	; 0x84
 8007c4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c4e:	3301      	adds	r3, #1
 8007c50:	2b07      	cmp	r3, #7
 8007c52:	9320      	str	r3, [sp, #128]	; 0x80
 8007c54:	dc44      	bgt.n	8007ce0 <_vfprintf_r+0xc50>
 8007c56:	3408      	adds	r4, #8
 8007c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c5a:	b923      	cbnz	r3, 8007c66 <_vfprintf_r+0xbd6>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	b913      	cbnz	r3, 8007c66 <_vfprintf_r+0xbd6>
 8007c60:	07eb      	lsls	r3, r5, #31
 8007c62:	f57f ad9e 	bpl.w	80077a2 <_vfprintf_r+0x712>
 8007c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c72:	4413      	add	r3, r2
 8007c74:	9321      	str	r3, [sp, #132]	; 0x84
 8007c76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c78:	3301      	adds	r3, #1
 8007c7a:	2b07      	cmp	r3, #7
 8007c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8007c7e:	dc39      	bgt.n	8007cf4 <_vfprintf_r+0xc64>
 8007c80:	f104 0308 	add.w	r3, r4, #8
 8007c84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	da19      	bge.n	8007cbe <_vfprintf_r+0xc2e>
 8007c8a:	4f8b      	ldr	r7, [pc, #556]	; (8007eb8 <_vfprintf_r+0xe28>)
 8007c8c:	4276      	negs	r6, r6
 8007c8e:	2410      	movs	r4, #16
 8007c90:	2e10      	cmp	r6, #16
 8007c92:	601f      	str	r7, [r3, #0]
 8007c94:	dc38      	bgt.n	8007d08 <_vfprintf_r+0xc78>
 8007c96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c98:	605e      	str	r6, [r3, #4]
 8007c9a:	4416      	add	r6, r2
 8007c9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c9e:	9621      	str	r6, [sp, #132]	; 0x84
 8007ca0:	3201      	adds	r2, #1
 8007ca2:	2a07      	cmp	r2, #7
 8007ca4:	f103 0308 	add.w	r3, r3, #8
 8007ca8:	9220      	str	r2, [sp, #128]	; 0x80
 8007caa:	dd08      	ble.n	8007cbe <_vfprintf_r+0xc2e>
 8007cac:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cae:	4641      	mov	r1, r8
 8007cb0:	4658      	mov	r0, fp
 8007cb2:	f002 f9d8 	bl	800a066 <__sprint_r>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f040 81a5 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007cbc:	ab2c      	add	r3, sp, #176	; 0xb0
 8007cbe:	9a03      	ldr	r2, [sp, #12]
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	9903      	ldr	r1, [sp, #12]
 8007cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cc6:	f8c3 9000 	str.w	r9, [r3]
 8007cca:	440a      	add	r2, r1
 8007ccc:	9221      	str	r2, [sp, #132]	; 0x84
 8007cce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cd0:	3201      	adds	r2, #1
 8007cd2:	2a07      	cmp	r2, #7
 8007cd4:	9220      	str	r2, [sp, #128]	; 0x80
 8007cd6:	f73f ad5b 	bgt.w	8007790 <_vfprintf_r+0x700>
 8007cda:	f103 0408 	add.w	r4, r3, #8
 8007cde:	e560      	b.n	80077a2 <_vfprintf_r+0x712>
 8007ce0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f002 f9be 	bl	800a066 <__sprint_r>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f040 818b 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007cf0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007cf2:	e7b1      	b.n	8007c58 <_vfprintf_r+0xbc8>
 8007cf4:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	4658      	mov	r0, fp
 8007cfa:	f002 f9b4 	bl	800a066 <__sprint_r>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 8181 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007d04:	ab2c      	add	r3, sp, #176	; 0xb0
 8007d06:	e7bd      	b.n	8007c84 <_vfprintf_r+0xbf4>
 8007d08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d0a:	605c      	str	r4, [r3, #4]
 8007d0c:	3210      	adds	r2, #16
 8007d0e:	9221      	str	r2, [sp, #132]	; 0x84
 8007d10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d12:	3201      	adds	r2, #1
 8007d14:	2a07      	cmp	r2, #7
 8007d16:	9220      	str	r2, [sp, #128]	; 0x80
 8007d18:	dc02      	bgt.n	8007d20 <_vfprintf_r+0xc90>
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	3e10      	subs	r6, #16
 8007d1e:	e7b7      	b.n	8007c90 <_vfprintf_r+0xc00>
 8007d20:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d22:	4641      	mov	r1, r8
 8007d24:	4658      	mov	r0, fp
 8007d26:	f002 f99e 	bl	800a066 <__sprint_r>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f040 816b 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007d30:	ab2c      	add	r3, sp, #176	; 0xb0
 8007d32:	e7f3      	b.n	8007d1c <_vfprintf_r+0xc8c>
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	9a03      	ldr	r2, [sp, #12]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	bfa8      	it	ge
 8007d3c:	4613      	movge	r3, r2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	461e      	mov	r6, r3
 8007d42:	dd0b      	ble.n	8007d5c <_vfprintf_r+0xccc>
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d48:	f8c4 9000 	str.w	r9, [r4]
 8007d4c:	4433      	add	r3, r6
 8007d4e:	9321      	str	r3, [sp, #132]	; 0x84
 8007d50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d52:	3301      	adds	r3, #1
 8007d54:	2b07      	cmp	r3, #7
 8007d56:	9320      	str	r3, [sp, #128]	; 0x80
 8007d58:	dc62      	bgt.n	8007e20 <_vfprintf_r+0xd90>
 8007d5a:	3408      	adds	r4, #8
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	bfa8      	it	ge
 8007d62:	1b9b      	subge	r3, r3, r6
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	461e      	mov	r6, r3
 8007d68:	dd0f      	ble.n	8007d8a <_vfprintf_r+0xcfa>
 8007d6a:	4f53      	ldr	r7, [pc, #332]	; (8007eb8 <_vfprintf_r+0xe28>)
 8007d6c:	f04f 0a10 	mov.w	sl, #16
 8007d70:	2e10      	cmp	r6, #16
 8007d72:	6027      	str	r7, [r4, #0]
 8007d74:	dc5e      	bgt.n	8007e34 <_vfprintf_r+0xda4>
 8007d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d78:	6066      	str	r6, [r4, #4]
 8007d7a:	441e      	add	r6, r3
 8007d7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d7e:	9621      	str	r6, [sp, #132]	; 0x84
 8007d80:	3301      	adds	r3, #1
 8007d82:	2b07      	cmp	r3, #7
 8007d84:	9320      	str	r3, [sp, #128]	; 0x80
 8007d86:	dc6c      	bgt.n	8007e62 <_vfprintf_r+0xdd2>
 8007d88:	3408      	adds	r4, #8
 8007d8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d8c:	9a03      	ldr	r2, [sp, #12]
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	db01      	blt.n	8007d96 <_vfprintf_r+0xd06>
 8007d92:	07ef      	lsls	r7, r5, #31
 8007d94:	d50d      	bpl.n	8007db2 <_vfprintf_r+0xd22>
 8007d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9c:	6063      	str	r3, [r4, #4]
 8007d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da2:	4413      	add	r3, r2
 8007da4:	9321      	str	r3, [sp, #132]	; 0x84
 8007da6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007da8:	3301      	adds	r3, #1
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	9320      	str	r3, [sp, #128]	; 0x80
 8007dae:	dc62      	bgt.n	8007e76 <_vfprintf_r+0xde6>
 8007db0:	3408      	adds	r4, #8
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	9a08      	ldr	r2, [sp, #32]
 8007db6:	1a9e      	subs	r6, r3, r2
 8007db8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dba:	9a03      	ldr	r2, [sp, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	429e      	cmp	r6, r3
 8007dc0:	bfa8      	it	ge
 8007dc2:	461e      	movge	r6, r3
 8007dc4:	2e00      	cmp	r6, #0
 8007dc6:	dd0c      	ble.n	8007de2 <_vfprintf_r+0xd52>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	444b      	add	r3, r9
 8007dcc:	e884 0048 	stmia.w	r4, {r3, r6}
 8007dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd2:	4433      	add	r3, r6
 8007dd4:	9321      	str	r3, [sp, #132]	; 0x84
 8007dd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dd8:	3301      	adds	r3, #1
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	9320      	str	r3, [sp, #128]	; 0x80
 8007dde:	dc54      	bgt.n	8007e8a <_vfprintf_r+0xdfa>
 8007de0:	3408      	adds	r4, #8
 8007de2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007de4:	9a03      	ldr	r2, [sp, #12]
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	eba2 0303 	sub.w	r3, r2, r3
 8007dec:	bfac      	ite	ge
 8007dee:	1b9e      	subge	r6, r3, r6
 8007df0:	461e      	movlt	r6, r3
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	f77f acd5 	ble.w	80077a2 <_vfprintf_r+0x712>
 8007df8:	4f2f      	ldr	r7, [pc, #188]	; (8007eb8 <_vfprintf_r+0xe28>)
 8007dfa:	f04f 0910 	mov.w	r9, #16
 8007dfe:	2e10      	cmp	r6, #16
 8007e00:	6027      	str	r7, [r4, #0]
 8007e02:	f77f aee3 	ble.w	8007bcc <_vfprintf_r+0xb3c>
 8007e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e08:	f8c4 9004 	str.w	r9, [r4, #4]
 8007e0c:	3310      	adds	r3, #16
 8007e0e:	9321      	str	r3, [sp, #132]	; 0x84
 8007e10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e12:	3301      	adds	r3, #1
 8007e14:	2b07      	cmp	r3, #7
 8007e16:	9320      	str	r3, [sp, #128]	; 0x80
 8007e18:	dc41      	bgt.n	8007e9e <_vfprintf_r+0xe0e>
 8007e1a:	3408      	adds	r4, #8
 8007e1c:	3e10      	subs	r6, #16
 8007e1e:	e7ee      	b.n	8007dfe <_vfprintf_r+0xd6e>
 8007e20:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e22:	4641      	mov	r1, r8
 8007e24:	4658      	mov	r0, fp
 8007e26:	f002 f91e 	bl	800a066 <__sprint_r>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f040 80eb 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007e30:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e32:	e793      	b.n	8007d5c <_vfprintf_r+0xccc>
 8007e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e36:	f8c4 a004 	str.w	sl, [r4, #4]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	9321      	str	r3, [sp, #132]	; 0x84
 8007e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e40:	3301      	adds	r3, #1
 8007e42:	2b07      	cmp	r3, #7
 8007e44:	9320      	str	r3, [sp, #128]	; 0x80
 8007e46:	dc02      	bgt.n	8007e4e <_vfprintf_r+0xdbe>
 8007e48:	3408      	adds	r4, #8
 8007e4a:	3e10      	subs	r6, #16
 8007e4c:	e790      	b.n	8007d70 <_vfprintf_r+0xce0>
 8007e4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e50:	4641      	mov	r1, r8
 8007e52:	4658      	mov	r0, fp
 8007e54:	f002 f907 	bl	800a066 <__sprint_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f040 80d4 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007e5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e60:	e7f3      	b.n	8007e4a <_vfprintf_r+0xdba>
 8007e62:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e64:	4641      	mov	r1, r8
 8007e66:	4658      	mov	r0, fp
 8007e68:	f002 f8fd 	bl	800a066 <__sprint_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f040 80ca 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007e72:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e74:	e789      	b.n	8007d8a <_vfprintf_r+0xcfa>
 8007e76:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e78:	4641      	mov	r1, r8
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f002 f8f3 	bl	800a066 <__sprint_r>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f040 80c0 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007e86:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e88:	e793      	b.n	8007db2 <_vfprintf_r+0xd22>
 8007e8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f002 f8e9 	bl	800a066 <__sprint_r>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f040 80b6 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007e9a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e9c:	e7a1      	b.n	8007de2 <_vfprintf_r+0xd52>
 8007e9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	4658      	mov	r0, fp
 8007ea4:	f002 f8df 	bl	800a066 <__sprint_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	f040 80ac 	bne.w	8008006 <_vfprintf_r+0xf76>
 8007eae:	ac2c      	add	r4, sp, #176	; 0xb0
 8007eb0:	e7b4      	b.n	8007e1c <_vfprintf_r+0xd8c>
 8007eb2:	bf00      	nop
 8007eb4:	0800ac02 	.word	0x0800ac02
 8007eb8:	0800ac14 	.word	0x0800ac14
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	dc01      	bgt.n	8007ec6 <_vfprintf_r+0xe36>
 8007ec2:	07ee      	lsls	r6, r5, #31
 8007ec4:	d576      	bpl.n	8007fb4 <_vfprintf_r+0xf24>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ecc:	f8c4 9000 	str.w	r9, [r4]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ed4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	9320      	str	r3, [sp, #128]	; 0x80
 8007edc:	dc36      	bgt.n	8007f4c <_vfprintf_r+0xebc>
 8007ede:	3408      	adds	r4, #8
 8007ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eec:	4413      	add	r3, r2
 8007eee:	9321      	str	r3, [sp, #132]	; 0x84
 8007ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	2b07      	cmp	r3, #7
 8007ef6:	9320      	str	r3, [sp, #128]	; 0x80
 8007ef8:	dc31      	bgt.n	8007f5e <_vfprintf_r+0xece>
 8007efa:	3408      	adds	r4, #8
 8007efc:	2300      	movs	r3, #0
 8007efe:	2200      	movs	r2, #0
 8007f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f04:	f7f8 fddc 	bl	8000ac0 <__aeabi_dcmpeq>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	1e5e      	subs	r6, r3, #1
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d12f      	bne.n	8007f70 <_vfprintf_r+0xee0>
 8007f10:	f109 0301 	add.w	r3, r9, #1
 8007f14:	e884 0048 	stmia.w	r4, {r3, r6}
 8007f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f1a:	9a03      	ldr	r2, [sp, #12]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	9321      	str	r3, [sp, #132]	; 0x84
 8007f22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f24:	3301      	adds	r3, #1
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	9320      	str	r3, [sp, #128]	; 0x80
 8007f2a:	dd4a      	ble.n	8007fc2 <_vfprintf_r+0xf32>
 8007f2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f2e:	4641      	mov	r1, r8
 8007f30:	4658      	mov	r0, fp
 8007f32:	f002 f898 	bl	800a066 <__sprint_r>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d165      	bne.n	8008006 <_vfprintf_r+0xf76>
 8007f3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f42:	6063      	str	r3, [r4, #4]
 8007f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f48:	4413      	add	r3, r2
 8007f4a:	e41a      	b.n	8007782 <_vfprintf_r+0x6f2>
 8007f4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4658      	mov	r0, fp
 8007f52:	f002 f888 	bl	800a066 <__sprint_r>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d155      	bne.n	8008006 <_vfprintf_r+0xf76>
 8007f5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f5c:	e7c0      	b.n	8007ee0 <_vfprintf_r+0xe50>
 8007f5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f60:	4641      	mov	r1, r8
 8007f62:	4658      	mov	r0, fp
 8007f64:	f002 f87f 	bl	800a066 <__sprint_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d14c      	bne.n	8008006 <_vfprintf_r+0xf76>
 8007f6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f6e:	e7c5      	b.n	8007efc <_vfprintf_r+0xe6c>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	dde3      	ble.n	8007f3c <_vfprintf_r+0xeac>
 8007f74:	4f60      	ldr	r7, [pc, #384]	; (80080f8 <_vfprintf_r+0x1068>)
 8007f76:	f04f 0910 	mov.w	r9, #16
 8007f7a:	2e10      	cmp	r6, #16
 8007f7c:	6027      	str	r7, [r4, #0]
 8007f7e:	dc04      	bgt.n	8007f8a <_vfprintf_r+0xefa>
 8007f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f82:	6066      	str	r6, [r4, #4]
 8007f84:	441e      	add	r6, r3
 8007f86:	9621      	str	r6, [sp, #132]	; 0x84
 8007f88:	e7cb      	b.n	8007f22 <_vfprintf_r+0xe92>
 8007f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f8c:	f8c4 9004 	str.w	r9, [r4, #4]
 8007f90:	3310      	adds	r3, #16
 8007f92:	9321      	str	r3, [sp, #132]	; 0x84
 8007f94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f96:	3301      	adds	r3, #1
 8007f98:	2b07      	cmp	r3, #7
 8007f9a:	9320      	str	r3, [sp, #128]	; 0x80
 8007f9c:	dc02      	bgt.n	8007fa4 <_vfprintf_r+0xf14>
 8007f9e:	3408      	adds	r4, #8
 8007fa0:	3e10      	subs	r6, #16
 8007fa2:	e7ea      	b.n	8007f7a <_vfprintf_r+0xeea>
 8007fa4:	aa1f      	add	r2, sp, #124	; 0x7c
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	4658      	mov	r0, fp
 8007faa:	f002 f85c 	bl	800a066 <__sprint_r>
 8007fae:	bb50      	cbnz	r0, 8008006 <_vfprintf_r+0xf76>
 8007fb0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007fb2:	e7f5      	b.n	8007fa0 <_vfprintf_r+0xf10>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fba:	f8c4 9000 	str.w	r9, [r4]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	e7ae      	b.n	8007f20 <_vfprintf_r+0xe90>
 8007fc2:	3408      	adds	r4, #8
 8007fc4:	e7ba      	b.n	8007f3c <_vfprintf_r+0xeac>
 8007fc6:	3408      	adds	r4, #8
 8007fc8:	f7ff bbeb 	b.w	80077a2 <_vfprintf_r+0x712>
 8007fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd0:	1a9d      	subs	r5, r3, r2
 8007fd2:	2d00      	cmp	r5, #0
 8007fd4:	f77f abe8 	ble.w	80077a8 <_vfprintf_r+0x718>
 8007fd8:	2610      	movs	r6, #16
 8007fda:	4b48      	ldr	r3, [pc, #288]	; (80080fc <_vfprintf_r+0x106c>)
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2d10      	cmp	r5, #16
 8007fe0:	dc24      	bgt.n	800802c <_vfprintf_r+0xf9c>
 8007fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe4:	6065      	str	r5, [r4, #4]
 8007fe6:	441d      	add	r5, r3
 8007fe8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007fea:	9521      	str	r5, [sp, #132]	; 0x84
 8007fec:	3301      	adds	r3, #1
 8007fee:	2b07      	cmp	r3, #7
 8007ff0:	9320      	str	r3, [sp, #128]	; 0x80
 8007ff2:	f77f abd9 	ble.w	80077a8 <_vfprintf_r+0x718>
 8007ff6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	f002 f833 	bl	800a066 <__sprint_r>
 8008000:	2800      	cmp	r0, #0
 8008002:	f43f abd1 	beq.w	80077a8 <_vfprintf_r+0x718>
 8008006:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	d407      	bmi.n	800801e <_vfprintf_r+0xf8e>
 800800e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008012:	059a      	lsls	r2, r3, #22
 8008014:	d403      	bmi.n	800801e <_vfprintf_r+0xf8e>
 8008016:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800801a:	f001 fa66 	bl	80094ea <__retarget_lock_release_recursive>
 800801e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008022:	065b      	lsls	r3, r3, #25
 8008024:	f57f a8af 	bpl.w	8007186 <_vfprintf_r+0xf6>
 8008028:	f7ff b882 	b.w	8007130 <_vfprintf_r+0xa0>
 800802c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800802e:	6066      	str	r6, [r4, #4]
 8008030:	3310      	adds	r3, #16
 8008032:	9321      	str	r3, [sp, #132]	; 0x84
 8008034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008036:	3301      	adds	r3, #1
 8008038:	2b07      	cmp	r3, #7
 800803a:	9320      	str	r3, [sp, #128]	; 0x80
 800803c:	dc02      	bgt.n	8008044 <_vfprintf_r+0xfb4>
 800803e:	3408      	adds	r4, #8
 8008040:	3d10      	subs	r5, #16
 8008042:	e7ca      	b.n	8007fda <_vfprintf_r+0xf4a>
 8008044:	aa1f      	add	r2, sp, #124	; 0x7c
 8008046:	4641      	mov	r1, r8
 8008048:	4658      	mov	r0, fp
 800804a:	f002 f80c 	bl	800a066 <__sprint_r>
 800804e:	2800      	cmp	r0, #0
 8008050:	d1d9      	bne.n	8008006 <_vfprintf_r+0xf76>
 8008052:	ac2c      	add	r4, sp, #176	; 0xb0
 8008054:	e7f4      	b.n	8008040 <_vfprintf_r+0xfb0>
 8008056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008058:	b913      	cbnz	r3, 8008060 <_vfprintf_r+0xfd0>
 800805a:	2300      	movs	r3, #0
 800805c:	9320      	str	r3, [sp, #128]	; 0x80
 800805e:	e7d2      	b.n	8008006 <_vfprintf_r+0xf76>
 8008060:	aa1f      	add	r2, sp, #124	; 0x7c
 8008062:	4641      	mov	r1, r8
 8008064:	4658      	mov	r0, fp
 8008066:	f001 fffe 	bl	800a066 <__sprint_r>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0f5      	beq.n	800805a <_vfprintf_r+0xfca>
 800806e:	e7ca      	b.n	8008006 <_vfprintf_r+0xf76>
 8008070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	f7f8 fd54 	bl	8000b24 <__aeabi_dcmpun>
 800807c:	2800      	cmp	r0, #0
 800807e:	f43f aa36 	beq.w	80074ee <_vfprintf_r+0x45e>
 8008082:	4b1f      	ldr	r3, [pc, #124]	; (8008100 <_vfprintf_r+0x1070>)
 8008084:	4a1f      	ldr	r2, [pc, #124]	; (8008104 <_vfprintf_r+0x1074>)
 8008086:	f7ff ba26 	b.w	80074d6 <_vfprintf_r+0x446>
 800808a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800808c:	1a1b      	subs	r3, r3, r0
 800808e:	9303      	str	r3, [sp, #12]
 8008090:	f7ff baa9 	b.w	80075e6 <_vfprintf_r+0x556>
 8008094:	ea56 0207 	orrs.w	r2, r6, r7
 8008098:	9508      	str	r5, [sp, #32]
 800809a:	f43f ac1e 	beq.w	80078da <_vfprintf_r+0x84a>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	f43f ac8f 	beq.w	80079c2 <_vfprintf_r+0x932>
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f43f acaf 	beq.w	8007a08 <_vfprintf_r+0x978>
 80080aa:	ab2c      	add	r3, sp, #176	; 0xb0
 80080ac:	08f1      	lsrs	r1, r6, #3
 80080ae:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80080b2:	08f8      	lsrs	r0, r7, #3
 80080b4:	f006 0207 	and.w	r2, r6, #7
 80080b8:	4607      	mov	r7, r0
 80080ba:	460e      	mov	r6, r1
 80080bc:	3230      	adds	r2, #48	; 0x30
 80080be:	ea56 0107 	orrs.w	r1, r6, r7
 80080c2:	f103 39ff 	add.w	r9, r3, #4294967295
 80080c6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80080ca:	f47f ac78 	bne.w	80079be <_vfprintf_r+0x92e>
 80080ce:	9908      	ldr	r1, [sp, #32]
 80080d0:	07cd      	lsls	r5, r1, #31
 80080d2:	d506      	bpl.n	80080e2 <_vfprintf_r+0x1052>
 80080d4:	2a30      	cmp	r2, #48	; 0x30
 80080d6:	d004      	beq.n	80080e2 <_vfprintf_r+0x1052>
 80080d8:	2230      	movs	r2, #48	; 0x30
 80080da:	f809 2c01 	strb.w	r2, [r9, #-1]
 80080de:	f1a3 0902 	sub.w	r9, r3, #2
 80080e2:	4656      	mov	r6, sl
 80080e4:	2300      	movs	r3, #0
 80080e6:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 80080ea:	9d08      	ldr	r5, [sp, #32]
 80080ec:	9308      	str	r3, [sp, #32]
 80080ee:	ebaa 0a09 	sub.w	sl, sl, r9
 80080f2:	f7ff bac6 	b.w	8007682 <_vfprintf_r+0x5f2>
 80080f6:	bf00      	nop
 80080f8:	0800ac14 	.word	0x0800ac14
 80080fc:	0800ac04 	.word	0x0800ac04
 8008100:	0800abd8 	.word	0x0800abd8
 8008104:	0800abdc 	.word	0x0800abdc

08008108 <__sbprintf>:
 8008108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008110:	461f      	mov	r7, r3
 8008112:	8989      	ldrh	r1, [r1, #12]
 8008114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008116:	9319      	str	r3, [sp, #100]	; 0x64
 8008118:	89e3      	ldrh	r3, [r4, #14]
 800811a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800811e:	f021 0102 	bic.w	r1, r1, #2
 8008122:	6a23      	ldr	r3, [r4, #32]
 8008124:	f8ad 100c 	strh.w	r1, [sp, #12]
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	a91a      	add	r1, sp, #104	; 0x68
 800812c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800812e:	930a      	str	r3, [sp, #40]	; 0x28
 8008130:	4615      	mov	r5, r2
 8008132:	2300      	movs	r3, #0
 8008134:	4606      	mov	r6, r0
 8008136:	9100      	str	r1, [sp, #0]
 8008138:	9104      	str	r1, [sp, #16]
 800813a:	a816      	add	r0, sp, #88	; 0x58
 800813c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008140:	9102      	str	r1, [sp, #8]
 8008142:	9105      	str	r1, [sp, #20]
 8008144:	9306      	str	r3, [sp, #24]
 8008146:	f001 f9cd 	bl	80094e4 <__retarget_lock_init_recursive>
 800814a:	462a      	mov	r2, r5
 800814c:	463b      	mov	r3, r7
 800814e:	4669      	mov	r1, sp
 8008150:	4630      	mov	r0, r6
 8008152:	f7fe ff9d 	bl	8007090 <_vfprintf_r>
 8008156:	1e05      	subs	r5, r0, #0
 8008158:	db07      	blt.n	800816a <__sbprintf+0x62>
 800815a:	4669      	mov	r1, sp
 800815c:	4630      	mov	r0, r6
 800815e:	f000 ff6f 	bl	8009040 <_fflush_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	bf18      	it	ne
 8008166:	f04f 35ff 	movne.w	r5, #4294967295
 800816a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800816e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008170:	065b      	lsls	r3, r3, #25
 8008172:	bf42      	ittt	mi
 8008174:	89a3      	ldrhmi	r3, [r4, #12]
 8008176:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800817a:	81a3      	strhmi	r3, [r4, #12]
 800817c:	f001 f9b3 	bl	80094e6 <__retarget_lock_close_recursive>
 8008180:	4628      	mov	r0, r5
 8008182:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008188 <__swsetup_r>:
 8008188:	4b32      	ldr	r3, [pc, #200]	; (8008254 <__swsetup_r+0xcc>)
 800818a:	b570      	push	{r4, r5, r6, lr}
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	4606      	mov	r6, r0
 8008190:	460c      	mov	r4, r1
 8008192:	b125      	cbz	r5, 800819e <__swsetup_r+0x16>
 8008194:	69ab      	ldr	r3, [r5, #24]
 8008196:	b913      	cbnz	r3, 800819e <__swsetup_r+0x16>
 8008198:	4628      	mov	r0, r5
 800819a:	f000 ffe5 	bl	8009168 <__sinit>
 800819e:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <__swsetup_r+0xd0>)
 80081a0:	429c      	cmp	r4, r3
 80081a2:	d10f      	bne.n	80081c4 <__swsetup_r+0x3c>
 80081a4:	686c      	ldr	r4, [r5, #4]
 80081a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	0715      	lsls	r5, r2, #28
 80081ae:	d42c      	bmi.n	800820a <__swsetup_r+0x82>
 80081b0:	06d0      	lsls	r0, r2, #27
 80081b2:	d411      	bmi.n	80081d8 <__swsetup_r+0x50>
 80081b4:	2209      	movs	r2, #9
 80081b6:	6032      	str	r2, [r6, #0]
 80081b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	4b25      	ldr	r3, [pc, #148]	; (800825c <__swsetup_r+0xd4>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d101      	bne.n	80081ce <__swsetup_r+0x46>
 80081ca:	68ac      	ldr	r4, [r5, #8]
 80081cc:	e7eb      	b.n	80081a6 <__swsetup_r+0x1e>
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <__swsetup_r+0xd8>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	bf08      	it	eq
 80081d4:	68ec      	ldreq	r4, [r5, #12]
 80081d6:	e7e6      	b.n	80081a6 <__swsetup_r+0x1e>
 80081d8:	0751      	lsls	r1, r2, #29
 80081da:	d512      	bpl.n	8008202 <__swsetup_r+0x7a>
 80081dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081de:	b141      	cbz	r1, 80081f2 <__swsetup_r+0x6a>
 80081e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <__swsetup_r+0x66>
 80081e8:	4630      	mov	r0, r6
 80081ea:	f001 f893 	bl	8009314 <_free_r>
 80081ee:	2300      	movs	r3, #0
 80081f0:	6363      	str	r3, [r4, #52]	; 0x34
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	2300      	movs	r3, #0
 80081fc:	6063      	str	r3, [r4, #4]
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f043 0308 	orr.w	r3, r3, #8
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	b94b      	cbnz	r3, 8008222 <__swsetup_r+0x9a>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008218:	d003      	beq.n	8008222 <__swsetup_r+0x9a>
 800821a:	4621      	mov	r1, r4
 800821c:	4630      	mov	r0, r6
 800821e:	f001 f991 	bl	8009544 <__smakebuf_r>
 8008222:	89a2      	ldrh	r2, [r4, #12]
 8008224:	f012 0301 	ands.w	r3, r2, #1
 8008228:	d00c      	beq.n	8008244 <__swsetup_r+0xbc>
 800822a:	2300      	movs	r3, #0
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6963      	ldr	r3, [r4, #20]
 8008230:	425b      	negs	r3, r3
 8008232:	61a3      	str	r3, [r4, #24]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b953      	cbnz	r3, 800824e <__swsetup_r+0xc6>
 8008238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008240:	d1ba      	bne.n	80081b8 <__swsetup_r+0x30>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	0792      	lsls	r2, r2, #30
 8008246:	bf58      	it	pl
 8008248:	6963      	ldrpl	r3, [r4, #20]
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	e7f2      	b.n	8008234 <__swsetup_r+0xac>
 800824e:	2000      	movs	r0, #0
 8008250:	e7f7      	b.n	8008242 <__swsetup_r+0xba>
 8008252:	bf00      	nop
 8008254:	2000000c 	.word	0x2000000c
 8008258:	0800ac54 	.word	0x0800ac54
 800825c:	0800ac74 	.word	0x0800ac74
 8008260:	0800ac34 	.word	0x0800ac34

08008264 <quorem>:
 8008264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	6903      	ldr	r3, [r0, #16]
 800826a:	690c      	ldr	r4, [r1, #16]
 800826c:	429c      	cmp	r4, r3
 800826e:	4680      	mov	r8, r0
 8008270:	f300 8082 	bgt.w	8008378 <quorem+0x114>
 8008274:	3c01      	subs	r4, #1
 8008276:	f101 0714 	add.w	r7, r1, #20
 800827a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800827e:	f100 0614 	add.w	r6, r0, #20
 8008282:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008286:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800828a:	eb06 030e 	add.w	r3, r6, lr
 800828e:	3501      	adds	r5, #1
 8008290:	eb07 090e 	add.w	r9, r7, lr
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	fbb0 f5f5 	udiv	r5, r0, r5
 800829a:	b395      	cbz	r5, 8008302 <quorem+0x9e>
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	4638      	mov	r0, r7
 80082a2:	46b4      	mov	ip, r6
 80082a4:	46d3      	mov	fp, sl
 80082a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80082aa:	b293      	uxth	r3, r2
 80082ac:	fb05 a303 	mla	r3, r5, r3, sl
 80082b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	ebab 0303 	sub.w	r3, fp, r3
 80082ba:	0c12      	lsrs	r2, r2, #16
 80082bc:	f8bc b000 	ldrh.w	fp, [ip]
 80082c0:	fb05 a202 	mla	r2, r5, r2, sl
 80082c4:	fa13 f38b 	uxtah	r3, r3, fp
 80082c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80082cc:	fa1f fb82 	uxth.w	fp, r2
 80082d0:	f8dc 2000 	ldr.w	r2, [ip]
 80082d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80082d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082dc:	b29b      	uxth	r3, r3
 80082de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082e2:	4581      	cmp	r9, r0
 80082e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80082e8:	f84c 3b04 	str.w	r3, [ip], #4
 80082ec:	d2db      	bcs.n	80082a6 <quorem+0x42>
 80082ee:	f856 300e 	ldr.w	r3, [r6, lr]
 80082f2:	b933      	cbnz	r3, 8008302 <quorem+0x9e>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	3b04      	subs	r3, #4
 80082f8:	429e      	cmp	r6, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	d330      	bcc.n	8008360 <quorem+0xfc>
 80082fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8008302:	4640      	mov	r0, r8
 8008304:	f001 fd95 	bl	8009e32 <__mcmp>
 8008308:	2800      	cmp	r0, #0
 800830a:	db25      	blt.n	8008358 <quorem+0xf4>
 800830c:	3501      	adds	r5, #1
 800830e:	4630      	mov	r0, r6
 8008310:	f04f 0e00 	mov.w	lr, #0
 8008314:	f857 2b04 	ldr.w	r2, [r7], #4
 8008318:	f8d0 c000 	ldr.w	ip, [r0]
 800831c:	b293      	uxth	r3, r2
 800831e:	ebae 0303 	sub.w	r3, lr, r3
 8008322:	0c12      	lsrs	r2, r2, #16
 8008324:	fa13 f38c 	uxtah	r3, r3, ip
 8008328:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800832c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008330:	b29b      	uxth	r3, r3
 8008332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008336:	45b9      	cmp	r9, r7
 8008338:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800833c:	f840 3b04 	str.w	r3, [r0], #4
 8008340:	d2e8      	bcs.n	8008314 <quorem+0xb0>
 8008342:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008346:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800834a:	b92a      	cbnz	r2, 8008358 <quorem+0xf4>
 800834c:	3b04      	subs	r3, #4
 800834e:	429e      	cmp	r6, r3
 8008350:	461a      	mov	r2, r3
 8008352:	d30b      	bcc.n	800836c <quorem+0x108>
 8008354:	f8c8 4010 	str.w	r4, [r8, #16]
 8008358:	4628      	mov	r0, r5
 800835a:	b003      	add	sp, #12
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	3b04      	subs	r3, #4
 8008364:	2a00      	cmp	r2, #0
 8008366:	d1ca      	bne.n	80082fe <quorem+0x9a>
 8008368:	3c01      	subs	r4, #1
 800836a:	e7c5      	b.n	80082f8 <quorem+0x94>
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	3b04      	subs	r3, #4
 8008370:	2a00      	cmp	r2, #0
 8008372:	d1ef      	bne.n	8008354 <quorem+0xf0>
 8008374:	3c01      	subs	r4, #1
 8008376:	e7ea      	b.n	800834e <quorem+0xea>
 8008378:	2000      	movs	r0, #0
 800837a:	e7ee      	b.n	800835a <quorem+0xf6>
 800837c:	0000      	movs	r0, r0
	...

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ec57 6b10 	vmov	r6, r7, d0
 8008388:	b097      	sub	sp, #92	; 0x5c
 800838a:	e9cd 6700 	strd	r6, r7, [sp]
 800838e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008390:	9107      	str	r1, [sp, #28]
 8008392:	4604      	mov	r4, r0
 8008394:	920a      	str	r2, [sp, #40]	; 0x28
 8008396:	930f      	str	r3, [sp, #60]	; 0x3c
 8008398:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800839a:	b93e      	cbnz	r6, 80083ac <_dtoa_r+0x2c>
 800839c:	2010      	movs	r0, #16
 800839e:	f001 f911 	bl	80095c4 <malloc>
 80083a2:	6260      	str	r0, [r4, #36]	; 0x24
 80083a4:	6046      	str	r6, [r0, #4]
 80083a6:	6086      	str	r6, [r0, #8]
 80083a8:	6006      	str	r6, [r0, #0]
 80083aa:	60c6      	str	r6, [r0, #12]
 80083ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	b151      	cbz	r1, 80083c8 <_dtoa_r+0x48>
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	604a      	str	r2, [r1, #4]
 80083b6:	2301      	movs	r3, #1
 80083b8:	4093      	lsls	r3, r2
 80083ba:	608b      	str	r3, [r1, #8]
 80083bc:	4620      	mov	r0, r4
 80083be:	f001 fb63 	bl	8009a88 <_Bfree>
 80083c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfbf      	itttt	lt
 80083ce:	2301      	movlt	r3, #1
 80083d0:	602b      	strlt	r3, [r5, #0]
 80083d2:	9b01      	ldrlt	r3, [sp, #4]
 80083d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	bfb2      	itee	lt
 80083da:	9301      	strlt	r3, [sp, #4]
 80083dc:	2300      	movge	r3, #0
 80083de:	602b      	strge	r3, [r5, #0]
 80083e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083e4:	4ba8      	ldr	r3, [pc, #672]	; (8008688 <_dtoa_r+0x308>)
 80083e6:	ea33 0308 	bics.w	r3, r3, r8
 80083ea:	d11b      	bne.n	8008424 <_dtoa_r+0xa4>
 80083ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	9b00      	ldr	r3, [sp, #0]
 80083f6:	b923      	cbnz	r3, 8008402 <_dtoa_r+0x82>
 80083f8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f000 8578 	beq.w	8008ef2 <_dtoa_r+0xb72>
 8008402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008404:	b953      	cbnz	r3, 800841c <_dtoa_r+0x9c>
 8008406:	4ba1      	ldr	r3, [pc, #644]	; (800868c <_dtoa_r+0x30c>)
 8008408:	e021      	b.n	800844e <_dtoa_r+0xce>
 800840a:	4ba1      	ldr	r3, [pc, #644]	; (8008690 <_dtoa_r+0x310>)
 800840c:	9302      	str	r3, [sp, #8]
 800840e:	3308      	adds	r3, #8
 8008410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	9802      	ldr	r0, [sp, #8]
 8008416:	b017      	add	sp, #92	; 0x5c
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841c:	4b9b      	ldr	r3, [pc, #620]	; (800868c <_dtoa_r+0x30c>)
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	3303      	adds	r3, #3
 8008422:	e7f5      	b.n	8008410 <_dtoa_r+0x90>
 8008424:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb46 	bl	8000ac0 <__aeabi_dcmpeq>
 8008434:	4681      	mov	r9, r0
 8008436:	b160      	cbz	r0, 8008452 <_dtoa_r+0xd2>
 8008438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800843a:	2301      	movs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8553 	beq.w	8008eec <_dtoa_r+0xb6c>
 8008446:	4b93      	ldr	r3, [pc, #588]	; (8008694 <_dtoa_r+0x314>)
 8008448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	3b01      	subs	r3, #1
 800844e:	9302      	str	r3, [sp, #8]
 8008450:	e7e0      	b.n	8008414 <_dtoa_r+0x94>
 8008452:	aa14      	add	r2, sp, #80	; 0x50
 8008454:	a915      	add	r1, sp, #84	; 0x54
 8008456:	ec47 6b10 	vmov	d0, r6, r7
 800845a:	4620      	mov	r0, r4
 800845c:	f001 fd61 	bl	8009f22 <__d2b>
 8008460:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008464:	4682      	mov	sl, r0
 8008466:	2d00      	cmp	r5, #0
 8008468:	d07e      	beq.n	8008568 <_dtoa_r+0x1e8>
 800846a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800846e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008472:	4630      	mov	r0, r6
 8008474:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008478:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800847c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8008480:	2200      	movs	r2, #0
 8008482:	4b85      	ldr	r3, [pc, #532]	; (8008698 <_dtoa_r+0x318>)
 8008484:	f7f7 ff00 	bl	8000288 <__aeabi_dsub>
 8008488:	a379      	add	r3, pc, #484	; (adr r3, 8008670 <_dtoa_r+0x2f0>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 f8af 	bl	80005f0 <__aeabi_dmul>
 8008492:	a379      	add	r3, pc, #484	; (adr r3, 8008678 <_dtoa_r+0x2f8>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f7 fef8 	bl	800028c <__adddf3>
 800849c:	4606      	mov	r6, r0
 800849e:	4628      	mov	r0, r5
 80084a0:	460f      	mov	r7, r1
 80084a2:	f7f8 f83f 	bl	8000524 <__aeabi_i2d>
 80084a6:	a376      	add	r3, pc, #472	; (adr r3, 8008680 <_dtoa_r+0x300>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f8 f8a0 	bl	80005f0 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f7 fee8 	bl	800028c <__adddf3>
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	f7f8 fb46 	bl	8000b50 <__aeabi_d2iz>
 80084c4:	2200      	movs	r2, #0
 80084c6:	4683      	mov	fp, r0
 80084c8:	2300      	movs	r3, #0
 80084ca:	4630      	mov	r0, r6
 80084cc:	4639      	mov	r1, r7
 80084ce:	f7f8 fb01 	bl	8000ad4 <__aeabi_dcmplt>
 80084d2:	b158      	cbz	r0, 80084ec <_dtoa_r+0x16c>
 80084d4:	4658      	mov	r0, fp
 80084d6:	f7f8 f825 	bl	8000524 <__aeabi_i2d>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4630      	mov	r0, r6
 80084e0:	4639      	mov	r1, r7
 80084e2:	f7f8 faed 	bl	8000ac0 <__aeabi_dcmpeq>
 80084e6:	b908      	cbnz	r0, 80084ec <_dtoa_r+0x16c>
 80084e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084ec:	f1bb 0f16 	cmp.w	fp, #22
 80084f0:	d859      	bhi.n	80085a6 <_dtoa_r+0x226>
 80084f2:	496a      	ldr	r1, [pc, #424]	; (800869c <_dtoa_r+0x31c>)
 80084f4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80084f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008500:	f7f8 fb06 	bl	8000b10 <__aeabi_dcmpgt>
 8008504:	2800      	cmp	r0, #0
 8008506:	d050      	beq.n	80085aa <_dtoa_r+0x22a>
 8008508:	f10b 3bff 	add.w	fp, fp, #4294967295
 800850c:	2300      	movs	r3, #0
 800850e:	930e      	str	r3, [sp, #56]	; 0x38
 8008510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008512:	1b5d      	subs	r5, r3, r5
 8008514:	1e6b      	subs	r3, r5, #1
 8008516:	9306      	str	r3, [sp, #24]
 8008518:	bf45      	ittet	mi
 800851a:	f1c5 0301 	rsbmi	r3, r5, #1
 800851e:	9305      	strmi	r3, [sp, #20]
 8008520:	2300      	movpl	r3, #0
 8008522:	2300      	movmi	r3, #0
 8008524:	bf4c      	ite	mi
 8008526:	9306      	strmi	r3, [sp, #24]
 8008528:	9305      	strpl	r3, [sp, #20]
 800852a:	f1bb 0f00 	cmp.w	fp, #0
 800852e:	db3e      	blt.n	80085ae <_dtoa_r+0x22e>
 8008530:	9b06      	ldr	r3, [sp, #24]
 8008532:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008536:	445b      	add	r3, fp
 8008538:	9306      	str	r3, [sp, #24]
 800853a:	2300      	movs	r3, #0
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	9b07      	ldr	r3, [sp, #28]
 8008540:	2b09      	cmp	r3, #9
 8008542:	f200 80af 	bhi.w	80086a4 <_dtoa_r+0x324>
 8008546:	2b05      	cmp	r3, #5
 8008548:	bfc4      	itt	gt
 800854a:	3b04      	subgt	r3, #4
 800854c:	9307      	strgt	r3, [sp, #28]
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	f1a3 0302 	sub.w	r3, r3, #2
 8008554:	bfcc      	ite	gt
 8008556:	2600      	movgt	r6, #0
 8008558:	2601      	movle	r6, #1
 800855a:	2b03      	cmp	r3, #3
 800855c:	f200 80ae 	bhi.w	80086bc <_dtoa_r+0x33c>
 8008560:	e8df f003 	tbb	[pc, r3]
 8008564:	772f8482 	.word	0x772f8482
 8008568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800856a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800856c:	441d      	add	r5, r3
 800856e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008572:	2b20      	cmp	r3, #32
 8008574:	dd11      	ble.n	800859a <_dtoa_r+0x21a>
 8008576:	9a00      	ldr	r2, [sp, #0]
 8008578:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800857c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008580:	fa22 f000 	lsr.w	r0, r2, r0
 8008584:	fa08 f303 	lsl.w	r3, r8, r3
 8008588:	4318      	orrs	r0, r3
 800858a:	f7f7 ffbb 	bl	8000504 <__aeabi_ui2d>
 800858e:	2301      	movs	r3, #1
 8008590:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008594:	3d01      	subs	r5, #1
 8008596:	9312      	str	r3, [sp, #72]	; 0x48
 8008598:	e772      	b.n	8008480 <_dtoa_r+0x100>
 800859a:	f1c3 0020 	rsb	r0, r3, #32
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	fa03 f000 	lsl.w	r0, r3, r0
 80085a4:	e7f1      	b.n	800858a <_dtoa_r+0x20a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e7b1      	b.n	800850e <_dtoa_r+0x18e>
 80085aa:	900e      	str	r0, [sp, #56]	; 0x38
 80085ac:	e7b0      	b.n	8008510 <_dtoa_r+0x190>
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	eba3 030b 	sub.w	r3, r3, fp
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f1cb 0300 	rsb	r3, fp, #0
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	2300      	movs	r3, #0
 80085be:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c0:	e7bd      	b.n	800853e <_dtoa_r+0x1be>
 80085c2:	2301      	movs	r3, #1
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dd7a      	ble.n	80086c2 <_dtoa_r+0x342>
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085d2:	2200      	movs	r2, #0
 80085d4:	606a      	str	r2, [r5, #4]
 80085d6:	2104      	movs	r1, #4
 80085d8:	f101 0214 	add.w	r2, r1, #20
 80085dc:	429a      	cmp	r2, r3
 80085de:	d975      	bls.n	80086cc <_dtoa_r+0x34c>
 80085e0:	6869      	ldr	r1, [r5, #4]
 80085e2:	4620      	mov	r0, r4
 80085e4:	f001 fa1c 	bl	8009a20 <_Balloc>
 80085e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ea:	6028      	str	r0, [r5, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	9302      	str	r3, [sp, #8]
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	2b0e      	cmp	r3, #14
 80085f4:	f200 80e5 	bhi.w	80087c2 <_dtoa_r+0x442>
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	f000 80e2 	beq.w	80087c2 <_dtoa_r+0x442>
 80085fe:	ed9d 7b00 	vldr	d7, [sp]
 8008602:	f1bb 0f00 	cmp.w	fp, #0
 8008606:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800860a:	dd74      	ble.n	80086f6 <_dtoa_r+0x376>
 800860c:	4a23      	ldr	r2, [pc, #140]	; (800869c <_dtoa_r+0x31c>)
 800860e:	f00b 030f 	and.w	r3, fp, #15
 8008612:	ea4f 162b 	mov.w	r6, fp, asr #4
 8008616:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800861a:	06f0      	lsls	r0, r6, #27
 800861c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008620:	d559      	bpl.n	80086d6 <_dtoa_r+0x356>
 8008622:	4b1f      	ldr	r3, [pc, #124]	; (80086a0 <_dtoa_r+0x320>)
 8008624:	ec51 0b17 	vmov	r0, r1, d7
 8008628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800862c:	f7f8 f90a 	bl	8000844 <__aeabi_ddiv>
 8008630:	e9cd 0100 	strd	r0, r1, [sp]
 8008634:	f006 060f 	and.w	r6, r6, #15
 8008638:	2503      	movs	r5, #3
 800863a:	4f19      	ldr	r7, [pc, #100]	; (80086a0 <_dtoa_r+0x320>)
 800863c:	2e00      	cmp	r6, #0
 800863e:	d14c      	bne.n	80086da <_dtoa_r+0x35a>
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008648:	f7f8 f8fc 	bl	8000844 <__aeabi_ddiv>
 800864c:	e9cd 0100 	strd	r0, r1, [sp]
 8008650:	e06a      	b.n	8008728 <_dtoa_r+0x3a8>
 8008652:	2301      	movs	r3, #1
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008658:	445b      	add	r3, fp
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	3301      	adds	r3, #1
 800865e:	2b01      	cmp	r3, #1
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	bfb8      	it	lt
 8008664:	2301      	movlt	r3, #1
 8008666:	e7b3      	b.n	80085d0 <_dtoa_r+0x250>
 8008668:	2300      	movs	r3, #0
 800866a:	e7ab      	b.n	80085c4 <_dtoa_r+0x244>
 800866c:	2300      	movs	r3, #0
 800866e:	e7f1      	b.n	8008654 <_dtoa_r+0x2d4>
 8008670:	636f4361 	.word	0x636f4361
 8008674:	3fd287a7 	.word	0x3fd287a7
 8008678:	8b60c8b3 	.word	0x8b60c8b3
 800867c:	3fc68a28 	.word	0x3fc68a28
 8008680:	509f79fb 	.word	0x509f79fb
 8008684:	3fd34413 	.word	0x3fd34413
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	0800ac2d 	.word	0x0800ac2d
 8008690:	0800ac24 	.word	0x0800ac24
 8008694:	0800ac03 	.word	0x0800ac03
 8008698:	3ff80000 	.word	0x3ff80000
 800869c:	0800acc0 	.word	0x0800acc0
 80086a0:	0800ac98 	.word	0x0800ac98
 80086a4:	2601      	movs	r6, #1
 80086a6:	2300      	movs	r3, #0
 80086a8:	9307      	str	r3, [sp, #28]
 80086aa:	9609      	str	r6, [sp, #36]	; 0x24
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	2312      	movs	r3, #18
 80086b8:	920a      	str	r2, [sp, #40]	; 0x28
 80086ba:	e789      	b.n	80085d0 <_dtoa_r+0x250>
 80086bc:	2301      	movs	r3, #1
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	e7f4      	b.n	80086ac <_dtoa_r+0x32c>
 80086c2:	2301      	movs	r3, #1
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	461a      	mov	r2, r3
 80086ca:	e7f5      	b.n	80086b8 <_dtoa_r+0x338>
 80086cc:	686a      	ldr	r2, [r5, #4]
 80086ce:	3201      	adds	r2, #1
 80086d0:	606a      	str	r2, [r5, #4]
 80086d2:	0049      	lsls	r1, r1, #1
 80086d4:	e780      	b.n	80085d8 <_dtoa_r+0x258>
 80086d6:	2502      	movs	r5, #2
 80086d8:	e7af      	b.n	800863a <_dtoa_r+0x2ba>
 80086da:	07f1      	lsls	r1, r6, #31
 80086dc:	d508      	bpl.n	80086f0 <_dtoa_r+0x370>
 80086de:	4640      	mov	r0, r8
 80086e0:	4649      	mov	r1, r9
 80086e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e6:	f7f7 ff83 	bl	80005f0 <__aeabi_dmul>
 80086ea:	3501      	adds	r5, #1
 80086ec:	4680      	mov	r8, r0
 80086ee:	4689      	mov	r9, r1
 80086f0:	1076      	asrs	r6, r6, #1
 80086f2:	3708      	adds	r7, #8
 80086f4:	e7a2      	b.n	800863c <_dtoa_r+0x2bc>
 80086f6:	f000 809d 	beq.w	8008834 <_dtoa_r+0x4b4>
 80086fa:	f1cb 0600 	rsb	r6, fp, #0
 80086fe:	4b9f      	ldr	r3, [pc, #636]	; (800897c <_dtoa_r+0x5fc>)
 8008700:	4f9f      	ldr	r7, [pc, #636]	; (8008980 <_dtoa_r+0x600>)
 8008702:	f006 020f 	and.w	r2, r6, #15
 8008706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008712:	f7f7 ff6d 	bl	80005f0 <__aeabi_dmul>
 8008716:	e9cd 0100 	strd	r0, r1, [sp]
 800871a:	1136      	asrs	r6, r6, #4
 800871c:	2300      	movs	r3, #0
 800871e:	2502      	movs	r5, #2
 8008720:	2e00      	cmp	r6, #0
 8008722:	d17c      	bne.n	800881e <_dtoa_r+0x49e>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d191      	bne.n	800864c <_dtoa_r+0x2cc>
 8008728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 8084 	beq.w	8008838 <_dtoa_r+0x4b8>
 8008730:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008734:	2200      	movs	r2, #0
 8008736:	4b93      	ldr	r3, [pc, #588]	; (8008984 <_dtoa_r+0x604>)
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f8 f9ca 	bl	8000ad4 <__aeabi_dcmplt>
 8008740:	2800      	cmp	r0, #0
 8008742:	d079      	beq.n	8008838 <_dtoa_r+0x4b8>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d076      	beq.n	8008838 <_dtoa_r+0x4b8>
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd34      	ble.n	80087ba <_dtoa_r+0x43a>
 8008750:	2200      	movs	r2, #0
 8008752:	4b8d      	ldr	r3, [pc, #564]	; (8008988 <_dtoa_r+0x608>)
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7f7 ff4a 	bl	80005f0 <__aeabi_dmul>
 800875c:	e9cd 0100 	strd	r0, r1, [sp]
 8008760:	9e04      	ldr	r6, [sp, #16]
 8008762:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008766:	3501      	adds	r5, #1
 8008768:	4628      	mov	r0, r5
 800876a:	f7f7 fedb 	bl	8000524 <__aeabi_i2d>
 800876e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008772:	f7f7 ff3d 	bl	80005f0 <__aeabi_dmul>
 8008776:	2200      	movs	r2, #0
 8008778:	4b84      	ldr	r3, [pc, #528]	; (800898c <_dtoa_r+0x60c>)
 800877a:	f7f7 fd87 	bl	800028c <__adddf3>
 800877e:	4680      	mov	r8, r0
 8008780:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008784:	2e00      	cmp	r6, #0
 8008786:	d15a      	bne.n	800883e <_dtoa_r+0x4be>
 8008788:	2200      	movs	r2, #0
 800878a:	4b81      	ldr	r3, [pc, #516]	; (8008990 <_dtoa_r+0x610>)
 800878c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008790:	f7f7 fd7a 	bl	8000288 <__aeabi_dsub>
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	e9cd 0100 	strd	r0, r1, [sp]
 800879c:	f7f8 f9b8 	bl	8000b10 <__aeabi_dcmpgt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f040 829b 	bne.w	8008cdc <_dtoa_r+0x95c>
 80087a6:	4642      	mov	r2, r8
 80087a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80087ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b0:	f7f8 f990 	bl	8000ad4 <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f040 828f 	bne.w	8008cd8 <_dtoa_r+0x958>
 80087ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087be:	e9cd 2300 	strd	r2, r3, [sp]
 80087c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f2c0 8150 	blt.w	8008a6a <_dtoa_r+0x6ea>
 80087ca:	f1bb 0f0e 	cmp.w	fp, #14
 80087ce:	f300 814c 	bgt.w	8008a6a <_dtoa_r+0x6ea>
 80087d2:	4b6a      	ldr	r3, [pc, #424]	; (800897c <_dtoa_r+0x5fc>)
 80087d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f280 80da 	bge.w	8008998 <_dtoa_r+0x618>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f300 80d6 	bgt.w	8008998 <_dtoa_r+0x618>
 80087ec:	f040 8273 	bne.w	8008cd6 <_dtoa_r+0x956>
 80087f0:	2200      	movs	r2, #0
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <_dtoa_r+0x610>)
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f7 fefa 	bl	80005f0 <__aeabi_dmul>
 80087fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008800:	f7f8 f97c 	bl	8000afc <__aeabi_dcmpge>
 8008804:	9e03      	ldr	r6, [sp, #12]
 8008806:	4637      	mov	r7, r6
 8008808:	2800      	cmp	r0, #0
 800880a:	f040 824a 	bne.w	8008ca2 <_dtoa_r+0x922>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	9a02      	ldr	r2, [sp, #8]
 8008812:	1c5d      	adds	r5, r3, #1
 8008814:	2331      	movs	r3, #49	; 0x31
 8008816:	7013      	strb	r3, [r2, #0]
 8008818:	f10b 0b01 	add.w	fp, fp, #1
 800881c:	e245      	b.n	8008caa <_dtoa_r+0x92a>
 800881e:	07f2      	lsls	r2, r6, #31
 8008820:	d505      	bpl.n	800882e <_dtoa_r+0x4ae>
 8008822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008826:	f7f7 fee3 	bl	80005f0 <__aeabi_dmul>
 800882a:	3501      	adds	r5, #1
 800882c:	2301      	movs	r3, #1
 800882e:	1076      	asrs	r6, r6, #1
 8008830:	3708      	adds	r7, #8
 8008832:	e775      	b.n	8008720 <_dtoa_r+0x3a0>
 8008834:	2502      	movs	r5, #2
 8008836:	e777      	b.n	8008728 <_dtoa_r+0x3a8>
 8008838:	465f      	mov	r7, fp
 800883a:	9e03      	ldr	r6, [sp, #12]
 800883c:	e794      	b.n	8008768 <_dtoa_r+0x3e8>
 800883e:	9a02      	ldr	r2, [sp, #8]
 8008840:	4b4e      	ldr	r3, [pc, #312]	; (800897c <_dtoa_r+0x5fc>)
 8008842:	4432      	add	r2, r6
 8008844:	9213      	str	r2, [sp, #76]	; 0x4c
 8008846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008848:	1e71      	subs	r1, r6, #1
 800884a:	2a00      	cmp	r2, #0
 800884c:	d048      	beq.n	80088e0 <_dtoa_r+0x560>
 800884e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	2000      	movs	r0, #0
 8008858:	494e      	ldr	r1, [pc, #312]	; (8008994 <_dtoa_r+0x614>)
 800885a:	f7f7 fff3 	bl	8000844 <__aeabi_ddiv>
 800885e:	4642      	mov	r2, r8
 8008860:	464b      	mov	r3, r9
 8008862:	f7f7 fd11 	bl	8000288 <__aeabi_dsub>
 8008866:	9d02      	ldr	r5, [sp, #8]
 8008868:	4680      	mov	r8, r0
 800886a:	4689      	mov	r9, r1
 800886c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008870:	f7f8 f96e 	bl	8000b50 <__aeabi_d2iz>
 8008874:	4606      	mov	r6, r0
 8008876:	f7f7 fe55 	bl	8000524 <__aeabi_i2d>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008882:	f7f7 fd01 	bl	8000288 <__aeabi_dsub>
 8008886:	3630      	adds	r6, #48	; 0x30
 8008888:	f805 6b01 	strb.w	r6, [r5], #1
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	e9cd 0100 	strd	r0, r1, [sp]
 8008894:	f7f8 f91e 	bl	8000ad4 <__aeabi_dcmplt>
 8008898:	2800      	cmp	r0, #0
 800889a:	d165      	bne.n	8008968 <_dtoa_r+0x5e8>
 800889c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a0:	2000      	movs	r0, #0
 80088a2:	4938      	ldr	r1, [pc, #224]	; (8008984 <_dtoa_r+0x604>)
 80088a4:	f7f7 fcf0 	bl	8000288 <__aeabi_dsub>
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	f7f8 f912 	bl	8000ad4 <__aeabi_dcmplt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f040 80ba 	bne.w	8008a2a <_dtoa_r+0x6aa>
 80088b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088b8:	429d      	cmp	r5, r3
 80088ba:	f43f af7e 	beq.w	80087ba <_dtoa_r+0x43a>
 80088be:	2200      	movs	r2, #0
 80088c0:	4b31      	ldr	r3, [pc, #196]	; (8008988 <_dtoa_r+0x608>)
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fe93 	bl	80005f0 <__aeabi_dmul>
 80088ca:	2200      	movs	r2, #0
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	4b2d      	ldr	r3, [pc, #180]	; (8008988 <_dtoa_r+0x608>)
 80088d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088d6:	f7f7 fe8b 	bl	80005f0 <__aeabi_dmul>
 80088da:	e9cd 0100 	strd	r0, r1, [sp]
 80088de:	e7c5      	b.n	800886c <_dtoa_r+0x4ec>
 80088e0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ec:	f7f7 fe80 	bl	80005f0 <__aeabi_dmul>
 80088f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088f4:	9d02      	ldr	r5, [sp, #8]
 80088f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088fa:	f7f8 f929 	bl	8000b50 <__aeabi_d2iz>
 80088fe:	4606      	mov	r6, r0
 8008900:	f7f7 fe10 	bl	8000524 <__aeabi_i2d>
 8008904:	3630      	adds	r6, #48	; 0x30
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800890e:	f7f7 fcbb 	bl	8000288 <__aeabi_dsub>
 8008912:	f805 6b01 	strb.w	r6, [r5], #1
 8008916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008918:	42ab      	cmp	r3, r5
 800891a:	4680      	mov	r8, r0
 800891c:	4689      	mov	r9, r1
 800891e:	f04f 0200 	mov.w	r2, #0
 8008922:	d125      	bne.n	8008970 <_dtoa_r+0x5f0>
 8008924:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <_dtoa_r+0x614>)
 8008926:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800892a:	f7f7 fcaf 	bl	800028c <__adddf3>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4640      	mov	r0, r8
 8008934:	4649      	mov	r1, r9
 8008936:	f7f8 f8eb 	bl	8000b10 <__aeabi_dcmpgt>
 800893a:	2800      	cmp	r0, #0
 800893c:	d175      	bne.n	8008a2a <_dtoa_r+0x6aa>
 800893e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008942:	2000      	movs	r0, #0
 8008944:	4913      	ldr	r1, [pc, #76]	; (8008994 <_dtoa_r+0x614>)
 8008946:	f7f7 fc9f 	bl	8000288 <__aeabi_dsub>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4640      	mov	r0, r8
 8008950:	4649      	mov	r1, r9
 8008952:	f7f8 f8bf 	bl	8000ad4 <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f43f af2f 	beq.w	80087ba <_dtoa_r+0x43a>
 800895c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008960:	2b30      	cmp	r3, #48	; 0x30
 8008962:	f105 32ff 	add.w	r2, r5, #4294967295
 8008966:	d001      	beq.n	800896c <_dtoa_r+0x5ec>
 8008968:	46bb      	mov	fp, r7
 800896a:	e04d      	b.n	8008a08 <_dtoa_r+0x688>
 800896c:	4615      	mov	r5, r2
 800896e:	e7f5      	b.n	800895c <_dtoa_r+0x5dc>
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <_dtoa_r+0x608>)
 8008972:	f7f7 fe3d 	bl	80005f0 <__aeabi_dmul>
 8008976:	e9cd 0100 	strd	r0, r1, [sp]
 800897a:	e7bc      	b.n	80088f6 <_dtoa_r+0x576>
 800897c:	0800acc0 	.word	0x0800acc0
 8008980:	0800ac98 	.word	0x0800ac98
 8008984:	3ff00000 	.word	0x3ff00000
 8008988:	40240000 	.word	0x40240000
 800898c:	401c0000 	.word	0x401c0000
 8008990:	40140000 	.word	0x40140000
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	e9dd 6700 	ldrd	r6, r7, [sp]
 800899c:	9d02      	ldr	r5, [sp, #8]
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 ff4d 	bl	8000844 <__aeabi_ddiv>
 80089aa:	f7f8 f8d1 	bl	8000b50 <__aeabi_d2iz>
 80089ae:	9000      	str	r0, [sp, #0]
 80089b0:	f7f7 fdb8 	bl	8000524 <__aeabi_i2d>
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	f7f7 fe1a 	bl	80005f0 <__aeabi_dmul>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f7 fc60 	bl	8000288 <__aeabi_dsub>
 80089c8:	9e00      	ldr	r6, [sp, #0]
 80089ca:	9f03      	ldr	r7, [sp, #12]
 80089cc:	3630      	adds	r6, #48	; 0x30
 80089ce:	f805 6b01 	strb.w	r6, [r5], #1
 80089d2:	9e02      	ldr	r6, [sp, #8]
 80089d4:	1bae      	subs	r6, r5, r6
 80089d6:	42b7      	cmp	r7, r6
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	d138      	bne.n	8008a50 <_dtoa_r+0x6d0>
 80089de:	f7f7 fc55 	bl	800028c <__adddf3>
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f8 f871 	bl	8000ad4 <__aeabi_dcmplt>
 80089f2:	b9c8      	cbnz	r0, 8008a28 <_dtoa_r+0x6a8>
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4640      	mov	r0, r8
 80089fa:	4649      	mov	r1, r9
 80089fc:	f7f8 f860 	bl	8000ac0 <__aeabi_dcmpeq>
 8008a00:	b110      	cbz	r0, 8008a08 <_dtoa_r+0x688>
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	07db      	lsls	r3, r3, #31
 8008a06:	d40f      	bmi.n	8008a28 <_dtoa_r+0x6a8>
 8008a08:	4651      	mov	r1, sl
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f001 f83c 	bl	8009a88 <_Bfree>
 8008a10:	2300      	movs	r3, #0
 8008a12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a14:	702b      	strb	r3, [r5, #0]
 8008a16:	f10b 0301 	add.w	r3, fp, #1
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f43f acf8 	beq.w	8008414 <_dtoa_r+0x94>
 8008a24:	601d      	str	r5, [r3, #0]
 8008a26:	e4f5      	b.n	8008414 <_dtoa_r+0x94>
 8008a28:	465f      	mov	r7, fp
 8008a2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a2e:	2a39      	cmp	r2, #57	; 0x39
 8008a30:	f105 33ff 	add.w	r3, r5, #4294967295
 8008a34:	d106      	bne.n	8008a44 <_dtoa_r+0x6c4>
 8008a36:	9a02      	ldr	r2, [sp, #8]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d107      	bne.n	8008a4c <_dtoa_r+0x6cc>
 8008a3c:	2330      	movs	r3, #48	; 0x30
 8008a3e:	7013      	strb	r3, [r2, #0]
 8008a40:	3701      	adds	r7, #1
 8008a42:	4613      	mov	r3, r2
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	3201      	adds	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	e78d      	b.n	8008968 <_dtoa_r+0x5e8>
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	e7ec      	b.n	8008a2a <_dtoa_r+0x6aa>
 8008a50:	2200      	movs	r2, #0
 8008a52:	4ba4      	ldr	r3, [pc, #656]	; (8008ce4 <_dtoa_r+0x964>)
 8008a54:	f7f7 fdcc 	bl	80005f0 <__aeabi_dmul>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	f7f8 f82e 	bl	8000ac0 <__aeabi_dcmpeq>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d09a      	beq.n	800899e <_dtoa_r+0x61e>
 8008a68:	e7ce      	b.n	8008a08 <_dtoa_r+0x688>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80cd 	beq.w	8008c0c <_dtoa_r+0x88c>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	f300 80af 	bgt.w	8008bd8 <_dtoa_r+0x858>
 8008a7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f000 80a7 	beq.w	8008bd0 <_dtoa_r+0x850>
 8008a82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a86:	9e08      	ldr	r6, [sp, #32]
 8008a88:	9d05      	ldr	r5, [sp, #20]
 8008a8a:	9a05      	ldr	r2, [sp, #20]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	9205      	str	r2, [sp, #20]
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	2101      	movs	r1, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	4620      	mov	r0, r4
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	f001 f895 	bl	8009bc8 <__i2b>
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	dd0c      	ble.n	8008abe <_dtoa_r+0x73e>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd09      	ble.n	8008abe <_dtoa_r+0x73e>
 8008aaa:	42ab      	cmp	r3, r5
 8008aac:	9a05      	ldr	r2, [sp, #20]
 8008aae:	bfa8      	it	ge
 8008ab0:	462b      	movge	r3, r5
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	9205      	str	r2, [sp, #20]
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	1aed      	subs	r5, r5, r3
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	9306      	str	r3, [sp, #24]
 8008abe:	9b08      	ldr	r3, [sp, #32]
 8008ac0:	b1f3      	cbz	r3, 8008b00 <_dtoa_r+0x780>
 8008ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 80a5 	beq.w	8008c14 <_dtoa_r+0x894>
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	dd10      	ble.n	8008af0 <_dtoa_r+0x770>
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f001 f90e 	bl	8009cf4 <__pow5mult>
 8008ad8:	4652      	mov	r2, sl
 8008ada:	4601      	mov	r1, r0
 8008adc:	4607      	mov	r7, r0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f001 f87b 	bl	8009bda <__multiply>
 8008ae4:	4651      	mov	r1, sl
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 ffcd 	bl	8009a88 <_Bfree>
 8008aee:	46c2      	mov	sl, r8
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	1b9a      	subs	r2, r3, r6
 8008af4:	d004      	beq.n	8008b00 <_dtoa_r+0x780>
 8008af6:	4651      	mov	r1, sl
 8008af8:	4620      	mov	r0, r4
 8008afa:	f001 f8fb 	bl	8009cf4 <__pow5mult>
 8008afe:	4682      	mov	sl, r0
 8008b00:	2101      	movs	r1, #1
 8008b02:	4620      	mov	r0, r4
 8008b04:	f001 f860 	bl	8009bc8 <__i2b>
 8008b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	f340 8083 	ble.w	8008c18 <_dtoa_r+0x898>
 8008b12:	461a      	mov	r2, r3
 8008b14:	4601      	mov	r1, r0
 8008b16:	4620      	mov	r0, r4
 8008b18:	f001 f8ec 	bl	8009cf4 <__pow5mult>
 8008b1c:	9b07      	ldr	r3, [sp, #28]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	4606      	mov	r6, r0
 8008b22:	dd7c      	ble.n	8008c1e <_dtoa_r+0x89e>
 8008b24:	f04f 0800 	mov.w	r8, #0
 8008b28:	6933      	ldr	r3, [r6, #16]
 8008b2a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b2e:	6918      	ldr	r0, [r3, #16]
 8008b30:	f000 fffc 	bl	8009b2c <__hi0bits>
 8008b34:	f1c0 0020 	rsb	r0, r0, #32
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	4418      	add	r0, r3
 8008b3c:	f010 001f 	ands.w	r0, r0, #31
 8008b40:	f000 8096 	beq.w	8008c70 <_dtoa_r+0x8f0>
 8008b44:	f1c0 0320 	rsb	r3, r0, #32
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	f340 8087 	ble.w	8008c5c <_dtoa_r+0x8dc>
 8008b4e:	9b05      	ldr	r3, [sp, #20]
 8008b50:	f1c0 001c 	rsb	r0, r0, #28
 8008b54:	4403      	add	r3, r0
 8008b56:	9305      	str	r3, [sp, #20]
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	4405      	add	r5, r0
 8008b5c:	4403      	add	r3, r0
 8008b5e:	9306      	str	r3, [sp, #24]
 8008b60:	9b05      	ldr	r3, [sp, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd05      	ble.n	8008b72 <_dtoa_r+0x7f2>
 8008b66:	4651      	mov	r1, sl
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 f910 	bl	8009d90 <__lshift>
 8008b70:	4682      	mov	sl, r0
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd05      	ble.n	8008b84 <_dtoa_r+0x804>
 8008b78:	4631      	mov	r1, r6
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f001 f907 	bl	8009d90 <__lshift>
 8008b82:	4606      	mov	r6, r0
 8008b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d074      	beq.n	8008c74 <_dtoa_r+0x8f4>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	f001 f950 	bl	8009e32 <__mcmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	da6e      	bge.n	8008c74 <_dtoa_r+0x8f4>
 8008b96:	2300      	movs	r3, #0
 8008b98:	4651      	mov	r1, sl
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 ff8a 	bl	8009ab6 <__multadd>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ba8:	4682      	mov	sl, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 81a8 	beq.w	8008f00 <_dtoa_r+0xb80>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 ff7d 	bl	8009ab6 <__multadd>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	f300 80c8 	bgt.w	8008d56 <_dtoa_r+0x9d6>
 8008bc6:	9b07      	ldr	r3, [sp, #28]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f340 80c4 	ble.w	8008d56 <_dtoa_r+0x9d6>
 8008bce:	e059      	b.n	8008c84 <_dtoa_r+0x904>
 8008bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bd6:	e756      	b.n	8008a86 <_dtoa_r+0x706>
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	1e5e      	subs	r6, r3, #1
 8008bdc:	9b08      	ldr	r3, [sp, #32]
 8008bde:	42b3      	cmp	r3, r6
 8008be0:	bfbf      	itttt	lt
 8008be2:	9b08      	ldrlt	r3, [sp, #32]
 8008be4:	9608      	strlt	r6, [sp, #32]
 8008be6:	1af2      	sublt	r2, r6, r3
 8008be8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008bea:	bfb6      	itet	lt
 8008bec:	189b      	addlt	r3, r3, r2
 8008bee:	1b9e      	subge	r6, r3, r6
 8008bf0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	bfb8      	it	lt
 8008bf6:	2600      	movlt	r6, #0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfb9      	ittee	lt
 8008bfc:	9b05      	ldrlt	r3, [sp, #20]
 8008bfe:	9a03      	ldrlt	r2, [sp, #12]
 8008c00:	9d05      	ldrge	r5, [sp, #20]
 8008c02:	9b03      	ldrge	r3, [sp, #12]
 8008c04:	bfbc      	itt	lt
 8008c06:	1a9d      	sublt	r5, r3, r2
 8008c08:	2300      	movlt	r3, #0
 8008c0a:	e73e      	b.n	8008a8a <_dtoa_r+0x70a>
 8008c0c:	9e08      	ldr	r6, [sp, #32]
 8008c0e:	9d05      	ldr	r5, [sp, #20]
 8008c10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c12:	e745      	b.n	8008aa0 <_dtoa_r+0x720>
 8008c14:	9a08      	ldr	r2, [sp, #32]
 8008c16:	e76e      	b.n	8008af6 <_dtoa_r+0x776>
 8008c18:	9b07      	ldr	r3, [sp, #28]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	dc19      	bgt.n	8008c52 <_dtoa_r+0x8d2>
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	b9bb      	cbnz	r3, 8008c52 <_dtoa_r+0x8d2>
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c28:	b99b      	cbnz	r3, 8008c52 <_dtoa_r+0x8d2>
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c30:	0d1b      	lsrs	r3, r3, #20
 8008c32:	051b      	lsls	r3, r3, #20
 8008c34:	b183      	cbz	r3, 8008c58 <_dtoa_r+0x8d8>
 8008c36:	9b05      	ldr	r3, [sp, #20]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	9305      	str	r3, [sp, #20]
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	9306      	str	r3, [sp, #24]
 8008c42:	f04f 0801 	mov.w	r8, #1
 8008c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f47f af6d 	bne.w	8008b28 <_dtoa_r+0x7a8>
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e772      	b.n	8008b38 <_dtoa_r+0x7b8>
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	e7f6      	b.n	8008c46 <_dtoa_r+0x8c6>
 8008c58:	4698      	mov	r8, r3
 8008c5a:	e7f4      	b.n	8008c46 <_dtoa_r+0x8c6>
 8008c5c:	d080      	beq.n	8008b60 <_dtoa_r+0x7e0>
 8008c5e:	9a05      	ldr	r2, [sp, #20]
 8008c60:	331c      	adds	r3, #28
 8008c62:	441a      	add	r2, r3
 8008c64:	9205      	str	r2, [sp, #20]
 8008c66:	9a06      	ldr	r2, [sp, #24]
 8008c68:	441a      	add	r2, r3
 8008c6a:	441d      	add	r5, r3
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	e776      	b.n	8008b5e <_dtoa_r+0x7de>
 8008c70:	4603      	mov	r3, r0
 8008c72:	e7f4      	b.n	8008c5e <_dtoa_r+0x8de>
 8008c74:	9b03      	ldr	r3, [sp, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc36      	bgt.n	8008ce8 <_dtoa_r+0x968>
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	dd33      	ble.n	8008ce8 <_dtoa_r+0x968>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	b963      	cbnz	r3, 8008ca2 <_dtoa_r+0x922>
 8008c88:	4631      	mov	r1, r6
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 ff12 	bl	8009ab6 <__multadd>
 8008c92:	4601      	mov	r1, r0
 8008c94:	4606      	mov	r6, r0
 8008c96:	4650      	mov	r0, sl
 8008c98:	f001 f8cb 	bl	8009e32 <__mcmp>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f73f adb6 	bgt.w	800880e <_dtoa_r+0x48e>
 8008ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca4:	9d02      	ldr	r5, [sp, #8]
 8008ca6:	ea6f 0b03 	mvn.w	fp, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fee9 	bl	8009a88 <_Bfree>
 8008cb6:	2f00      	cmp	r7, #0
 8008cb8:	f43f aea6 	beq.w	8008a08 <_dtoa_r+0x688>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	b12b      	cbz	r3, 8008ccc <_dtoa_r+0x94c>
 8008cc0:	42bb      	cmp	r3, r7
 8008cc2:	d003      	beq.n	8008ccc <_dtoa_r+0x94c>
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fede 	bl	8009a88 <_Bfree>
 8008ccc:	4639      	mov	r1, r7
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 feda 	bl	8009a88 <_Bfree>
 8008cd4:	e698      	b.n	8008a08 <_dtoa_r+0x688>
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	4637      	mov	r7, r6
 8008cda:	e7e2      	b.n	8008ca2 <_dtoa_r+0x922>
 8008cdc:	46bb      	mov	fp, r7
 8008cde:	4637      	mov	r7, r6
 8008ce0:	e595      	b.n	800880e <_dtoa_r+0x48e>
 8008ce2:	bf00      	nop
 8008ce4:	40240000 	.word	0x40240000
 8008ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cea:	bb93      	cbnz	r3, 8008d52 <_dtoa_r+0x9d2>
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	9d02      	ldr	r5, [sp, #8]
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	f7ff fab5 	bl	8008264 <quorem>
 8008cfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cfe:	f805 9b01 	strb.w	r9, [r5], #1
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	9a04      	ldr	r2, [sp, #16]
 8008d06:	1aeb      	subs	r3, r5, r3
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f300 80dc 	bgt.w	8008ec6 <_dtoa_r+0xb46>
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	2a01      	cmp	r2, #1
 8008d12:	bfac      	ite	ge
 8008d14:	189b      	addge	r3, r3, r2
 8008d16:	3301      	addlt	r3, #1
 8008d18:	4698      	mov	r8, r3
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	4651      	mov	r1, sl
 8008d20:	2201      	movs	r2, #1
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 f834 	bl	8009d90 <__lshift>
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4682      	mov	sl, r0
 8008d2c:	f001 f881 	bl	8009e32 <__mcmp>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f300 808d 	bgt.w	8008e50 <_dtoa_r+0xad0>
 8008d36:	d103      	bne.n	8008d40 <_dtoa_r+0x9c0>
 8008d38:	f019 0f01 	tst.w	r9, #1
 8008d3c:	f040 8088 	bne.w	8008e50 <_dtoa_r+0xad0>
 8008d40:	4645      	mov	r5, r8
 8008d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d46:	2b30      	cmp	r3, #48	; 0x30
 8008d48:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d4c:	d1af      	bne.n	8008cae <_dtoa_r+0x92e>
 8008d4e:	4615      	mov	r5, r2
 8008d50:	e7f7      	b.n	8008d42 <_dtoa_r+0x9c2>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	dd05      	ble.n	8008d66 <_dtoa_r+0x9e6>
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f001 f816 	bl	8009d90 <__lshift>
 8008d64:	4607      	mov	r7, r0
 8008d66:	f1b8 0f00 	cmp.w	r8, #0
 8008d6a:	d04c      	beq.n	8008e06 <_dtoa_r+0xa86>
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fe56 	bl	8009a20 <_Balloc>
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	3202      	adds	r2, #2
 8008d78:	4605      	mov	r5, r0
 8008d7a:	0092      	lsls	r2, r2, #2
 8008d7c:	f107 010c 	add.w	r1, r7, #12
 8008d80:	300c      	adds	r0, #12
 8008d82:	f000 fe35 	bl	80099f0 <memcpy>
 8008d86:	2201      	movs	r2, #1
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 f800 	bl	8009d90 <__lshift>
 8008d90:	9b00      	ldr	r3, [sp, #0]
 8008d92:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d96:	9703      	str	r7, [sp, #12]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	9305      	str	r3, [sp, #20]
 8008da0:	4631      	mov	r1, r6
 8008da2:	4650      	mov	r0, sl
 8008da4:	f7ff fa5e 	bl	8008264 <quorem>
 8008da8:	9903      	ldr	r1, [sp, #12]
 8008daa:	4605      	mov	r5, r0
 8008dac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008db0:	4650      	mov	r0, sl
 8008db2:	f001 f83e 	bl	8009e32 <__mcmp>
 8008db6:	463a      	mov	r2, r7
 8008db8:	9000      	str	r0, [sp, #0]
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f001 f852 	bl	8009e66 <__mdiff>
 8008dc2:	68c3      	ldr	r3, [r0, #12]
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	bb03      	cbnz	r3, 8008e0a <_dtoa_r+0xa8a>
 8008dc8:	4601      	mov	r1, r0
 8008dca:	9006      	str	r0, [sp, #24]
 8008dcc:	4650      	mov	r0, sl
 8008dce:	f001 f830 	bl	8009e32 <__mcmp>
 8008dd2:	9a06      	ldr	r2, [sp, #24]
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4620      	mov	r0, r4
 8008dda:	9306      	str	r3, [sp, #24]
 8008ddc:	f000 fe54 	bl	8009a88 <_Bfree>
 8008de0:	9b06      	ldr	r3, [sp, #24]
 8008de2:	b9a3      	cbnz	r3, 8008e0e <_dtoa_r+0xa8e>
 8008de4:	9a07      	ldr	r2, [sp, #28]
 8008de6:	b992      	cbnz	r2, 8008e0e <_dtoa_r+0xa8e>
 8008de8:	9a05      	ldr	r2, [sp, #20]
 8008dea:	b982      	cbnz	r2, 8008e0e <_dtoa_r+0xa8e>
 8008dec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008df0:	d029      	beq.n	8008e46 <_dtoa_r+0xac6>
 8008df2:	9b00      	ldr	r3, [sp, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd01      	ble.n	8008dfc <_dtoa_r+0xa7c>
 8008df8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8008dfc:	f108 0501 	add.w	r5, r8, #1
 8008e00:	f888 9000 	strb.w	r9, [r8]
 8008e04:	e753      	b.n	8008cae <_dtoa_r+0x92e>
 8008e06:	4638      	mov	r0, r7
 8008e08:	e7c2      	b.n	8008d90 <_dtoa_r+0xa10>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e7e3      	b.n	8008dd6 <_dtoa_r+0xa56>
 8008e0e:	9a00      	ldr	r2, [sp, #0]
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	db04      	blt.n	8008e1e <_dtoa_r+0xa9e>
 8008e14:	d125      	bne.n	8008e62 <_dtoa_r+0xae2>
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	bb1a      	cbnz	r2, 8008e62 <_dtoa_r+0xae2>
 8008e1a:	9a05      	ldr	r2, [sp, #20]
 8008e1c:	bb0a      	cbnz	r2, 8008e62 <_dtoa_r+0xae2>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	ddec      	ble.n	8008dfc <_dtoa_r+0xa7c>
 8008e22:	4651      	mov	r1, sl
 8008e24:	2201      	movs	r2, #1
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 ffb2 	bl	8009d90 <__lshift>
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4682      	mov	sl, r0
 8008e30:	f000 ffff 	bl	8009e32 <__mcmp>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dc03      	bgt.n	8008e40 <_dtoa_r+0xac0>
 8008e38:	d1e0      	bne.n	8008dfc <_dtoa_r+0xa7c>
 8008e3a:	f019 0f01 	tst.w	r9, #1
 8008e3e:	d0dd      	beq.n	8008dfc <_dtoa_r+0xa7c>
 8008e40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e44:	d1d8      	bne.n	8008df8 <_dtoa_r+0xa78>
 8008e46:	2339      	movs	r3, #57	; 0x39
 8008e48:	f888 3000 	strb.w	r3, [r8]
 8008e4c:	f108 0801 	add.w	r8, r8, #1
 8008e50:	4645      	mov	r5, r8
 8008e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e56:	2b39      	cmp	r3, #57	; 0x39
 8008e58:	f105 32ff 	add.w	r2, r5, #4294967295
 8008e5c:	d03b      	beq.n	8008ed6 <_dtoa_r+0xb56>
 8008e5e:	3301      	adds	r3, #1
 8008e60:	e040      	b.n	8008ee4 <_dtoa_r+0xb64>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f108 0501 	add.w	r5, r8, #1
 8008e68:	dd05      	ble.n	8008e76 <_dtoa_r+0xaf6>
 8008e6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e6e:	d0ea      	beq.n	8008e46 <_dtoa_r+0xac6>
 8008e70:	f109 0901 	add.w	r9, r9, #1
 8008e74:	e7c4      	b.n	8008e00 <_dtoa_r+0xa80>
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	9a04      	ldr	r2, [sp, #16]
 8008e7a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8008e7e:	1aeb      	subs	r3, r5, r3
 8008e80:	4293      	cmp	r3, r2
 8008e82:	46a8      	mov	r8, r5
 8008e84:	f43f af4b 	beq.w	8008d1e <_dtoa_r+0x99e>
 8008e88:	4651      	mov	r1, sl
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fe11 	bl	8009ab6 <__multadd>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	9903      	ldr	r1, [sp, #12]
 8008e98:	42bb      	cmp	r3, r7
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	f04f 020a 	mov.w	r2, #10
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	d104      	bne.n	8008eb2 <_dtoa_r+0xb32>
 8008ea8:	f000 fe05 	bl	8009ab6 <__multadd>
 8008eac:	9003      	str	r0, [sp, #12]
 8008eae:	4607      	mov	r7, r0
 8008eb0:	e776      	b.n	8008da0 <_dtoa_r+0xa20>
 8008eb2:	f000 fe00 	bl	8009ab6 <__multadd>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9003      	str	r0, [sp, #12]
 8008eba:	220a      	movs	r2, #10
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 fdf9 	bl	8009ab6 <__multadd>
 8008ec4:	e7f3      	b.n	8008eae <_dtoa_r+0xb2e>
 8008ec6:	4651      	mov	r1, sl
 8008ec8:	2300      	movs	r3, #0
 8008eca:	220a      	movs	r2, #10
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 fdf2 	bl	8009ab6 <__multadd>
 8008ed2:	4682      	mov	sl, r0
 8008ed4:	e70d      	b.n	8008cf2 <_dtoa_r+0x972>
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d105      	bne.n	8008ee8 <_dtoa_r+0xb68>
 8008edc:	9a02      	ldr	r2, [sp, #8]
 8008ede:	f10b 0b01 	add.w	fp, fp, #1
 8008ee2:	2331      	movs	r3, #49	; 0x31
 8008ee4:	7013      	strb	r3, [r2, #0]
 8008ee6:	e6e2      	b.n	8008cae <_dtoa_r+0x92e>
 8008ee8:	4615      	mov	r5, r2
 8008eea:	e7b2      	b.n	8008e52 <_dtoa_r+0xad2>
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <_dtoa_r+0xb94>)
 8008eee:	f7ff baae 	b.w	800844e <_dtoa_r+0xce>
 8008ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f47f aa88 	bne.w	800840a <_dtoa_r+0x8a>
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <_dtoa_r+0xb98>)
 8008efc:	f7ff baa7 	b.w	800844e <_dtoa_r+0xce>
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f73f aef4 	bgt.w	8008cf0 <_dtoa_r+0x970>
 8008f08:	9b07      	ldr	r3, [sp, #28]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	f77f aef0 	ble.w	8008cf0 <_dtoa_r+0x970>
 8008f10:	e6b8      	b.n	8008c84 <_dtoa_r+0x904>
 8008f12:	bf00      	nop
 8008f14:	0800ac02 	.word	0x0800ac02
 8008f18:	0800ac24 	.word	0x0800ac24

08008f1c <__sflush_r>:
 8008f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f20:	b293      	uxth	r3, r2
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	4605      	mov	r5, r0
 8008f28:	0718      	lsls	r0, r3, #28
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	d461      	bmi.n	8008ff2 <__sflush_r+0xd6>
 8008f2e:	684b      	ldr	r3, [r1, #4]
 8008f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	818a      	strh	r2, [r1, #12]
 8008f38:	dc05      	bgt.n	8008f46 <__sflush_r+0x2a>
 8008f3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dc02      	bgt.n	8008f46 <__sflush_r+0x2a>
 8008f40:	2000      	movs	r0, #0
 8008f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	d0f9      	beq.n	8008f40 <__sflush_r+0x24>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f52:	682f      	ldr	r7, [r5, #0]
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	d037      	beq.n	8008fc8 <__sflush_r+0xac>
 8008f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	075a      	lsls	r2, r3, #29
 8008f5e:	d505      	bpl.n	8008f6c <__sflush_r+0x50>
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	1ac0      	subs	r0, r0, r3
 8008f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f66:	b10b      	cbz	r3, 8008f6c <__sflush_r+0x50>
 8008f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f6a:	1ac0      	subs	r0, r0, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4602      	mov	r2, r0
 8008f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f72:	6a21      	ldr	r1, [r4, #32]
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b0      	blx	r6
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	d106      	bne.n	8008f8c <__sflush_r+0x70>
 8008f7e:	6829      	ldr	r1, [r5, #0]
 8008f80:	291d      	cmp	r1, #29
 8008f82:	d84f      	bhi.n	8009024 <__sflush_r+0x108>
 8008f84:	4a2d      	ldr	r2, [pc, #180]	; (800903c <__sflush_r+0x120>)
 8008f86:	40ca      	lsrs	r2, r1
 8008f88:	07d6      	lsls	r6, r2, #31
 8008f8a:	d54b      	bpl.n	8009024 <__sflush_r+0x108>
 8008f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	2200      	movs	r2, #0
 8008f94:	6062      	str	r2, [r4, #4]
 8008f96:	04d9      	lsls	r1, r3, #19
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	6022      	str	r2, [r4, #0]
 8008f9e:	d504      	bpl.n	8008faa <__sflush_r+0x8e>
 8008fa0:	1c42      	adds	r2, r0, #1
 8008fa2:	d101      	bne.n	8008fa8 <__sflush_r+0x8c>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b903      	cbnz	r3, 8008faa <__sflush_r+0x8e>
 8008fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8008faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fac:	602f      	str	r7, [r5, #0]
 8008fae:	2900      	cmp	r1, #0
 8008fb0:	d0c6      	beq.n	8008f40 <__sflush_r+0x24>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0xa4>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 f9aa 	bl	8009314 <_free_r>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b0      	blx	r6
 8008fd0:	1c41      	adds	r1, r0, #1
 8008fd2:	d1c2      	bne.n	8008f5a <__sflush_r+0x3e>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0bf      	beq.n	8008f5a <__sflush_r+0x3e>
 8008fda:	2b1d      	cmp	r3, #29
 8008fdc:	d001      	beq.n	8008fe2 <__sflush_r+0xc6>
 8008fde:	2b16      	cmp	r3, #22
 8008fe0:	d101      	bne.n	8008fe6 <__sflush_r+0xca>
 8008fe2:	602f      	str	r7, [r5, #0]
 8008fe4:	e7ac      	b.n	8008f40 <__sflush_r+0x24>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff2:	690f      	ldr	r7, [r1, #16]
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	d0a3      	beq.n	8008f40 <__sflush_r+0x24>
 8008ff8:	079b      	lsls	r3, r3, #30
 8008ffa:	680e      	ldr	r6, [r1, #0]
 8008ffc:	bf08      	it	eq
 8008ffe:	694b      	ldreq	r3, [r1, #20]
 8009000:	600f      	str	r7, [r1, #0]
 8009002:	bf18      	it	ne
 8009004:	2300      	movne	r3, #0
 8009006:	eba6 0807 	sub.w	r8, r6, r7
 800900a:	608b      	str	r3, [r1, #8]
 800900c:	f1b8 0f00 	cmp.w	r8, #0
 8009010:	dd96      	ble.n	8008f40 <__sflush_r+0x24>
 8009012:	4643      	mov	r3, r8
 8009014:	463a      	mov	r2, r7
 8009016:	6a21      	ldr	r1, [r4, #32]
 8009018:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800901a:	4628      	mov	r0, r5
 800901c:	47b0      	blx	r6
 800901e:	2800      	cmp	r0, #0
 8009020:	dc07      	bgt.n	8009032 <__sflush_r+0x116>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	f04f 30ff 	mov.w	r0, #4294967295
 800902e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009032:	4407      	add	r7, r0
 8009034:	eba8 0800 	sub.w	r8, r8, r0
 8009038:	e7e8      	b.n	800900c <__sflush_r+0xf0>
 800903a:	bf00      	nop
 800903c:	20400001 	.word	0x20400001

08009040 <_fflush_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	690b      	ldr	r3, [r1, #16]
 8009044:	4605      	mov	r5, r0
 8009046:	460c      	mov	r4, r1
 8009048:	b913      	cbnz	r3, 8009050 <_fflush_r+0x10>
 800904a:	2500      	movs	r5, #0
 800904c:	4628      	mov	r0, r5
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	b118      	cbz	r0, 800905a <_fflush_r+0x1a>
 8009052:	6983      	ldr	r3, [r0, #24]
 8009054:	b90b      	cbnz	r3, 800905a <_fflush_r+0x1a>
 8009056:	f000 f887 	bl	8009168 <__sinit>
 800905a:	4b14      	ldr	r3, [pc, #80]	; (80090ac <_fflush_r+0x6c>)
 800905c:	429c      	cmp	r4, r3
 800905e:	d11b      	bne.n	8009098 <_fflush_r+0x58>
 8009060:	686c      	ldr	r4, [r5, #4]
 8009062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0ef      	beq.n	800904a <_fflush_r+0xa>
 800906a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800906c:	07d0      	lsls	r0, r2, #31
 800906e:	d404      	bmi.n	800907a <_fflush_r+0x3a>
 8009070:	0599      	lsls	r1, r3, #22
 8009072:	d402      	bmi.n	800907a <_fflush_r+0x3a>
 8009074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009076:	f000 fa37 	bl	80094e8 <__retarget_lock_acquire_recursive>
 800907a:	4628      	mov	r0, r5
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff ff4d 	bl	8008f1c <__sflush_r>
 8009082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009084:	07da      	lsls	r2, r3, #31
 8009086:	4605      	mov	r5, r0
 8009088:	d4e0      	bmi.n	800904c <_fflush_r+0xc>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d4dd      	bmi.n	800904c <_fflush_r+0xc>
 8009090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009092:	f000 fa2a 	bl	80094ea <__retarget_lock_release_recursive>
 8009096:	e7d9      	b.n	800904c <_fflush_r+0xc>
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_fflush_r+0x70>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d101      	bne.n	80090a2 <_fflush_r+0x62>
 800909e:	68ac      	ldr	r4, [r5, #8]
 80090a0:	e7df      	b.n	8009062 <_fflush_r+0x22>
 80090a2:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <_fflush_r+0x74>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	bf08      	it	eq
 80090a8:	68ec      	ldreq	r4, [r5, #12]
 80090aa:	e7da      	b.n	8009062 <_fflush_r+0x22>
 80090ac:	0800ac54 	.word	0x0800ac54
 80090b0:	0800ac74 	.word	0x0800ac74
 80090b4:	0800ac34 	.word	0x0800ac34

080090b8 <_cleanup_r>:
 80090b8:	4901      	ldr	r1, [pc, #4]	; (80090c0 <_cleanup_r+0x8>)
 80090ba:	f000 b9e7 	b.w	800948c <_fwalk_reent>
 80090be:	bf00      	nop
 80090c0:	0800a171 	.word	0x0800a171

080090c4 <std.isra.0>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	6003      	str	r3, [r0, #0]
 80090cc:	6043      	str	r3, [r0, #4]
 80090ce:	6083      	str	r3, [r0, #8]
 80090d0:	8181      	strh	r1, [r0, #12]
 80090d2:	6643      	str	r3, [r0, #100]	; 0x64
 80090d4:	81c2      	strh	r2, [r0, #14]
 80090d6:	6103      	str	r3, [r0, #16]
 80090d8:	6143      	str	r3, [r0, #20]
 80090da:	6183      	str	r3, [r0, #24]
 80090dc:	4619      	mov	r1, r3
 80090de:	2208      	movs	r2, #8
 80090e0:	305c      	adds	r0, #92	; 0x5c
 80090e2:	f7fd fee1 	bl	8006ea8 <memset>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std.isra.0+0x38>)
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std.isra.0+0x3c>)
 80090ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std.isra.0+0x40>)
 80090f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std.isra.0+0x44>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	08009fe1 	.word	0x08009fe1
 8009100:	0800a003 	.word	0x0800a003
 8009104:	0800a03b 	.word	0x0800a03b
 8009108:	0800a05f 	.word	0x0800a05f

0800910c <__sfmoreglue>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	1e4a      	subs	r2, r1, #1
 8009110:	2568      	movs	r5, #104	; 0x68
 8009112:	4355      	muls	r5, r2
 8009114:	460e      	mov	r6, r1
 8009116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800911a:	f000 fa5b 	bl	80095d4 <_malloc_r>
 800911e:	4604      	mov	r4, r0
 8009120:	b140      	cbz	r0, 8009134 <__sfmoreglue+0x28>
 8009122:	2100      	movs	r1, #0
 8009124:	e880 0042 	stmia.w	r0, {r1, r6}
 8009128:	300c      	adds	r0, #12
 800912a:	60a0      	str	r0, [r4, #8]
 800912c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009130:	f7fd feba 	bl	8006ea8 <memset>
 8009134:	4620      	mov	r0, r4
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__sfp_lock_acquire>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__sfp_lock_acquire+0x8>)
 800913a:	f000 b9d5 	b.w	80094e8 <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	2000097c 	.word	0x2000097c

08009144 <__sfp_lock_release>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sfp_lock_release+0x8>)
 8009146:	f000 b9d0 	b.w	80094ea <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	2000097c 	.word	0x2000097c

08009150 <__sinit_lock_acquire>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sinit_lock_acquire+0x8>)
 8009152:	f000 b9c9 	b.w	80094e8 <__retarget_lock_acquire_recursive>
 8009156:	bf00      	nop
 8009158:	20000977 	.word	0x20000977

0800915c <__sinit_lock_release>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sinit_lock_release+0x8>)
 800915e:	f000 b9c4 	b.w	80094ea <__retarget_lock_release_recursive>
 8009162:	bf00      	nop
 8009164:	20000977 	.word	0x20000977

08009168 <__sinit>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	f7ff fff0 	bl	8009150 <__sinit_lock_acquire>
 8009170:	69a3      	ldr	r3, [r4, #24]
 8009172:	b11b      	cbz	r3, 800917c <__sinit+0x14>
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f7ff bff0 	b.w	800915c <__sinit_lock_release>
 800917c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8009180:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8009184:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009188:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <__sinit+0x6c>)
 800918a:	4a13      	ldr	r2, [pc, #76]	; (80091d8 <__sinit+0x70>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	62a2      	str	r2, [r4, #40]	; 0x28
 8009190:	429c      	cmp	r4, r3
 8009192:	bf04      	itt	eq
 8009194:	2301      	moveq	r3, #1
 8009196:	61a3      	streq	r3, [r4, #24]
 8009198:	4620      	mov	r0, r4
 800919a:	f000 f81f 	bl	80091dc <__sfp>
 800919e:	6060      	str	r0, [r4, #4]
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f81b 	bl	80091dc <__sfp>
 80091a6:	60a0      	str	r0, [r4, #8]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 f817 	bl	80091dc <__sfp>
 80091ae:	2200      	movs	r2, #0
 80091b0:	60e0      	str	r0, [r4, #12]
 80091b2:	2104      	movs	r1, #4
 80091b4:	6860      	ldr	r0, [r4, #4]
 80091b6:	f7ff ff85 	bl	80090c4 <std.isra.0>
 80091ba:	2201      	movs	r2, #1
 80091bc:	2109      	movs	r1, #9
 80091be:	68a0      	ldr	r0, [r4, #8]
 80091c0:	f7ff ff80 	bl	80090c4 <std.isra.0>
 80091c4:	2202      	movs	r2, #2
 80091c6:	2112      	movs	r1, #18
 80091c8:	68e0      	ldr	r0, [r4, #12]
 80091ca:	f7ff ff7b 	bl	80090c4 <std.isra.0>
 80091ce:	2301      	movs	r3, #1
 80091d0:	61a3      	str	r3, [r4, #24]
 80091d2:	e7cf      	b.n	8009174 <__sinit+0xc>
 80091d4:	0800abcc 	.word	0x0800abcc
 80091d8:	080090b9 	.word	0x080090b9

080091dc <__sfp>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	4607      	mov	r7, r0
 80091e0:	f7ff ffaa 	bl	8009138 <__sfp_lock_acquire>
 80091e4:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <__sfp+0x88>)
 80091e6:	681e      	ldr	r6, [r3, #0]
 80091e8:	69b3      	ldr	r3, [r6, #24]
 80091ea:	b913      	cbnz	r3, 80091f2 <__sfp+0x16>
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff ffbb 	bl	8009168 <__sinit>
 80091f2:	36d8      	adds	r6, #216	; 0xd8
 80091f4:	68b4      	ldr	r4, [r6, #8]
 80091f6:	6873      	ldr	r3, [r6, #4]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	d503      	bpl.n	8009204 <__sfp+0x28>
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	b133      	cbz	r3, 800920e <__sfp+0x32>
 8009200:	6836      	ldr	r6, [r6, #0]
 8009202:	e7f7      	b.n	80091f4 <__sfp+0x18>
 8009204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009208:	b17d      	cbz	r5, 800922a <__sfp+0x4e>
 800920a:	3468      	adds	r4, #104	; 0x68
 800920c:	e7f4      	b.n	80091f8 <__sfp+0x1c>
 800920e:	2104      	movs	r1, #4
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff ff7b 	bl	800910c <__sfmoreglue>
 8009216:	4604      	mov	r4, r0
 8009218:	6030      	str	r0, [r6, #0]
 800921a:	2800      	cmp	r0, #0
 800921c:	d1f0      	bne.n	8009200 <__sfp+0x24>
 800921e:	f7ff ff91 	bl	8009144 <__sfp_lock_release>
 8009222:	230c      	movs	r3, #12
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4620      	mov	r0, r4
 8009228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800922e:	81e3      	strh	r3, [r4, #14]
 8009230:	2301      	movs	r3, #1
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009238:	6665      	str	r5, [r4, #100]	; 0x64
 800923a:	f000 f953 	bl	80094e4 <__retarget_lock_init_recursive>
 800923e:	f7ff ff81 	bl	8009144 <__sfp_lock_release>
 8009242:	6025      	str	r5, [r4, #0]
 8009244:	60a5      	str	r5, [r4, #8]
 8009246:	6065      	str	r5, [r4, #4]
 8009248:	6125      	str	r5, [r4, #16]
 800924a:	6165      	str	r5, [r4, #20]
 800924c:	61a5      	str	r5, [r4, #24]
 800924e:	2208      	movs	r2, #8
 8009250:	4629      	mov	r1, r5
 8009252:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009256:	f7fd fe27 	bl	8006ea8 <memset>
 800925a:	6365      	str	r5, [r4, #52]	; 0x34
 800925c:	63a5      	str	r5, [r4, #56]	; 0x38
 800925e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009260:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009262:	e7e0      	b.n	8009226 <__sfp+0x4a>
 8009264:	0800abcc 	.word	0x0800abcc

08009268 <_malloc_trim_r>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	4f25      	ldr	r7, [pc, #148]	; (8009304 <_malloc_trim_r+0x9c>)
 800926e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009310 <_malloc_trim_r+0xa8>
 8009272:	4689      	mov	r9, r1
 8009274:	4606      	mov	r6, r0
 8009276:	f000 fbc7 	bl	8009a08 <__malloc_lock>
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	685d      	ldr	r5, [r3, #4]
 800927e:	f1a8 0411 	sub.w	r4, r8, #17
 8009282:	f025 0503 	bic.w	r5, r5, #3
 8009286:	eba4 0409 	sub.w	r4, r4, r9
 800928a:	442c      	add	r4, r5
 800928c:	fbb4 f4f8 	udiv	r4, r4, r8
 8009290:	3c01      	subs	r4, #1
 8009292:	fb08 f404 	mul.w	r4, r8, r4
 8009296:	4544      	cmp	r4, r8
 8009298:	da05      	bge.n	80092a6 <_malloc_trim_r+0x3e>
 800929a:	4630      	mov	r0, r6
 800929c:	f000 fbba 	bl	8009a14 <__malloc_unlock>
 80092a0:	2000      	movs	r0, #0
 80092a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a6:	2100      	movs	r1, #0
 80092a8:	4630      	mov	r0, r6
 80092aa:	f000 fe89 	bl	8009fc0 <_sbrk_r>
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	442b      	add	r3, r5
 80092b2:	4298      	cmp	r0, r3
 80092b4:	d1f1      	bne.n	800929a <_malloc_trim_r+0x32>
 80092b6:	4261      	negs	r1, r4
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 fe81 	bl	8009fc0 <_sbrk_r>
 80092be:	3001      	adds	r0, #1
 80092c0:	d110      	bne.n	80092e4 <_malloc_trim_r+0x7c>
 80092c2:	2100      	movs	r1, #0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 fe7b 	bl	8009fc0 <_sbrk_r>
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	1a83      	subs	r3, r0, r2
 80092ce:	2b0f      	cmp	r3, #15
 80092d0:	dde3      	ble.n	800929a <_malloc_trim_r+0x32>
 80092d2:	490d      	ldr	r1, [pc, #52]	; (8009308 <_malloc_trim_r+0xa0>)
 80092d4:	6809      	ldr	r1, [r1, #0]
 80092d6:	1a40      	subs	r0, r0, r1
 80092d8:	490c      	ldr	r1, [pc, #48]	; (800930c <_malloc_trim_r+0xa4>)
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	6008      	str	r0, [r1, #0]
 80092e0:	6053      	str	r3, [r2, #4]
 80092e2:	e7da      	b.n	800929a <_malloc_trim_r+0x32>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4a09      	ldr	r2, [pc, #36]	; (800930c <_malloc_trim_r+0xa4>)
 80092e8:	1b2d      	subs	r5, r5, r4
 80092ea:	f045 0501 	orr.w	r5, r5, #1
 80092ee:	605d      	str	r5, [r3, #4]
 80092f0:	6813      	ldr	r3, [r2, #0]
 80092f2:	4630      	mov	r0, r6
 80092f4:	1b1c      	subs	r4, r3, r4
 80092f6:	6014      	str	r4, [r2, #0]
 80092f8:	f000 fb8c 	bl	8009a14 <__malloc_unlock>
 80092fc:	2001      	movs	r0, #1
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	bf00      	nop
 8009304:	20000100 	.word	0x20000100
 8009308:	20000508 	.word	0x20000508
 800930c:	200006e8 	.word	0x200006e8
 8009310:	00001000 	.word	0x00001000

08009314 <_free_r>:
 8009314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009318:	4604      	mov	r4, r0
 800931a:	4688      	mov	r8, r1
 800931c:	2900      	cmp	r1, #0
 800931e:	f000 80ab 	beq.w	8009478 <_free_r+0x164>
 8009322:	f000 fb71 	bl	8009a08 <__malloc_lock>
 8009326:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800932a:	4d54      	ldr	r5, [pc, #336]	; (800947c <_free_r+0x168>)
 800932c:	f022 0001 	bic.w	r0, r2, #1
 8009330:	f1a8 0308 	sub.w	r3, r8, #8
 8009334:	181f      	adds	r7, r3, r0
 8009336:	68a9      	ldr	r1, [r5, #8]
 8009338:	687e      	ldr	r6, [r7, #4]
 800933a:	428f      	cmp	r7, r1
 800933c:	f026 0603 	bic.w	r6, r6, #3
 8009340:	f002 0201 	and.w	r2, r2, #1
 8009344:	d11b      	bne.n	800937e <_free_r+0x6a>
 8009346:	4430      	add	r0, r6
 8009348:	b93a      	cbnz	r2, 800935a <_free_r+0x46>
 800934a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	4410      	add	r0, r2
 8009352:	6899      	ldr	r1, [r3, #8]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	60ca      	str	r2, [r1, #12]
 8009358:	6091      	str	r1, [r2, #8]
 800935a:	f040 0201 	orr.w	r2, r0, #1
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	60ab      	str	r3, [r5, #8]
 8009362:	4b47      	ldr	r3, [pc, #284]	; (8009480 <_free_r+0x16c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4298      	cmp	r0, r3
 8009368:	d304      	bcc.n	8009374 <_free_r+0x60>
 800936a:	4b46      	ldr	r3, [pc, #280]	; (8009484 <_free_r+0x170>)
 800936c:	4620      	mov	r0, r4
 800936e:	6819      	ldr	r1, [r3, #0]
 8009370:	f7ff ff7a 	bl	8009268 <_malloc_trim_r>
 8009374:	4620      	mov	r0, r4
 8009376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	f000 bb4b 	b.w	8009a14 <__malloc_unlock>
 800937e:	607e      	str	r6, [r7, #4]
 8009380:	2a00      	cmp	r2, #0
 8009382:	d139      	bne.n	80093f8 <_free_r+0xe4>
 8009384:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009388:	1a5b      	subs	r3, r3, r1
 800938a:	4408      	add	r0, r1
 800938c:	6899      	ldr	r1, [r3, #8]
 800938e:	f105 0e08 	add.w	lr, r5, #8
 8009392:	4571      	cmp	r1, lr
 8009394:	d032      	beq.n	80093fc <_free_r+0xe8>
 8009396:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800939a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800939e:	f8ce 1008 	str.w	r1, [lr, #8]
 80093a2:	19b9      	adds	r1, r7, r6
 80093a4:	6849      	ldr	r1, [r1, #4]
 80093a6:	07c9      	lsls	r1, r1, #31
 80093a8:	d40a      	bmi.n	80093c0 <_free_r+0xac>
 80093aa:	4430      	add	r0, r6
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	bb3a      	cbnz	r2, 8009400 <_free_r+0xec>
 80093b0:	4e35      	ldr	r6, [pc, #212]	; (8009488 <_free_r+0x174>)
 80093b2:	42b1      	cmp	r1, r6
 80093b4:	d124      	bne.n	8009400 <_free_r+0xec>
 80093b6:	616b      	str	r3, [r5, #20]
 80093b8:	612b      	str	r3, [r5, #16]
 80093ba:	2201      	movs	r2, #1
 80093bc:	60d9      	str	r1, [r3, #12]
 80093be:	6099      	str	r1, [r3, #8]
 80093c0:	f040 0101 	orr.w	r1, r0, #1
 80093c4:	6059      	str	r1, [r3, #4]
 80093c6:	5018      	str	r0, [r3, r0]
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	d1d3      	bne.n	8009374 <_free_r+0x60>
 80093cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80093d0:	d21a      	bcs.n	8009408 <_free_r+0xf4>
 80093d2:	08c0      	lsrs	r0, r0, #3
 80093d4:	1081      	asrs	r1, r0, #2
 80093d6:	2201      	movs	r2, #1
 80093d8:	408a      	lsls	r2, r1
 80093da:	6869      	ldr	r1, [r5, #4]
 80093dc:	3001      	adds	r0, #1
 80093de:	430a      	orrs	r2, r1
 80093e0:	606a      	str	r2, [r5, #4]
 80093e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80093e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80093ea:	6099      	str	r1, [r3, #8]
 80093ec:	3a08      	subs	r2, #8
 80093ee:	60da      	str	r2, [r3, #12]
 80093f0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80093f4:	60cb      	str	r3, [r1, #12]
 80093f6:	e7bd      	b.n	8009374 <_free_r+0x60>
 80093f8:	2200      	movs	r2, #0
 80093fa:	e7d2      	b.n	80093a2 <_free_r+0x8e>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7d0      	b.n	80093a2 <_free_r+0x8e>
 8009400:	68fe      	ldr	r6, [r7, #12]
 8009402:	60ce      	str	r6, [r1, #12]
 8009404:	60b1      	str	r1, [r6, #8]
 8009406:	e7db      	b.n	80093c0 <_free_r+0xac>
 8009408:	0a42      	lsrs	r2, r0, #9
 800940a:	2a04      	cmp	r2, #4
 800940c:	d813      	bhi.n	8009436 <_free_r+0x122>
 800940e:	0982      	lsrs	r2, r0, #6
 8009410:	3238      	adds	r2, #56	; 0x38
 8009412:	1c51      	adds	r1, r2, #1
 8009414:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009418:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800941c:	428e      	cmp	r6, r1
 800941e:	d124      	bne.n	800946a <_free_r+0x156>
 8009420:	2001      	movs	r0, #1
 8009422:	1092      	asrs	r2, r2, #2
 8009424:	fa00 f202 	lsl.w	r2, r0, r2
 8009428:	6868      	ldr	r0, [r5, #4]
 800942a:	4302      	orrs	r2, r0
 800942c:	606a      	str	r2, [r5, #4]
 800942e:	60de      	str	r6, [r3, #12]
 8009430:	6099      	str	r1, [r3, #8]
 8009432:	60b3      	str	r3, [r6, #8]
 8009434:	e7de      	b.n	80093f4 <_free_r+0xe0>
 8009436:	2a14      	cmp	r2, #20
 8009438:	d801      	bhi.n	800943e <_free_r+0x12a>
 800943a:	325b      	adds	r2, #91	; 0x5b
 800943c:	e7e9      	b.n	8009412 <_free_r+0xfe>
 800943e:	2a54      	cmp	r2, #84	; 0x54
 8009440:	d802      	bhi.n	8009448 <_free_r+0x134>
 8009442:	0b02      	lsrs	r2, r0, #12
 8009444:	326e      	adds	r2, #110	; 0x6e
 8009446:	e7e4      	b.n	8009412 <_free_r+0xfe>
 8009448:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800944c:	d802      	bhi.n	8009454 <_free_r+0x140>
 800944e:	0bc2      	lsrs	r2, r0, #15
 8009450:	3277      	adds	r2, #119	; 0x77
 8009452:	e7de      	b.n	8009412 <_free_r+0xfe>
 8009454:	f240 5154 	movw	r1, #1364	; 0x554
 8009458:	428a      	cmp	r2, r1
 800945a:	bf9a      	itte	ls
 800945c:	0c82      	lsrls	r2, r0, #18
 800945e:	327c      	addls	r2, #124	; 0x7c
 8009460:	227e      	movhi	r2, #126	; 0x7e
 8009462:	e7d6      	b.n	8009412 <_free_r+0xfe>
 8009464:	6889      	ldr	r1, [r1, #8]
 8009466:	428e      	cmp	r6, r1
 8009468:	d004      	beq.n	8009474 <_free_r+0x160>
 800946a:	684a      	ldr	r2, [r1, #4]
 800946c:	f022 0203 	bic.w	r2, r2, #3
 8009470:	4290      	cmp	r0, r2
 8009472:	d3f7      	bcc.n	8009464 <_free_r+0x150>
 8009474:	68ce      	ldr	r6, [r1, #12]
 8009476:	e7da      	b.n	800942e <_free_r+0x11a>
 8009478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947c:	20000100 	.word	0x20000100
 8009480:	2000050c 	.word	0x2000050c
 8009484:	20000718 	.word	0x20000718
 8009488:	20000108 	.word	0x20000108

0800948c <_fwalk_reent>:
 800948c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8009498:	2600      	movs	r6, #0
 800949a:	b914      	cbnz	r4, 80094a2 <_fwalk_reent+0x16>
 800949c:	4630      	mov	r0, r6
 800949e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a2:	68a5      	ldr	r5, [r4, #8]
 80094a4:	6867      	ldr	r7, [r4, #4]
 80094a6:	3f01      	subs	r7, #1
 80094a8:	d501      	bpl.n	80094ae <_fwalk_reent+0x22>
 80094aa:	6824      	ldr	r4, [r4, #0]
 80094ac:	e7f5      	b.n	800949a <_fwalk_reent+0xe>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d907      	bls.n	80094c4 <_fwalk_reent+0x38>
 80094b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094b8:	3301      	adds	r3, #1
 80094ba:	d003      	beq.n	80094c4 <_fwalk_reent+0x38>
 80094bc:	4629      	mov	r1, r5
 80094be:	4640      	mov	r0, r8
 80094c0:	47c8      	blx	r9
 80094c2:	4306      	orrs	r6, r0
 80094c4:	3568      	adds	r5, #104	; 0x68
 80094c6:	e7ee      	b.n	80094a6 <_fwalk_reent+0x1a>

080094c8 <_localeconv_r>:
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <_localeconv_r+0x14>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6a18      	ldr	r0, [r3, #32]
 80094ce:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <_localeconv_r+0x18>)
 80094d0:	2800      	cmp	r0, #0
 80094d2:	bf08      	it	eq
 80094d4:	4618      	moveq	r0, r3
 80094d6:	30f0      	adds	r0, #240	; 0xf0
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	2000000c 	.word	0x2000000c
 80094e0:	20000510 	.word	0x20000510

080094e4 <__retarget_lock_init_recursive>:
 80094e4:	4770      	bx	lr

080094e6 <__retarget_lock_close_recursive>:
 80094e6:	4770      	bx	lr

080094e8 <__retarget_lock_acquire_recursive>:
 80094e8:	4770      	bx	lr

080094ea <__retarget_lock_release_recursive>:
 80094ea:	4770      	bx	lr

080094ec <__swhatbuf_r>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	460e      	mov	r6, r1
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	2900      	cmp	r1, #0
 80094f6:	b090      	sub	sp, #64	; 0x40
 80094f8:	4614      	mov	r4, r2
 80094fa:	461d      	mov	r5, r3
 80094fc:	da09      	bge.n	8009512 <__swhatbuf_r+0x26>
 80094fe:	89b3      	ldrh	r3, [r6, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009506:	602a      	str	r2, [r5, #0]
 8009508:	d116      	bne.n	8009538 <__swhatbuf_r+0x4c>
 800950a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	e015      	b.n	800953e <__swhatbuf_r+0x52>
 8009512:	aa01      	add	r2, sp, #4
 8009514:	f000 ff02 	bl	800a31c <_fstat_r>
 8009518:	2800      	cmp	r0, #0
 800951a:	dbf0      	blt.n	80094fe <__swhatbuf_r+0x12>
 800951c:	9a02      	ldr	r2, [sp, #8]
 800951e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009526:	425a      	negs	r2, r3
 8009528:	415a      	adcs	r2, r3
 800952a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	e002      	b.n	800953e <__swhatbuf_r+0x52>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	4610      	mov	r0, r2
 800953e:	b010      	add	sp, #64	; 0x40
 8009540:	bd70      	pop	{r4, r5, r6, pc}
	...

08009544 <__smakebuf_r>:
 8009544:	898b      	ldrh	r3, [r1, #12]
 8009546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009548:	079d      	lsls	r5, r3, #30
 800954a:	4606      	mov	r6, r0
 800954c:	460c      	mov	r4, r1
 800954e:	d507      	bpl.n	8009560 <__smakebuf_r+0x1c>
 8009550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	2301      	movs	r3, #1
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	b002      	add	sp, #8
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	ab01      	add	r3, sp, #4
 8009562:	466a      	mov	r2, sp
 8009564:	f7ff ffc2 	bl	80094ec <__swhatbuf_r>
 8009568:	9900      	ldr	r1, [sp, #0]
 800956a:	4605      	mov	r5, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f831 	bl	80095d4 <_malloc_r>
 8009572:	b948      	cbnz	r0, 8009588 <__smakebuf_r+0x44>
 8009574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d4ef      	bmi.n	800955c <__smakebuf_r+0x18>
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7e3      	b.n	8009550 <__smakebuf_r+0xc>
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <__smakebuf_r+0x7c>)
 800958a:	62b3      	str	r3, [r6, #40]	; 0x28
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	6020      	str	r0, [r4, #0]
 8009590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	6163      	str	r3, [r4, #20]
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	6120      	str	r0, [r4, #16]
 800959e:	b15b      	cbz	r3, 80095b8 <__smakebuf_r+0x74>
 80095a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a4:	4630      	mov	r0, r6
 80095a6:	f001 f819 	bl	800a5dc <_isatty_r>
 80095aa:	b128      	cbz	r0, 80095b8 <__smakebuf_r+0x74>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	431d      	orrs	r5, r3
 80095bc:	81a5      	strh	r5, [r4, #12]
 80095be:	e7cd      	b.n	800955c <__smakebuf_r+0x18>
 80095c0:	080090b9 	.word	0x080090b9

080095c4 <malloc>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <malloc+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f000 b803 	b.w	80095d4 <_malloc_r>
 80095ce:	bf00      	nop
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <_malloc_r>:
 80095d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	f101 040b 	add.w	r4, r1, #11
 80095dc:	2c16      	cmp	r4, #22
 80095de:	4681      	mov	r9, r0
 80095e0:	d907      	bls.n	80095f2 <_malloc_r+0x1e>
 80095e2:	f034 0407 	bics.w	r4, r4, #7
 80095e6:	d505      	bpl.n	80095f4 <_malloc_r+0x20>
 80095e8:	230c      	movs	r3, #12
 80095ea:	f8c9 3000 	str.w	r3, [r9]
 80095ee:	2600      	movs	r6, #0
 80095f0:	e131      	b.n	8009856 <_malloc_r+0x282>
 80095f2:	2410      	movs	r4, #16
 80095f4:	428c      	cmp	r4, r1
 80095f6:	d3f7      	bcc.n	80095e8 <_malloc_r+0x14>
 80095f8:	4648      	mov	r0, r9
 80095fa:	f000 fa05 	bl	8009a08 <__malloc_lock>
 80095fe:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009602:	4d9c      	ldr	r5, [pc, #624]	; (8009874 <_malloc_r+0x2a0>)
 8009604:	d236      	bcs.n	8009674 <_malloc_r+0xa0>
 8009606:	f104 0208 	add.w	r2, r4, #8
 800960a:	442a      	add	r2, r5
 800960c:	f1a2 0108 	sub.w	r1, r2, #8
 8009610:	6856      	ldr	r6, [r2, #4]
 8009612:	428e      	cmp	r6, r1
 8009614:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009618:	d102      	bne.n	8009620 <_malloc_r+0x4c>
 800961a:	68d6      	ldr	r6, [r2, #12]
 800961c:	42b2      	cmp	r2, r6
 800961e:	d010      	beq.n	8009642 <_malloc_r+0x6e>
 8009620:	6873      	ldr	r3, [r6, #4]
 8009622:	68f2      	ldr	r2, [r6, #12]
 8009624:	68b1      	ldr	r1, [r6, #8]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	60ca      	str	r2, [r1, #12]
 800962c:	4433      	add	r3, r6
 800962e:	6091      	str	r1, [r2, #8]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	4648      	mov	r0, r9
 800963a:	f000 f9eb 	bl	8009a14 <__malloc_unlock>
 800963e:	3608      	adds	r6, #8
 8009640:	e109      	b.n	8009856 <_malloc_r+0x282>
 8009642:	3302      	adds	r3, #2
 8009644:	4a8c      	ldr	r2, [pc, #560]	; (8009878 <_malloc_r+0x2a4>)
 8009646:	692e      	ldr	r6, [r5, #16]
 8009648:	4296      	cmp	r6, r2
 800964a:	4611      	mov	r1, r2
 800964c:	d06d      	beq.n	800972a <_malloc_r+0x156>
 800964e:	6870      	ldr	r0, [r6, #4]
 8009650:	f020 0003 	bic.w	r0, r0, #3
 8009654:	1b07      	subs	r7, r0, r4
 8009656:	2f0f      	cmp	r7, #15
 8009658:	dd47      	ble.n	80096ea <_malloc_r+0x116>
 800965a:	1933      	adds	r3, r6, r4
 800965c:	f044 0401 	orr.w	r4, r4, #1
 8009660:	6074      	str	r4, [r6, #4]
 8009662:	616b      	str	r3, [r5, #20]
 8009664:	612b      	str	r3, [r5, #16]
 8009666:	60da      	str	r2, [r3, #12]
 8009668:	609a      	str	r2, [r3, #8]
 800966a:	f047 0201 	orr.w	r2, r7, #1
 800966e:	605a      	str	r2, [r3, #4]
 8009670:	5037      	str	r7, [r6, r0]
 8009672:	e7e1      	b.n	8009638 <_malloc_r+0x64>
 8009674:	0a63      	lsrs	r3, r4, #9
 8009676:	d02a      	beq.n	80096ce <_malloc_r+0xfa>
 8009678:	2b04      	cmp	r3, #4
 800967a:	d812      	bhi.n	80096a2 <_malloc_r+0xce>
 800967c:	09a3      	lsrs	r3, r4, #6
 800967e:	3338      	adds	r3, #56	; 0x38
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009686:	f1a2 0008 	sub.w	r0, r2, #8
 800968a:	6856      	ldr	r6, [r2, #4]
 800968c:	4286      	cmp	r6, r0
 800968e:	d006      	beq.n	800969e <_malloc_r+0xca>
 8009690:	6872      	ldr	r2, [r6, #4]
 8009692:	f022 0203 	bic.w	r2, r2, #3
 8009696:	1b11      	subs	r1, r2, r4
 8009698:	290f      	cmp	r1, #15
 800969a:	dd1c      	ble.n	80096d6 <_malloc_r+0x102>
 800969c:	3b01      	subs	r3, #1
 800969e:	3301      	adds	r3, #1
 80096a0:	e7d0      	b.n	8009644 <_malloc_r+0x70>
 80096a2:	2b14      	cmp	r3, #20
 80096a4:	d801      	bhi.n	80096aa <_malloc_r+0xd6>
 80096a6:	335b      	adds	r3, #91	; 0x5b
 80096a8:	e7ea      	b.n	8009680 <_malloc_r+0xac>
 80096aa:	2b54      	cmp	r3, #84	; 0x54
 80096ac:	d802      	bhi.n	80096b4 <_malloc_r+0xe0>
 80096ae:	0b23      	lsrs	r3, r4, #12
 80096b0:	336e      	adds	r3, #110	; 0x6e
 80096b2:	e7e5      	b.n	8009680 <_malloc_r+0xac>
 80096b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80096b8:	d802      	bhi.n	80096c0 <_malloc_r+0xec>
 80096ba:	0be3      	lsrs	r3, r4, #15
 80096bc:	3377      	adds	r3, #119	; 0x77
 80096be:	e7df      	b.n	8009680 <_malloc_r+0xac>
 80096c0:	f240 5254 	movw	r2, #1364	; 0x554
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d804      	bhi.n	80096d2 <_malloc_r+0xfe>
 80096c8:	0ca3      	lsrs	r3, r4, #18
 80096ca:	337c      	adds	r3, #124	; 0x7c
 80096cc:	e7d8      	b.n	8009680 <_malloc_r+0xac>
 80096ce:	233f      	movs	r3, #63	; 0x3f
 80096d0:	e7d6      	b.n	8009680 <_malloc_r+0xac>
 80096d2:	237e      	movs	r3, #126	; 0x7e
 80096d4:	e7d4      	b.n	8009680 <_malloc_r+0xac>
 80096d6:	2900      	cmp	r1, #0
 80096d8:	68f1      	ldr	r1, [r6, #12]
 80096da:	db04      	blt.n	80096e6 <_malloc_r+0x112>
 80096dc:	68b3      	ldr	r3, [r6, #8]
 80096de:	60d9      	str	r1, [r3, #12]
 80096e0:	608b      	str	r3, [r1, #8]
 80096e2:	18b3      	adds	r3, r6, r2
 80096e4:	e7a4      	b.n	8009630 <_malloc_r+0x5c>
 80096e6:	460e      	mov	r6, r1
 80096e8:	e7d0      	b.n	800968c <_malloc_r+0xb8>
 80096ea:	2f00      	cmp	r7, #0
 80096ec:	616a      	str	r2, [r5, #20]
 80096ee:	612a      	str	r2, [r5, #16]
 80096f0:	db05      	blt.n	80096fe <_malloc_r+0x12a>
 80096f2:	4430      	add	r0, r6
 80096f4:	6843      	ldr	r3, [r0, #4]
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	6043      	str	r3, [r0, #4]
 80096fc:	e79c      	b.n	8009638 <_malloc_r+0x64>
 80096fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009702:	d244      	bcs.n	800978e <_malloc_r+0x1ba>
 8009704:	08c0      	lsrs	r0, r0, #3
 8009706:	1087      	asrs	r7, r0, #2
 8009708:	2201      	movs	r2, #1
 800970a:	fa02 f707 	lsl.w	r7, r2, r7
 800970e:	686a      	ldr	r2, [r5, #4]
 8009710:	3001      	adds	r0, #1
 8009712:	433a      	orrs	r2, r7
 8009714:	606a      	str	r2, [r5, #4]
 8009716:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800971a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800971e:	60b7      	str	r7, [r6, #8]
 8009720:	3a08      	subs	r2, #8
 8009722:	60f2      	str	r2, [r6, #12]
 8009724:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009728:	60fe      	str	r6, [r7, #12]
 800972a:	2001      	movs	r0, #1
 800972c:	109a      	asrs	r2, r3, #2
 800972e:	fa00 f202 	lsl.w	r2, r0, r2
 8009732:	6868      	ldr	r0, [r5, #4]
 8009734:	4282      	cmp	r2, r0
 8009736:	f200 80a1 	bhi.w	800987c <_malloc_r+0x2a8>
 800973a:	4202      	tst	r2, r0
 800973c:	d106      	bne.n	800974c <_malloc_r+0x178>
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	0052      	lsls	r2, r2, #1
 8009744:	4202      	tst	r2, r0
 8009746:	f103 0304 	add.w	r3, r3, #4
 800974a:	d0fa      	beq.n	8009742 <_malloc_r+0x16e>
 800974c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009750:	46e0      	mov	r8, ip
 8009752:	469e      	mov	lr, r3
 8009754:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009758:	4546      	cmp	r6, r8
 800975a:	d153      	bne.n	8009804 <_malloc_r+0x230>
 800975c:	f10e 0e01 	add.w	lr, lr, #1
 8009760:	f01e 0f03 	tst.w	lr, #3
 8009764:	f108 0808 	add.w	r8, r8, #8
 8009768:	d1f4      	bne.n	8009754 <_malloc_r+0x180>
 800976a:	0798      	lsls	r0, r3, #30
 800976c:	d179      	bne.n	8009862 <_malloc_r+0x28e>
 800976e:	686b      	ldr	r3, [r5, #4]
 8009770:	ea23 0302 	bic.w	r3, r3, r2
 8009774:	606b      	str	r3, [r5, #4]
 8009776:	6868      	ldr	r0, [r5, #4]
 8009778:	0052      	lsls	r2, r2, #1
 800977a:	4282      	cmp	r2, r0
 800977c:	d87e      	bhi.n	800987c <_malloc_r+0x2a8>
 800977e:	2a00      	cmp	r2, #0
 8009780:	d07c      	beq.n	800987c <_malloc_r+0x2a8>
 8009782:	4673      	mov	r3, lr
 8009784:	4202      	tst	r2, r0
 8009786:	d1e1      	bne.n	800974c <_malloc_r+0x178>
 8009788:	3304      	adds	r3, #4
 800978a:	0052      	lsls	r2, r2, #1
 800978c:	e7fa      	b.n	8009784 <_malloc_r+0x1b0>
 800978e:	0a42      	lsrs	r2, r0, #9
 8009790:	2a04      	cmp	r2, #4
 8009792:	d815      	bhi.n	80097c0 <_malloc_r+0x1ec>
 8009794:	0982      	lsrs	r2, r0, #6
 8009796:	3238      	adds	r2, #56	; 0x38
 8009798:	1c57      	adds	r7, r2, #1
 800979a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800979e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80097a2:	45be      	cmp	lr, r7
 80097a4:	d126      	bne.n	80097f4 <_malloc_r+0x220>
 80097a6:	2001      	movs	r0, #1
 80097a8:	1092      	asrs	r2, r2, #2
 80097aa:	fa00 f202 	lsl.w	r2, r0, r2
 80097ae:	6868      	ldr	r0, [r5, #4]
 80097b0:	4310      	orrs	r0, r2
 80097b2:	6068      	str	r0, [r5, #4]
 80097b4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80097b8:	60b7      	str	r7, [r6, #8]
 80097ba:	f8ce 6008 	str.w	r6, [lr, #8]
 80097be:	e7b3      	b.n	8009728 <_malloc_r+0x154>
 80097c0:	2a14      	cmp	r2, #20
 80097c2:	d801      	bhi.n	80097c8 <_malloc_r+0x1f4>
 80097c4:	325b      	adds	r2, #91	; 0x5b
 80097c6:	e7e7      	b.n	8009798 <_malloc_r+0x1c4>
 80097c8:	2a54      	cmp	r2, #84	; 0x54
 80097ca:	d802      	bhi.n	80097d2 <_malloc_r+0x1fe>
 80097cc:	0b02      	lsrs	r2, r0, #12
 80097ce:	326e      	adds	r2, #110	; 0x6e
 80097d0:	e7e2      	b.n	8009798 <_malloc_r+0x1c4>
 80097d2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80097d6:	d802      	bhi.n	80097de <_malloc_r+0x20a>
 80097d8:	0bc2      	lsrs	r2, r0, #15
 80097da:	3277      	adds	r2, #119	; 0x77
 80097dc:	e7dc      	b.n	8009798 <_malloc_r+0x1c4>
 80097de:	f240 5754 	movw	r7, #1364	; 0x554
 80097e2:	42ba      	cmp	r2, r7
 80097e4:	bf9a      	itte	ls
 80097e6:	0c82      	lsrls	r2, r0, #18
 80097e8:	327c      	addls	r2, #124	; 0x7c
 80097ea:	227e      	movhi	r2, #126	; 0x7e
 80097ec:	e7d4      	b.n	8009798 <_malloc_r+0x1c4>
 80097ee:	68bf      	ldr	r7, [r7, #8]
 80097f0:	45be      	cmp	lr, r7
 80097f2:	d004      	beq.n	80097fe <_malloc_r+0x22a>
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	f022 0203 	bic.w	r2, r2, #3
 80097fa:	4290      	cmp	r0, r2
 80097fc:	d3f7      	bcc.n	80097ee <_malloc_r+0x21a>
 80097fe:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009802:	e7d7      	b.n	80097b4 <_malloc_r+0x1e0>
 8009804:	6870      	ldr	r0, [r6, #4]
 8009806:	68f7      	ldr	r7, [r6, #12]
 8009808:	f020 0003 	bic.w	r0, r0, #3
 800980c:	eba0 0a04 	sub.w	sl, r0, r4
 8009810:	f1ba 0f0f 	cmp.w	sl, #15
 8009814:	dd10      	ble.n	8009838 <_malloc_r+0x264>
 8009816:	68b2      	ldr	r2, [r6, #8]
 8009818:	1933      	adds	r3, r6, r4
 800981a:	f044 0401 	orr.w	r4, r4, #1
 800981e:	6074      	str	r4, [r6, #4]
 8009820:	60d7      	str	r7, [r2, #12]
 8009822:	60ba      	str	r2, [r7, #8]
 8009824:	f04a 0201 	orr.w	r2, sl, #1
 8009828:	616b      	str	r3, [r5, #20]
 800982a:	612b      	str	r3, [r5, #16]
 800982c:	60d9      	str	r1, [r3, #12]
 800982e:	6099      	str	r1, [r3, #8]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	f846 a000 	str.w	sl, [r6, r0]
 8009836:	e6ff      	b.n	8009638 <_malloc_r+0x64>
 8009838:	f1ba 0f00 	cmp.w	sl, #0
 800983c:	db0f      	blt.n	800985e <_malloc_r+0x28a>
 800983e:	4430      	add	r0, r6
 8009840:	6843      	ldr	r3, [r0, #4]
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	6043      	str	r3, [r0, #4]
 8009848:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800984c:	4648      	mov	r0, r9
 800984e:	60df      	str	r7, [r3, #12]
 8009850:	60bb      	str	r3, [r7, #8]
 8009852:	f000 f8df 	bl	8009a14 <__malloc_unlock>
 8009856:	4630      	mov	r0, r6
 8009858:	b003      	add	sp, #12
 800985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985e:	463e      	mov	r6, r7
 8009860:	e77a      	b.n	8009758 <_malloc_r+0x184>
 8009862:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009866:	4584      	cmp	ip, r0
 8009868:	f103 33ff 	add.w	r3, r3, #4294967295
 800986c:	f43f af7d 	beq.w	800976a <_malloc_r+0x196>
 8009870:	e781      	b.n	8009776 <_malloc_r+0x1a2>
 8009872:	bf00      	nop
 8009874:	20000100 	.word	0x20000100
 8009878:	20000108 	.word	0x20000108
 800987c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009880:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009884:	f026 0603 	bic.w	r6, r6, #3
 8009888:	42b4      	cmp	r4, r6
 800988a:	d803      	bhi.n	8009894 <_malloc_r+0x2c0>
 800988c:	1b33      	subs	r3, r6, r4
 800988e:	2b0f      	cmp	r3, #15
 8009890:	f300 8096 	bgt.w	80099c0 <_malloc_r+0x3ec>
 8009894:	4a4f      	ldr	r2, [pc, #316]	; (80099d4 <_malloc_r+0x400>)
 8009896:	6817      	ldr	r7, [r2, #0]
 8009898:	4a4f      	ldr	r2, [pc, #316]	; (80099d8 <_malloc_r+0x404>)
 800989a:	6811      	ldr	r1, [r2, #0]
 800989c:	3710      	adds	r7, #16
 800989e:	3101      	adds	r1, #1
 80098a0:	eb0b 0306 	add.w	r3, fp, r6
 80098a4:	4427      	add	r7, r4
 80098a6:	d005      	beq.n	80098b4 <_malloc_r+0x2e0>
 80098a8:	494c      	ldr	r1, [pc, #304]	; (80099dc <_malloc_r+0x408>)
 80098aa:	3901      	subs	r1, #1
 80098ac:	440f      	add	r7, r1
 80098ae:	3101      	adds	r1, #1
 80098b0:	4249      	negs	r1, r1
 80098b2:	400f      	ands	r7, r1
 80098b4:	4639      	mov	r1, r7
 80098b6:	4648      	mov	r0, r9
 80098b8:	9201      	str	r2, [sp, #4]
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	f000 fb80 	bl	8009fc0 <_sbrk_r>
 80098c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098c4:	4680      	mov	r8, r0
 80098c6:	d056      	beq.n	8009976 <_malloc_r+0x3a2>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	9a01      	ldr	r2, [sp, #4]
 80098cc:	4283      	cmp	r3, r0
 80098ce:	d901      	bls.n	80098d4 <_malloc_r+0x300>
 80098d0:	45ab      	cmp	fp, r5
 80098d2:	d150      	bne.n	8009976 <_malloc_r+0x3a2>
 80098d4:	4842      	ldr	r0, [pc, #264]	; (80099e0 <_malloc_r+0x40c>)
 80098d6:	6801      	ldr	r1, [r0, #0]
 80098d8:	4543      	cmp	r3, r8
 80098da:	eb07 0e01 	add.w	lr, r7, r1
 80098de:	f8c0 e000 	str.w	lr, [r0]
 80098e2:	4940      	ldr	r1, [pc, #256]	; (80099e4 <_malloc_r+0x410>)
 80098e4:	4682      	mov	sl, r0
 80098e6:	d113      	bne.n	8009910 <_malloc_r+0x33c>
 80098e8:	420b      	tst	r3, r1
 80098ea:	d111      	bne.n	8009910 <_malloc_r+0x33c>
 80098ec:	68ab      	ldr	r3, [r5, #8]
 80098ee:	443e      	add	r6, r7
 80098f0:	f046 0601 	orr.w	r6, r6, #1
 80098f4:	605e      	str	r6, [r3, #4]
 80098f6:	4a3c      	ldr	r2, [pc, #240]	; (80099e8 <_malloc_r+0x414>)
 80098f8:	f8da 3000 	ldr.w	r3, [sl]
 80098fc:	6811      	ldr	r1, [r2, #0]
 80098fe:	428b      	cmp	r3, r1
 8009900:	bf88      	it	hi
 8009902:	6013      	strhi	r3, [r2, #0]
 8009904:	4a39      	ldr	r2, [pc, #228]	; (80099ec <_malloc_r+0x418>)
 8009906:	6811      	ldr	r1, [r2, #0]
 8009908:	428b      	cmp	r3, r1
 800990a:	bf88      	it	hi
 800990c:	6013      	strhi	r3, [r2, #0]
 800990e:	e032      	b.n	8009976 <_malloc_r+0x3a2>
 8009910:	6810      	ldr	r0, [r2, #0]
 8009912:	3001      	adds	r0, #1
 8009914:	bf1b      	ittet	ne
 8009916:	eba8 0303 	subne.w	r3, r8, r3
 800991a:	4473      	addne	r3, lr
 800991c:	f8c2 8000 	streq.w	r8, [r2]
 8009920:	f8ca 3000 	strne.w	r3, [sl]
 8009924:	f018 0007 	ands.w	r0, r8, #7
 8009928:	bf1c      	itt	ne
 800992a:	f1c0 0008 	rsbne	r0, r0, #8
 800992e:	4480      	addne	r8, r0
 8009930:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <_malloc_r+0x408>)
 8009932:	4447      	add	r7, r8
 8009934:	4418      	add	r0, r3
 8009936:	400f      	ands	r7, r1
 8009938:	1bc7      	subs	r7, r0, r7
 800993a:	4639      	mov	r1, r7
 800993c:	4648      	mov	r0, r9
 800993e:	f000 fb3f 	bl	8009fc0 <_sbrk_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	bf08      	it	eq
 8009946:	4640      	moveq	r0, r8
 8009948:	f8da 3000 	ldr.w	r3, [sl]
 800994c:	f8c5 8008 	str.w	r8, [r5, #8]
 8009950:	bf08      	it	eq
 8009952:	2700      	moveq	r7, #0
 8009954:	eba0 0008 	sub.w	r0, r0, r8
 8009958:	443b      	add	r3, r7
 800995a:	4407      	add	r7, r0
 800995c:	f047 0701 	orr.w	r7, r7, #1
 8009960:	45ab      	cmp	fp, r5
 8009962:	f8ca 3000 	str.w	r3, [sl]
 8009966:	f8c8 7004 	str.w	r7, [r8, #4]
 800996a:	d0c4      	beq.n	80098f6 <_malloc_r+0x322>
 800996c:	2e0f      	cmp	r6, #15
 800996e:	d810      	bhi.n	8009992 <_malloc_r+0x3be>
 8009970:	2301      	movs	r3, #1
 8009972:	f8c8 3004 	str.w	r3, [r8, #4]
 8009976:	68ab      	ldr	r3, [r5, #8]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	f022 0203 	bic.w	r2, r2, #3
 800997e:	4294      	cmp	r4, r2
 8009980:	eba2 0304 	sub.w	r3, r2, r4
 8009984:	d801      	bhi.n	800998a <_malloc_r+0x3b6>
 8009986:	2b0f      	cmp	r3, #15
 8009988:	dc1a      	bgt.n	80099c0 <_malloc_r+0x3ec>
 800998a:	4648      	mov	r0, r9
 800998c:	f000 f842 	bl	8009a14 <__malloc_unlock>
 8009990:	e62d      	b.n	80095ee <_malloc_r+0x1a>
 8009992:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009996:	3e0c      	subs	r6, #12
 8009998:	f026 0607 	bic.w	r6, r6, #7
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	4333      	orrs	r3, r6
 80099a2:	f8cb 3004 	str.w	r3, [fp, #4]
 80099a6:	eb0b 0306 	add.w	r3, fp, r6
 80099aa:	2205      	movs	r2, #5
 80099ac:	2e0f      	cmp	r6, #15
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	609a      	str	r2, [r3, #8]
 80099b2:	d9a0      	bls.n	80098f6 <_malloc_r+0x322>
 80099b4:	f10b 0108 	add.w	r1, fp, #8
 80099b8:	4648      	mov	r0, r9
 80099ba:	f7ff fcab 	bl	8009314 <_free_r>
 80099be:	e79a      	b.n	80098f6 <_malloc_r+0x322>
 80099c0:	68ae      	ldr	r6, [r5, #8]
 80099c2:	f044 0201 	orr.w	r2, r4, #1
 80099c6:	4434      	add	r4, r6
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	6072      	str	r2, [r6, #4]
 80099ce:	60ac      	str	r4, [r5, #8]
 80099d0:	6063      	str	r3, [r4, #4]
 80099d2:	e631      	b.n	8009638 <_malloc_r+0x64>
 80099d4:	20000718 	.word	0x20000718
 80099d8:	20000508 	.word	0x20000508
 80099dc:	00001000 	.word	0x00001000
 80099e0:	200006e8 	.word	0x200006e8
 80099e4:	00000fff 	.word	0x00000fff
 80099e8:	20000710 	.word	0x20000710
 80099ec:	20000714 	.word	0x20000714

080099f0 <memcpy>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	1e43      	subs	r3, r0, #1
 80099f4:	440a      	add	r2, r1
 80099f6:	4291      	cmp	r1, r2
 80099f8:	d100      	bne.n	80099fc <memcpy+0xc>
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a04:	e7f7      	b.n	80099f6 <memcpy+0x6>
	...

08009a08 <__malloc_lock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__malloc_lock+0x8>)
 8009a0a:	f7ff bd6d 	b.w	80094e8 <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20000978 	.word	0x20000978

08009a14 <__malloc_unlock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__malloc_unlock+0x8>)
 8009a16:	f7ff bd68 	b.w	80094ea <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20000978 	.word	0x20000978

08009a20 <_Balloc>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a24:	4604      	mov	r4, r0
 8009a26:	460e      	mov	r6, r1
 8009a28:	b93d      	cbnz	r5, 8009a3a <_Balloc+0x1a>
 8009a2a:	2010      	movs	r0, #16
 8009a2c:	f7ff fdca 	bl	80095c4 <malloc>
 8009a30:	6260      	str	r0, [r4, #36]	; 0x24
 8009a32:	6045      	str	r5, [r0, #4]
 8009a34:	6085      	str	r5, [r0, #8]
 8009a36:	6005      	str	r5, [r0, #0]
 8009a38:	60c5      	str	r5, [r0, #12]
 8009a3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a3c:	68eb      	ldr	r3, [r5, #12]
 8009a3e:	b183      	cbz	r3, 8009a62 <_Balloc+0x42>
 8009a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a48:	b9b8      	cbnz	r0, 8009a7a <_Balloc+0x5a>
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	fa01 f506 	lsl.w	r5, r1, r6
 8009a50:	1d6a      	adds	r2, r5, #5
 8009a52:	0092      	lsls	r2, r2, #2
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fb4d 	bl	800a0f4 <_calloc_r>
 8009a5a:	b160      	cbz	r0, 8009a76 <_Balloc+0x56>
 8009a5c:	6046      	str	r6, [r0, #4]
 8009a5e:	6085      	str	r5, [r0, #8]
 8009a60:	e00e      	b.n	8009a80 <_Balloc+0x60>
 8009a62:	2221      	movs	r2, #33	; 0x21
 8009a64:	2104      	movs	r1, #4
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 fb44 	bl	800a0f4 <_calloc_r>
 8009a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6e:	60e8      	str	r0, [r5, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e4      	bne.n	8009a40 <_Balloc+0x20>
 8009a76:	2000      	movs	r0, #0
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	6802      	ldr	r2, [r0, #0]
 8009a7c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a80:	2300      	movs	r3, #0
 8009a82:	6103      	str	r3, [r0, #16]
 8009a84:	60c3      	str	r3, [r0, #12]
 8009a86:	bd70      	pop	{r4, r5, r6, pc}

08009a88 <_Bfree>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	b93c      	cbnz	r4, 8009aa2 <_Bfree+0x1a>
 8009a92:	2010      	movs	r0, #16
 8009a94:	f7ff fd96 	bl	80095c4 <malloc>
 8009a98:	6270      	str	r0, [r6, #36]	; 0x24
 8009a9a:	6044      	str	r4, [r0, #4]
 8009a9c:	6084      	str	r4, [r0, #8]
 8009a9e:	6004      	str	r4, [r0, #0]
 8009aa0:	60c4      	str	r4, [r0, #12]
 8009aa2:	b13d      	cbz	r5, 8009ab4 <_Bfree+0x2c>
 8009aa4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009aa6:	686a      	ldr	r2, [r5, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aae:	6029      	str	r1, [r5, #0]
 8009ab0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}

08009ab6 <__multadd>:
 8009ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aba:	690d      	ldr	r5, [r1, #16]
 8009abc:	461f      	mov	r7, r3
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	f101 0e14 	add.w	lr, r1, #20
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8de 0000 	ldr.w	r0, [lr]
 8009acc:	b281      	uxth	r1, r0
 8009ace:	fb02 7101 	mla	r1, r2, r1, r7
 8009ad2:	0c0f      	lsrs	r7, r1, #16
 8009ad4:	0c00      	lsrs	r0, r0, #16
 8009ad6:	fb02 7000 	mla	r0, r2, r0, r7
 8009ada:	b289      	uxth	r1, r1
 8009adc:	3301      	adds	r3, #1
 8009ade:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ae2:	429d      	cmp	r5, r3
 8009ae4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ae8:	f84e 1b04 	str.w	r1, [lr], #4
 8009aec:	dcec      	bgt.n	8009ac8 <__multadd+0x12>
 8009aee:	b1d7      	cbz	r7, 8009b26 <__multadd+0x70>
 8009af0:	68a3      	ldr	r3, [r4, #8]
 8009af2:	429d      	cmp	r5, r3
 8009af4:	db12      	blt.n	8009b1c <__multadd+0x66>
 8009af6:	6861      	ldr	r1, [r4, #4]
 8009af8:	4630      	mov	r0, r6
 8009afa:	3101      	adds	r1, #1
 8009afc:	f7ff ff90 	bl	8009a20 <_Balloc>
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	3202      	adds	r2, #2
 8009b04:	f104 010c 	add.w	r1, r4, #12
 8009b08:	4680      	mov	r8, r0
 8009b0a:	0092      	lsls	r2, r2, #2
 8009b0c:	300c      	adds	r0, #12
 8009b0e:	f7ff ff6f 	bl	80099f0 <memcpy>
 8009b12:	4621      	mov	r1, r4
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff ffb7 	bl	8009a88 <_Bfree>
 8009b1a:	4644      	mov	r4, r8
 8009b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b20:	3501      	adds	r5, #1
 8009b22:	615f      	str	r7, [r3, #20]
 8009b24:	6125      	str	r5, [r4, #16]
 8009b26:	4620      	mov	r0, r4
 8009b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b2c <__hi0bits>:
 8009b2c:	0c02      	lsrs	r2, r0, #16
 8009b2e:	0412      	lsls	r2, r2, #16
 8009b30:	4603      	mov	r3, r0
 8009b32:	b9b2      	cbnz	r2, 8009b62 <__hi0bits+0x36>
 8009b34:	0403      	lsls	r3, r0, #16
 8009b36:	2010      	movs	r0, #16
 8009b38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b3c:	bf04      	itt	eq
 8009b3e:	021b      	lsleq	r3, r3, #8
 8009b40:	3008      	addeq	r0, #8
 8009b42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b46:	bf04      	itt	eq
 8009b48:	011b      	lsleq	r3, r3, #4
 8009b4a:	3004      	addeq	r0, #4
 8009b4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b50:	bf04      	itt	eq
 8009b52:	009b      	lsleq	r3, r3, #2
 8009b54:	3002      	addeq	r0, #2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	db06      	blt.n	8009b68 <__hi0bits+0x3c>
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	d503      	bpl.n	8009b66 <__hi0bits+0x3a>
 8009b5e:	3001      	adds	r0, #1
 8009b60:	4770      	bx	lr
 8009b62:	2000      	movs	r0, #0
 8009b64:	e7e8      	b.n	8009b38 <__hi0bits+0xc>
 8009b66:	2020      	movs	r0, #32
 8009b68:	4770      	bx	lr

08009b6a <__lo0bits>:
 8009b6a:	6803      	ldr	r3, [r0, #0]
 8009b6c:	f013 0207 	ands.w	r2, r3, #7
 8009b70:	4601      	mov	r1, r0
 8009b72:	d00b      	beq.n	8009b8c <__lo0bits+0x22>
 8009b74:	07da      	lsls	r2, r3, #31
 8009b76:	d423      	bmi.n	8009bc0 <__lo0bits+0x56>
 8009b78:	0798      	lsls	r0, r3, #30
 8009b7a:	bf49      	itett	mi
 8009b7c:	085b      	lsrmi	r3, r3, #1
 8009b7e:	089b      	lsrpl	r3, r3, #2
 8009b80:	2001      	movmi	r0, #1
 8009b82:	600b      	strmi	r3, [r1, #0]
 8009b84:	bf5c      	itt	pl
 8009b86:	600b      	strpl	r3, [r1, #0]
 8009b88:	2002      	movpl	r0, #2
 8009b8a:	4770      	bx	lr
 8009b8c:	b298      	uxth	r0, r3
 8009b8e:	b9a8      	cbnz	r0, 8009bbc <__lo0bits+0x52>
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	2010      	movs	r0, #16
 8009b94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b98:	bf04      	itt	eq
 8009b9a:	0a1b      	lsreq	r3, r3, #8
 8009b9c:	3008      	addeq	r0, #8
 8009b9e:	071a      	lsls	r2, r3, #28
 8009ba0:	bf04      	itt	eq
 8009ba2:	091b      	lsreq	r3, r3, #4
 8009ba4:	3004      	addeq	r0, #4
 8009ba6:	079a      	lsls	r2, r3, #30
 8009ba8:	bf04      	itt	eq
 8009baa:	089b      	lsreq	r3, r3, #2
 8009bac:	3002      	addeq	r0, #2
 8009bae:	07da      	lsls	r2, r3, #31
 8009bb0:	d402      	bmi.n	8009bb8 <__lo0bits+0x4e>
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	d006      	beq.n	8009bc4 <__lo0bits+0x5a>
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	600b      	str	r3, [r1, #0]
 8009bba:	4770      	bx	lr
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	e7e9      	b.n	8009b94 <__lo0bits+0x2a>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	4770      	bx	lr
 8009bc4:	2020      	movs	r0, #32
 8009bc6:	4770      	bx	lr

08009bc8 <__i2b>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	460c      	mov	r4, r1
 8009bcc:	2101      	movs	r1, #1
 8009bce:	f7ff ff27 	bl	8009a20 <_Balloc>
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	6144      	str	r4, [r0, #20]
 8009bd6:	6102      	str	r2, [r0, #16]
 8009bd8:	bd10      	pop	{r4, pc}

08009bda <__multiply>:
 8009bda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bde:	4614      	mov	r4, r2
 8009be0:	690a      	ldr	r2, [r1, #16]
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bfb8      	it	lt
 8009be8:	460b      	movlt	r3, r1
 8009bea:	4689      	mov	r9, r1
 8009bec:	bfbc      	itt	lt
 8009bee:	46a1      	movlt	r9, r4
 8009bf0:	461c      	movlt	r4, r3
 8009bf2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bf6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009bfa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009bfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c02:	eb07 060a 	add.w	r6, r7, sl
 8009c06:	429e      	cmp	r6, r3
 8009c08:	bfc8      	it	gt
 8009c0a:	3101      	addgt	r1, #1
 8009c0c:	f7ff ff08 	bl	8009a20 <_Balloc>
 8009c10:	f100 0514 	add.w	r5, r0, #20
 8009c14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c18:	462b      	mov	r3, r5
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	d316      	bcc.n	8009c4e <__multiply+0x74>
 8009c20:	f104 0214 	add.w	r2, r4, #20
 8009c24:	f109 0114 	add.w	r1, r9, #20
 8009c28:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8009c2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	9c01      	ldr	r4, [sp, #4]
 8009c34:	4294      	cmp	r4, r2
 8009c36:	4613      	mov	r3, r2
 8009c38:	d80c      	bhi.n	8009c54 <__multiply+0x7a>
 8009c3a:	2e00      	cmp	r6, #0
 8009c3c:	dd03      	ble.n	8009c46 <__multiply+0x6c>
 8009c3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d054      	beq.n	8009cf0 <__multiply+0x116>
 8009c46:	6106      	str	r6, [r0, #16]
 8009c48:	b003      	add	sp, #12
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	f843 2b04 	str.w	r2, [r3], #4
 8009c52:	e7e3      	b.n	8009c1c <__multiply+0x42>
 8009c54:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c58:	3204      	adds	r2, #4
 8009c5a:	f1ba 0f00 	cmp.w	sl, #0
 8009c5e:	d020      	beq.n	8009ca2 <__multiply+0xc8>
 8009c60:	46ae      	mov	lr, r5
 8009c62:	4689      	mov	r9, r1
 8009c64:	f04f 0c00 	mov.w	ip, #0
 8009c68:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c6c:	f8be b000 	ldrh.w	fp, [lr]
 8009c70:	b2a3      	uxth	r3, r4
 8009c72:	fb0a b303 	mla	r3, sl, r3, fp
 8009c76:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8009c7a:	f8de 4000 	ldr.w	r4, [lr]
 8009c7e:	4463      	add	r3, ip
 8009c80:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009c84:	fb0a c40b 	mla	r4, sl, fp, ip
 8009c88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c92:	454f      	cmp	r7, r9
 8009c94:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009c98:	f84e 3b04 	str.w	r3, [lr], #4
 8009c9c:	d8e4      	bhi.n	8009c68 <__multiply+0x8e>
 8009c9e:	f8ce c000 	str.w	ip, [lr]
 8009ca2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8009ca6:	f1b9 0f00 	cmp.w	r9, #0
 8009caa:	d01f      	beq.n	8009cec <__multiply+0x112>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	46ae      	mov	lr, r5
 8009cb0:	468c      	mov	ip, r1
 8009cb2:	f04f 0a00 	mov.w	sl, #0
 8009cb6:	f8bc 4000 	ldrh.w	r4, [ip]
 8009cba:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cbe:	fb09 b404 	mla	r4, r9, r4, fp
 8009cc2:	44a2      	add	sl, r4
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8009cca:	f84e 3b04 	str.w	r3, [lr], #4
 8009cce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cd2:	f8be 4000 	ldrh.w	r4, [lr]
 8009cd6:	0c1b      	lsrs	r3, r3, #16
 8009cd8:	fb09 4303 	mla	r3, r9, r3, r4
 8009cdc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8009ce0:	4567      	cmp	r7, ip
 8009ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ce6:	d8e6      	bhi.n	8009cb6 <__multiply+0xdc>
 8009ce8:	f8ce 3000 	str.w	r3, [lr]
 8009cec:	3504      	adds	r5, #4
 8009cee:	e7a0      	b.n	8009c32 <__multiply+0x58>
 8009cf0:	3e01      	subs	r6, #1
 8009cf2:	e7a2      	b.n	8009c3a <__multiply+0x60>

08009cf4 <__pow5mult>:
 8009cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	4615      	mov	r5, r2
 8009cfa:	f012 0203 	ands.w	r2, r2, #3
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	d007      	beq.n	8009d14 <__pow5mult+0x20>
 8009d04:	3a01      	subs	r2, #1
 8009d06:	4c21      	ldr	r4, [pc, #132]	; (8009d8c <__pow5mult+0x98>)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d0e:	f7ff fed2 	bl	8009ab6 <__multadd>
 8009d12:	4607      	mov	r7, r0
 8009d14:	10ad      	asrs	r5, r5, #2
 8009d16:	d035      	beq.n	8009d84 <__pow5mult+0x90>
 8009d18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d1a:	b93c      	cbnz	r4, 8009d2c <__pow5mult+0x38>
 8009d1c:	2010      	movs	r0, #16
 8009d1e:	f7ff fc51 	bl	80095c4 <malloc>
 8009d22:	6270      	str	r0, [r6, #36]	; 0x24
 8009d24:	6044      	str	r4, [r0, #4]
 8009d26:	6084      	str	r4, [r0, #8]
 8009d28:	6004      	str	r4, [r0, #0]
 8009d2a:	60c4      	str	r4, [r0, #12]
 8009d2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d34:	b94c      	cbnz	r4, 8009d4a <__pow5mult+0x56>
 8009d36:	f240 2171 	movw	r1, #625	; 0x271
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff44 	bl	8009bc8 <__i2b>
 8009d40:	2300      	movs	r3, #0
 8009d42:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d46:	4604      	mov	r4, r0
 8009d48:	6003      	str	r3, [r0, #0]
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	07eb      	lsls	r3, r5, #31
 8009d50:	d50a      	bpl.n	8009d68 <__pow5mult+0x74>
 8009d52:	4639      	mov	r1, r7
 8009d54:	4622      	mov	r2, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7ff ff3f 	bl	8009bda <__multiply>
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4681      	mov	r9, r0
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff fe91 	bl	8009a88 <_Bfree>
 8009d66:	464f      	mov	r7, r9
 8009d68:	106d      	asrs	r5, r5, #1
 8009d6a:	d00b      	beq.n	8009d84 <__pow5mult+0x90>
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	b938      	cbnz	r0, 8009d80 <__pow5mult+0x8c>
 8009d70:	4622      	mov	r2, r4
 8009d72:	4621      	mov	r1, r4
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7ff ff30 	bl	8009bda <__multiply>
 8009d7a:	6020      	str	r0, [r4, #0]
 8009d7c:	f8c0 8000 	str.w	r8, [r0]
 8009d80:	4604      	mov	r4, r0
 8009d82:	e7e4      	b.n	8009d4e <__pow5mult+0x5a>
 8009d84:	4638      	mov	r0, r7
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0800ad88 	.word	0x0800ad88

08009d90 <__lshift>:
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	460c      	mov	r4, r1
 8009d96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	6849      	ldr	r1, [r1, #4]
 8009d9e:	eb0a 0903 	add.w	r9, sl, r3
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	4607      	mov	r7, r0
 8009da6:	4616      	mov	r6, r2
 8009da8:	f109 0501 	add.w	r5, r9, #1
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	db31      	blt.n	8009e14 <__lshift+0x84>
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff fe35 	bl	8009a20 <_Balloc>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4680      	mov	r8, r0
 8009dba:	f100 0314 	add.w	r3, r0, #20
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4552      	cmp	r2, sl
 8009dc2:	db2a      	blt.n	8009e1a <__lshift+0x8a>
 8009dc4:	6920      	ldr	r0, [r4, #16]
 8009dc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dca:	f104 0114 	add.w	r1, r4, #20
 8009dce:	f016 021f 	ands.w	r2, r6, #31
 8009dd2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009dd6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009dda:	d022      	beq.n	8009e22 <__lshift+0x92>
 8009ddc:	f1c2 0c20 	rsb	ip, r2, #32
 8009de0:	2000      	movs	r0, #0
 8009de2:	680e      	ldr	r6, [r1, #0]
 8009de4:	4096      	lsls	r6, r2
 8009de6:	4330      	orrs	r0, r6
 8009de8:	f843 0b04 	str.w	r0, [r3], #4
 8009dec:	f851 0b04 	ldr.w	r0, [r1], #4
 8009df0:	458e      	cmp	lr, r1
 8009df2:	fa20 f00c 	lsr.w	r0, r0, ip
 8009df6:	d8f4      	bhi.n	8009de2 <__lshift+0x52>
 8009df8:	6018      	str	r0, [r3, #0]
 8009dfa:	b108      	cbz	r0, 8009e00 <__lshift+0x70>
 8009dfc:	f109 0502 	add.w	r5, r9, #2
 8009e00:	3d01      	subs	r5, #1
 8009e02:	4638      	mov	r0, r7
 8009e04:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e08:	4621      	mov	r1, r4
 8009e0a:	f7ff fe3d 	bl	8009a88 <_Bfree>
 8009e0e:	4640      	mov	r0, r8
 8009e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e14:	3101      	adds	r1, #1
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	e7c8      	b.n	8009dac <__lshift+0x1c>
 8009e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e1e:	3201      	adds	r2, #1
 8009e20:	e7ce      	b.n	8009dc0 <__lshift+0x30>
 8009e22:	3b04      	subs	r3, #4
 8009e24:	f851 2b04 	ldr.w	r2, [r1], #4
 8009e28:	f843 2f04 	str.w	r2, [r3, #4]!
 8009e2c:	458e      	cmp	lr, r1
 8009e2e:	d8f9      	bhi.n	8009e24 <__lshift+0x94>
 8009e30:	e7e6      	b.n	8009e00 <__lshift+0x70>

08009e32 <__mcmp>:
 8009e32:	6903      	ldr	r3, [r0, #16]
 8009e34:	690a      	ldr	r2, [r1, #16]
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	b530      	push	{r4, r5, lr}
 8009e3a:	d10c      	bne.n	8009e56 <__mcmp+0x24>
 8009e3c:	0092      	lsls	r2, r2, #2
 8009e3e:	3014      	adds	r0, #20
 8009e40:	3114      	adds	r1, #20
 8009e42:	1884      	adds	r4, r0, r2
 8009e44:	4411      	add	r1, r2
 8009e46:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e4a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e4e:	4295      	cmp	r5, r2
 8009e50:	d003      	beq.n	8009e5a <__mcmp+0x28>
 8009e52:	d305      	bcc.n	8009e60 <__mcmp+0x2e>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4618      	mov	r0, r3
 8009e58:	bd30      	pop	{r4, r5, pc}
 8009e5a:	42a0      	cmp	r0, r4
 8009e5c:	d3f3      	bcc.n	8009e46 <__mcmp+0x14>
 8009e5e:	e7fa      	b.n	8009e56 <__mcmp+0x24>
 8009e60:	f04f 33ff 	mov.w	r3, #4294967295
 8009e64:	e7f7      	b.n	8009e56 <__mcmp+0x24>

08009e66 <__mdiff>:
 8009e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	4611      	mov	r1, r2
 8009e70:	4628      	mov	r0, r5
 8009e72:	4614      	mov	r4, r2
 8009e74:	f7ff ffdd 	bl	8009e32 <__mcmp>
 8009e78:	1e06      	subs	r6, r0, #0
 8009e7a:	d108      	bne.n	8009e8e <__mdiff+0x28>
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff fdce 	bl	8009a20 <_Balloc>
 8009e84:	2301      	movs	r3, #1
 8009e86:	6103      	str	r3, [r0, #16]
 8009e88:	6146      	str	r6, [r0, #20]
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	bfa4      	itt	ge
 8009e90:	4623      	movge	r3, r4
 8009e92:	462c      	movge	r4, r5
 8009e94:	4638      	mov	r0, r7
 8009e96:	6861      	ldr	r1, [r4, #4]
 8009e98:	bfa6      	itte	ge
 8009e9a:	461d      	movge	r5, r3
 8009e9c:	2600      	movge	r6, #0
 8009e9e:	2601      	movlt	r6, #1
 8009ea0:	f7ff fdbe 	bl	8009a20 <_Balloc>
 8009ea4:	692b      	ldr	r3, [r5, #16]
 8009ea6:	60c6      	str	r6, [r0, #12]
 8009ea8:	6926      	ldr	r6, [r4, #16]
 8009eaa:	f105 0914 	add.w	r9, r5, #20
 8009eae:	f104 0214 	add.w	r2, r4, #20
 8009eb2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009eb6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009eba:	f100 0514 	add.w	r5, r0, #20
 8009ebe:	f04f 0c00 	mov.w	ip, #0
 8009ec2:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ec6:	f859 4b04 	ldr.w	r4, [r9], #4
 8009eca:	fa1c f18a 	uxtah	r1, ip, sl
 8009ece:	b2a3      	uxth	r3, r4
 8009ed0:	1ac9      	subs	r1, r1, r3
 8009ed2:	0c23      	lsrs	r3, r4, #16
 8009ed4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009ed8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009edc:	b289      	uxth	r1, r1
 8009ede:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ee2:	45c8      	cmp	r8, r9
 8009ee4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ee8:	4696      	mov	lr, r2
 8009eea:	f845 3b04 	str.w	r3, [r5], #4
 8009eee:	d8e8      	bhi.n	8009ec2 <__mdiff+0x5c>
 8009ef0:	45be      	cmp	lr, r7
 8009ef2:	d305      	bcc.n	8009f00 <__mdiff+0x9a>
 8009ef4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009ef8:	b18b      	cbz	r3, 8009f1e <__mdiff+0xb8>
 8009efa:	6106      	str	r6, [r0, #16]
 8009efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f00:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009f04:	fa1c f381 	uxtah	r3, ip, r1
 8009f08:	141a      	asrs	r2, r3, #16
 8009f0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f18:	f845 3b04 	str.w	r3, [r5], #4
 8009f1c:	e7e8      	b.n	8009ef0 <__mdiff+0x8a>
 8009f1e:	3e01      	subs	r6, #1
 8009f20:	e7e8      	b.n	8009ef4 <__mdiff+0x8e>

08009f22 <__d2b>:
 8009f22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f26:	460e      	mov	r6, r1
 8009f28:	2101      	movs	r1, #1
 8009f2a:	ec59 8b10 	vmov	r8, r9, d0
 8009f2e:	4615      	mov	r5, r2
 8009f30:	f7ff fd76 	bl	8009a20 <_Balloc>
 8009f34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009f38:	4607      	mov	r7, r0
 8009f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f3e:	bb34      	cbnz	r4, 8009f8e <__d2b+0x6c>
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	f1b8 0f00 	cmp.w	r8, #0
 8009f46:	d027      	beq.n	8009f98 <__d2b+0x76>
 8009f48:	a802      	add	r0, sp, #8
 8009f4a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009f4e:	f7ff fe0c 	bl	8009b6a <__lo0bits>
 8009f52:	9900      	ldr	r1, [sp, #0]
 8009f54:	b1f0      	cbz	r0, 8009f94 <__d2b+0x72>
 8009f56:	9a01      	ldr	r2, [sp, #4]
 8009f58:	f1c0 0320 	rsb	r3, r0, #32
 8009f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f60:	430b      	orrs	r3, r1
 8009f62:	40c2      	lsrs	r2, r0
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	9201      	str	r2, [sp, #4]
 8009f68:	9b01      	ldr	r3, [sp, #4]
 8009f6a:	61bb      	str	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	bf14      	ite	ne
 8009f70:	2102      	movne	r1, #2
 8009f72:	2101      	moveq	r1, #1
 8009f74:	6139      	str	r1, [r7, #16]
 8009f76:	b1c4      	cbz	r4, 8009faa <__d2b+0x88>
 8009f78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f7c:	4404      	add	r4, r0
 8009f7e:	6034      	str	r4, [r6, #0]
 8009f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f84:	6028      	str	r0, [r5, #0]
 8009f86:	4638      	mov	r0, r7
 8009f88:	b003      	add	sp, #12
 8009f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f92:	e7d5      	b.n	8009f40 <__d2b+0x1e>
 8009f94:	6179      	str	r1, [r7, #20]
 8009f96:	e7e7      	b.n	8009f68 <__d2b+0x46>
 8009f98:	a801      	add	r0, sp, #4
 8009f9a:	f7ff fde6 	bl	8009b6a <__lo0bits>
 8009f9e:	9b01      	ldr	r3, [sp, #4]
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	6139      	str	r1, [r7, #16]
 8009fa6:	3020      	adds	r0, #32
 8009fa8:	e7e5      	b.n	8009f76 <__d2b+0x54>
 8009faa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fb2:	6030      	str	r0, [r6, #0]
 8009fb4:	6918      	ldr	r0, [r3, #16]
 8009fb6:	f7ff fdb9 	bl	8009b2c <__hi0bits>
 8009fba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fbe:	e7e1      	b.n	8009f84 <__d2b+0x62>

08009fc0 <_sbrk_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4c06      	ldr	r4, [pc, #24]	; (8009fdc <_sbrk_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	f7fc fdd8 	bl	8006b80 <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_sbrk_r+0x1a>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_sbrk_r+0x1a>
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20000980 	.word	0x20000980

08009fe0 <__sread>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe8:	f000 fb54 	bl	800a694 <_read_r>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	bfab      	itete	ge
 8009ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ff4:	181b      	addge	r3, r3, r0
 8009ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ffa:	bfac      	ite	ge
 8009ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ffe:	81a3      	strhlt	r3, [r4, #12]
 800a000:	bd10      	pop	{r4, pc}

0800a002 <__swrite>:
 800a002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a006:	461f      	mov	r7, r3
 800a008:	898b      	ldrh	r3, [r1, #12]
 800a00a:	05db      	lsls	r3, r3, #23
 800a00c:	4605      	mov	r5, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	4616      	mov	r6, r2
 800a012:	d505      	bpl.n	800a020 <__swrite+0x1e>
 800a014:	2302      	movs	r3, #2
 800a016:	2200      	movs	r2, #0
 800a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01c:	f000 fafc 	bl	800a618 <_lseek_r>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	4632      	mov	r2, r6
 800a02e:	463b      	mov	r3, r7
 800a030:	4628      	mov	r0, r5
 800a032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a036:	f000 b84b 	b.w	800a0d0 <_write_r>

0800a03a <__sseek>:
 800a03a:	b510      	push	{r4, lr}
 800a03c:	460c      	mov	r4, r1
 800a03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a042:	f000 fae9 	bl	800a618 <_lseek_r>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	bf15      	itete	ne
 800a04c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a04e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a056:	81a3      	strheq	r3, [r4, #12]
 800a058:	bf18      	it	ne
 800a05a:	81a3      	strhne	r3, [r4, #12]
 800a05c:	bd10      	pop	{r4, pc}

0800a05e <__sclose>:
 800a05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a062:	f000 b875 	b.w	800a150 <_close_r>

0800a066 <__sprint_r>:
 800a066:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	6893      	ldr	r3, [r2, #8]
 800a06c:	4680      	mov	r8, r0
 800a06e:	460f      	mov	r7, r1
 800a070:	4614      	mov	r4, r2
 800a072:	b91b      	cbnz	r3, 800a07c <__sprint_r+0x16>
 800a074:	6053      	str	r3, [r2, #4]
 800a076:	4618      	mov	r0, r3
 800a078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a07e:	049d      	lsls	r5, r3, #18
 800a080:	d523      	bpl.n	800a0ca <__sprint_r+0x64>
 800a082:	6815      	ldr	r5, [r2, #0]
 800a084:	68a0      	ldr	r0, [r4, #8]
 800a086:	3508      	adds	r5, #8
 800a088:	b920      	cbnz	r0, 800a094 <__sprint_r+0x2e>
 800a08a:	2300      	movs	r3, #0
 800a08c:	60a3      	str	r3, [r4, #8]
 800a08e:	6063      	str	r3, [r4, #4]
 800a090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800a098:	f855 bc08 	ldr.w	fp, [r5, #-8]
 800a09c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800a0a0:	f04f 0900 	mov.w	r9, #0
 800a0a4:	45ca      	cmp	sl, r9
 800a0a6:	dc05      	bgt.n	800a0b4 <__sprint_r+0x4e>
 800a0a8:	68a3      	ldr	r3, [r4, #8]
 800a0aa:	f026 0603 	bic.w	r6, r6, #3
 800a0ae:	1b9e      	subs	r6, r3, r6
 800a0b0:	60a6      	str	r6, [r4, #8]
 800a0b2:	e7e7      	b.n	800a084 <__sprint_r+0x1e>
 800a0b4:	463a      	mov	r2, r7
 800a0b6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f000 f905 	bl	800a2ca <_fputwc_r>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d0e2      	beq.n	800a08a <__sprint_r+0x24>
 800a0c4:	f109 0901 	add.w	r9, r9, #1
 800a0c8:	e7ec      	b.n	800a0a4 <__sprint_r+0x3e>
 800a0ca:	f000 f939 	bl	800a340 <__sfvwrite_r>
 800a0ce:	e7dc      	b.n	800a08a <__sprint_r+0x24>

0800a0d0 <_write_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4c07      	ldr	r4, [pc, #28]	; (800a0f0 <_write_r+0x20>)
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	6022      	str	r2, [r4, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7fc fd40 	bl	8006b64 <_write>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_write_r+0x1e>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_write_r+0x1e>
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000980 	.word	0x20000980

0800a0f4 <_calloc_r>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	4351      	muls	r1, r2
 800a0f8:	f7ff fa6c 	bl	80095d4 <_malloc_r>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	b198      	cbz	r0, 800a128 <_calloc_r+0x34>
 800a100:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a104:	f022 0203 	bic.w	r2, r2, #3
 800a108:	3a04      	subs	r2, #4
 800a10a:	2a24      	cmp	r2, #36	; 0x24
 800a10c:	d81b      	bhi.n	800a146 <_calloc_r+0x52>
 800a10e:	2a13      	cmp	r2, #19
 800a110:	d917      	bls.n	800a142 <_calloc_r+0x4e>
 800a112:	2100      	movs	r1, #0
 800a114:	2a1b      	cmp	r2, #27
 800a116:	6001      	str	r1, [r0, #0]
 800a118:	6041      	str	r1, [r0, #4]
 800a11a:	d807      	bhi.n	800a12c <_calloc_r+0x38>
 800a11c:	f100 0308 	add.w	r3, r0, #8
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	609a      	str	r2, [r3, #8]
 800a128:	4620      	mov	r0, r4
 800a12a:	bd10      	pop	{r4, pc}
 800a12c:	2a24      	cmp	r2, #36	; 0x24
 800a12e:	6081      	str	r1, [r0, #8]
 800a130:	60c1      	str	r1, [r0, #12]
 800a132:	bf11      	iteee	ne
 800a134:	f100 0310 	addne.w	r3, r0, #16
 800a138:	6101      	streq	r1, [r0, #16]
 800a13a:	f100 0318 	addeq.w	r3, r0, #24
 800a13e:	6141      	streq	r1, [r0, #20]
 800a140:	e7ee      	b.n	800a120 <_calloc_r+0x2c>
 800a142:	4603      	mov	r3, r0
 800a144:	e7ec      	b.n	800a120 <_calloc_r+0x2c>
 800a146:	2100      	movs	r1, #0
 800a148:	f7fc feae 	bl	8006ea8 <memset>
 800a14c:	e7ec      	b.n	800a128 <_calloc_r+0x34>
	...

0800a150 <_close_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4c06      	ldr	r4, [pc, #24]	; (800a16c <_close_r+0x1c>)
 800a154:	2300      	movs	r3, #0
 800a156:	4605      	mov	r5, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	f7fc fd2a 	bl	8006bb4 <_close>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_close_r+0x1a>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	b103      	cbz	r3, 800a16a <_close_r+0x1a>
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20000980 	.word	0x20000980

0800a170 <_fclose_r>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	4605      	mov	r5, r0
 800a174:	460c      	mov	r4, r1
 800a176:	b911      	cbnz	r1, 800a17e <_fclose_r+0xe>
 800a178:	2600      	movs	r6, #0
 800a17a:	4630      	mov	r0, r6
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
 800a17e:	b118      	cbz	r0, 800a188 <_fclose_r+0x18>
 800a180:	6983      	ldr	r3, [r0, #24]
 800a182:	b90b      	cbnz	r3, 800a188 <_fclose_r+0x18>
 800a184:	f7fe fff0 	bl	8009168 <__sinit>
 800a188:	4b2c      	ldr	r3, [pc, #176]	; (800a23c <_fclose_r+0xcc>)
 800a18a:	429c      	cmp	r4, r3
 800a18c:	d114      	bne.n	800a1b8 <_fclose_r+0x48>
 800a18e:	686c      	ldr	r4, [r5, #4]
 800a190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a192:	07d8      	lsls	r0, r3, #31
 800a194:	d405      	bmi.n	800a1a2 <_fclose_r+0x32>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	0599      	lsls	r1, r3, #22
 800a19a:	d402      	bmi.n	800a1a2 <_fclose_r+0x32>
 800a19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19e:	f7ff f9a3 	bl	80094e8 <__retarget_lock_acquire_recursive>
 800a1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a6:	b98b      	cbnz	r3, 800a1cc <_fclose_r+0x5c>
 800a1a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800a1aa:	f016 0601 	ands.w	r6, r6, #1
 800a1ae:	d1e3      	bne.n	800a178 <_fclose_r+0x8>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b2:	f7ff f99a 	bl	80094ea <__retarget_lock_release_recursive>
 800a1b6:	e7e0      	b.n	800a17a <_fclose_r+0xa>
 800a1b8:	4b21      	ldr	r3, [pc, #132]	; (800a240 <_fclose_r+0xd0>)
 800a1ba:	429c      	cmp	r4, r3
 800a1bc:	d101      	bne.n	800a1c2 <_fclose_r+0x52>
 800a1be:	68ac      	ldr	r4, [r5, #8]
 800a1c0:	e7e6      	b.n	800a190 <_fclose_r+0x20>
 800a1c2:	4b20      	ldr	r3, [pc, #128]	; (800a244 <_fclose_r+0xd4>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	bf08      	it	eq
 800a1c8:	68ec      	ldreq	r4, [r5, #12]
 800a1ca:	e7e1      	b.n	800a190 <_fclose_r+0x20>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f7fe fea4 	bl	8008f1c <__sflush_r>
 800a1d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	b133      	cbz	r3, 800a1e8 <_fclose_r+0x78>
 800a1da:	6a21      	ldr	r1, [r4, #32]
 800a1dc:	4628      	mov	r0, r5
 800a1de:	4798      	blx	r3
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	bfb8      	it	lt
 800a1e4:	f04f 36ff 	movlt.w	r6, #4294967295
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	061a      	lsls	r2, r3, #24
 800a1ec:	d503      	bpl.n	800a1f6 <_fclose_r+0x86>
 800a1ee:	6921      	ldr	r1, [r4, #16]
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f7ff f88f 	bl	8009314 <_free_r>
 800a1f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1f8:	b141      	cbz	r1, 800a20c <_fclose_r+0x9c>
 800a1fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1fe:	4299      	cmp	r1, r3
 800a200:	d002      	beq.n	800a208 <_fclose_r+0x98>
 800a202:	4628      	mov	r0, r5
 800a204:	f7ff f886 	bl	8009314 <_free_r>
 800a208:	2300      	movs	r3, #0
 800a20a:	6363      	str	r3, [r4, #52]	; 0x34
 800a20c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a20e:	b121      	cbz	r1, 800a21a <_fclose_r+0xaa>
 800a210:	4628      	mov	r0, r5
 800a212:	f7ff f87f 	bl	8009314 <_free_r>
 800a216:	2300      	movs	r3, #0
 800a218:	64a3      	str	r3, [r4, #72]	; 0x48
 800a21a:	f7fe ff8d 	bl	8009138 <__sfp_lock_acquire>
 800a21e:	2300      	movs	r3, #0
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a224:	07db      	lsls	r3, r3, #31
 800a226:	d402      	bmi.n	800a22e <_fclose_r+0xbe>
 800a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22a:	f7ff f95e 	bl	80094ea <__retarget_lock_release_recursive>
 800a22e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a230:	f7ff f959 	bl	80094e6 <__retarget_lock_close_recursive>
 800a234:	f7fe ff86 	bl	8009144 <__sfp_lock_release>
 800a238:	e79f      	b.n	800a17a <_fclose_r+0xa>
 800a23a:	bf00      	nop
 800a23c:	0800ac54 	.word	0x0800ac54
 800a240:	0800ac74 	.word	0x0800ac74
 800a244:	0800ac34 	.word	0x0800ac34

0800a248 <__fputwc>:
 800a248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a24c:	4680      	mov	r8, r0
 800a24e:	460e      	mov	r6, r1
 800a250:	4614      	mov	r4, r2
 800a252:	f000 f9d3 	bl	800a5fc <__locale_mb_cur_max>
 800a256:	2801      	cmp	r0, #1
 800a258:	d11c      	bne.n	800a294 <__fputwc+0x4c>
 800a25a:	1e73      	subs	r3, r6, #1
 800a25c:	2bfe      	cmp	r3, #254	; 0xfe
 800a25e:	d819      	bhi.n	800a294 <__fputwc+0x4c>
 800a260:	f88d 6004 	strb.w	r6, [sp, #4]
 800a264:	4605      	mov	r5, r0
 800a266:	2700      	movs	r7, #0
 800a268:	f10d 0904 	add.w	r9, sp, #4
 800a26c:	42af      	cmp	r7, r5
 800a26e:	d020      	beq.n	800a2b2 <__fputwc+0x6a>
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a276:	3b01      	subs	r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	60a3      	str	r3, [r4, #8]
 800a27c:	da04      	bge.n	800a288 <__fputwc+0x40>
 800a27e:	69a2      	ldr	r2, [r4, #24]
 800a280:	4293      	cmp	r3, r2
 800a282:	db1a      	blt.n	800a2ba <__fputwc+0x72>
 800a284:	290a      	cmp	r1, #10
 800a286:	d018      	beq.n	800a2ba <__fputwc+0x72>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	7019      	strb	r1, [r3, #0]
 800a290:	3701      	adds	r7, #1
 800a292:	e7eb      	b.n	800a26c <__fputwc+0x24>
 800a294:	4632      	mov	r2, r6
 800a296:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a29a:	a901      	add	r1, sp, #4
 800a29c:	4640      	mov	r0, r8
 800a29e:	f000 fbe9 	bl	800aa74 <_wcrtomb_r>
 800a2a2:	1c42      	adds	r2, r0, #1
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	d1de      	bne.n	800a266 <__fputwc+0x1e>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	b003      	add	sp, #12
 800a2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4640      	mov	r0, r8
 800a2be:	f000 fb7b 	bl	800a9b8 <__swbuf_r>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	d1e4      	bne.n	800a290 <__fputwc+0x48>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	e7f3      	b.n	800a2b2 <__fputwc+0x6a>

0800a2ca <_fputwc_r>:
 800a2ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a2cc:	07db      	lsls	r3, r3, #31
 800a2ce:	b570      	push	{r4, r5, r6, lr}
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460e      	mov	r6, r1
 800a2d4:	4614      	mov	r4, r2
 800a2d6:	d405      	bmi.n	800a2e4 <_fputwc_r+0x1a>
 800a2d8:	8993      	ldrh	r3, [r2, #12]
 800a2da:	0598      	lsls	r0, r3, #22
 800a2dc:	d402      	bmi.n	800a2e4 <_fputwc_r+0x1a>
 800a2de:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800a2e0:	f7ff f902 	bl	80094e8 <__retarget_lock_acquire_recursive>
 800a2e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e8:	0499      	lsls	r1, r3, #18
 800a2ea:	d406      	bmi.n	800a2fa <_fputwc_r+0x30>
 800a2ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2f8:	6663      	str	r3, [r4, #100]	; 0x64
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	4631      	mov	r1, r6
 800a300:	f7ff ffa2 	bl	800a248 <__fputwc>
 800a304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a306:	07da      	lsls	r2, r3, #31
 800a308:	4605      	mov	r5, r0
 800a30a:	d405      	bmi.n	800a318 <_fputwc_r+0x4e>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	059b      	lsls	r3, r3, #22
 800a310:	d402      	bmi.n	800a318 <_fputwc_r+0x4e>
 800a312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a314:	f7ff f8e9 	bl	80094ea <__retarget_lock_release_recursive>
 800a318:	4628      	mov	r0, r5
 800a31a:	bd70      	pop	{r4, r5, r6, pc}

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4c07      	ldr	r4, [pc, #28]	; (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4605      	mov	r5, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	f7fc fc46 	bl	8006bba <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	20000980 	.word	0x20000980

0800a340 <__sfvwrite_r>:
 800a340:	6893      	ldr	r3, [r2, #8]
 800a342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a346:	4607      	mov	r7, r0
 800a348:	460c      	mov	r4, r1
 800a34a:	4690      	mov	r8, r2
 800a34c:	b91b      	cbnz	r3, 800a356 <__sfvwrite_r+0x16>
 800a34e:	2000      	movs	r0, #0
 800a350:	b003      	add	sp, #12
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	898b      	ldrh	r3, [r1, #12]
 800a358:	0718      	lsls	r0, r3, #28
 800a35a:	d526      	bpl.n	800a3aa <__sfvwrite_r+0x6a>
 800a35c:	690b      	ldr	r3, [r1, #16]
 800a35e:	b323      	cbz	r3, 800a3aa <__sfvwrite_r+0x6a>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	f8d8 6000 	ldr.w	r6, [r8]
 800a366:	f013 0902 	ands.w	r9, r3, #2
 800a36a:	d02d      	beq.n	800a3c8 <__sfvwrite_r+0x88>
 800a36c:	f04f 0a00 	mov.w	sl, #0
 800a370:	f8df b264 	ldr.w	fp, [pc, #612]	; 800a5d8 <__sfvwrite_r+0x298>
 800a374:	46d1      	mov	r9, sl
 800a376:	f1b9 0f00 	cmp.w	r9, #0
 800a37a:	d01f      	beq.n	800a3bc <__sfvwrite_r+0x7c>
 800a37c:	45d9      	cmp	r9, fp
 800a37e:	464b      	mov	r3, r9
 800a380:	4652      	mov	r2, sl
 800a382:	bf28      	it	cs
 800a384:	465b      	movcs	r3, fp
 800a386:	6a21      	ldr	r1, [r4, #32]
 800a388:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a38a:	4638      	mov	r0, r7
 800a38c:	47a8      	blx	r5
 800a38e:	2800      	cmp	r0, #0
 800a390:	f340 8089 	ble.w	800a4a6 <__sfvwrite_r+0x166>
 800a394:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a398:	4482      	add	sl, r0
 800a39a:	eba9 0900 	sub.w	r9, r9, r0
 800a39e:	1a18      	subs	r0, r3, r0
 800a3a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e6      	bne.n	800a376 <__sfvwrite_r+0x36>
 800a3a8:	e7d1      	b.n	800a34e <__sfvwrite_r+0xe>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	f7fd feeb 	bl	8008188 <__swsetup_r>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0d4      	beq.n	800a360 <__sfvwrite_r+0x20>
 800a3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ba:	e7c9      	b.n	800a350 <__sfvwrite_r+0x10>
 800a3bc:	f8d6 a000 	ldr.w	sl, [r6]
 800a3c0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800a3c4:	3608      	adds	r6, #8
 800a3c6:	e7d6      	b.n	800a376 <__sfvwrite_r+0x36>
 800a3c8:	f013 0301 	ands.w	r3, r3, #1
 800a3cc:	d043      	beq.n	800a456 <__sfvwrite_r+0x116>
 800a3ce:	4648      	mov	r0, r9
 800a3d0:	46ca      	mov	sl, r9
 800a3d2:	46cb      	mov	fp, r9
 800a3d4:	f1bb 0f00 	cmp.w	fp, #0
 800a3d8:	f000 80d9 	beq.w	800a58e <__sfvwrite_r+0x24e>
 800a3dc:	b950      	cbnz	r0, 800a3f4 <__sfvwrite_r+0xb4>
 800a3de:	465a      	mov	r2, fp
 800a3e0:	210a      	movs	r1, #10
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	f7f5 fef4 	bl	80001d0 <memchr>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	f000 80d5 	beq.w	800a598 <__sfvwrite_r+0x258>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	eba0 090a 	sub.w	r9, r0, sl
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	6921      	ldr	r1, [r4, #16]
 800a3f8:	6962      	ldr	r2, [r4, #20]
 800a3fa:	45d9      	cmp	r9, fp
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	bf28      	it	cs
 800a400:	465b      	movcs	r3, fp
 800a402:	4288      	cmp	r0, r1
 800a404:	f240 80cb 	bls.w	800a59e <__sfvwrite_r+0x25e>
 800a408:	68a5      	ldr	r5, [r4, #8]
 800a40a:	4415      	add	r5, r2
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	f340 80c6 	ble.w	800a59e <__sfvwrite_r+0x25e>
 800a412:	4651      	mov	r1, sl
 800a414:	462a      	mov	r2, r5
 800a416:	f000 f923 	bl	800a660 <memmove>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	442b      	add	r3, r5
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	4621      	mov	r1, r4
 800a422:	4638      	mov	r0, r7
 800a424:	f7fe fe0c 	bl	8009040 <_fflush_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d13c      	bne.n	800a4a6 <__sfvwrite_r+0x166>
 800a42c:	ebb9 0905 	subs.w	r9, r9, r5
 800a430:	f040 80cf 	bne.w	800a5d2 <__sfvwrite_r+0x292>
 800a434:	4621      	mov	r1, r4
 800a436:	4638      	mov	r0, r7
 800a438:	f7fe fe02 	bl	8009040 <_fflush_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d132      	bne.n	800a4a6 <__sfvwrite_r+0x166>
 800a440:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a444:	44aa      	add	sl, r5
 800a446:	ebab 0b05 	sub.w	fp, fp, r5
 800a44a:	1b5d      	subs	r5, r3, r5
 800a44c:	f8c8 5008 	str.w	r5, [r8, #8]
 800a450:	2d00      	cmp	r5, #0
 800a452:	d1bf      	bne.n	800a3d4 <__sfvwrite_r+0x94>
 800a454:	e77b      	b.n	800a34e <__sfvwrite_r+0xe>
 800a456:	4699      	mov	r9, r3
 800a458:	469a      	mov	sl, r3
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	d027      	beq.n	800a4b0 <__sfvwrite_r+0x170>
 800a460:	89a2      	ldrh	r2, [r4, #12]
 800a462:	68a5      	ldr	r5, [r4, #8]
 800a464:	0591      	lsls	r1, r2, #22
 800a466:	d565      	bpl.n	800a534 <__sfvwrite_r+0x1f4>
 800a468:	45aa      	cmp	sl, r5
 800a46a:	d33b      	bcc.n	800a4e4 <__sfvwrite_r+0x1a4>
 800a46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a470:	d036      	beq.n	800a4e0 <__sfvwrite_r+0x1a0>
 800a472:	6921      	ldr	r1, [r4, #16]
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	1a5b      	subs	r3, r3, r1
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	6963      	ldr	r3, [r4, #20]
 800a47c:	2002      	movs	r0, #2
 800a47e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a482:	fb93 fbf0 	sdiv	fp, r3, r0
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	1c58      	adds	r0, r3, #1
 800a48a:	4450      	add	r0, sl
 800a48c:	4583      	cmp	fp, r0
 800a48e:	bf38      	it	cc
 800a490:	4683      	movcc	fp, r0
 800a492:	0553      	lsls	r3, r2, #21
 800a494:	d53e      	bpl.n	800a514 <__sfvwrite_r+0x1d4>
 800a496:	4659      	mov	r1, fp
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff f89b 	bl	80095d4 <_malloc_r>
 800a49e:	4605      	mov	r5, r0
 800a4a0:	b950      	cbnz	r0, 800a4b8 <__sfvwrite_r+0x178>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	e782      	b.n	800a3b6 <__sfvwrite_r+0x76>
 800a4b0:	e896 0600 	ldmia.w	r6, {r9, sl}
 800a4b4:	3608      	adds	r6, #8
 800a4b6:	e7d0      	b.n	800a45a <__sfvwrite_r+0x11a>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	6921      	ldr	r1, [r4, #16]
 800a4bc:	f7ff fa98 	bl	80099f0 <memcpy>
 800a4c0:	89a2      	ldrh	r2, [r4, #12]
 800a4c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a4c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4ca:	81a2      	strh	r2, [r4, #12]
 800a4cc:	9b01      	ldr	r3, [sp, #4]
 800a4ce:	6125      	str	r5, [r4, #16]
 800a4d0:	441d      	add	r5, r3
 800a4d2:	ebab 0303 	sub.w	r3, fp, r3
 800a4d6:	6025      	str	r5, [r4, #0]
 800a4d8:	f8c4 b014 	str.w	fp, [r4, #20]
 800a4dc:	4655      	mov	r5, sl
 800a4de:	60a3      	str	r3, [r4, #8]
 800a4e0:	45aa      	cmp	sl, r5
 800a4e2:	d200      	bcs.n	800a4e6 <__sfvwrite_r+0x1a6>
 800a4e4:	4655      	mov	r5, sl
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	6820      	ldr	r0, [r4, #0]
 800a4ec:	f000 f8b8 	bl	800a660 <memmove>
 800a4f0:	68a3      	ldr	r3, [r4, #8]
 800a4f2:	1b5b      	subs	r3, r3, r5
 800a4f4:	60a3      	str	r3, [r4, #8]
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	441d      	add	r5, r3
 800a4fa:	6025      	str	r5, [r4, #0]
 800a4fc:	4655      	mov	r5, sl
 800a4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a502:	44a9      	add	r9, r5
 800a504:	ebaa 0a05 	sub.w	sl, sl, r5
 800a508:	1b5d      	subs	r5, r3, r5
 800a50a:	f8c8 5008 	str.w	r5, [r8, #8]
 800a50e:	2d00      	cmp	r5, #0
 800a510:	d1a3      	bne.n	800a45a <__sfvwrite_r+0x11a>
 800a512:	e71c      	b.n	800a34e <__sfvwrite_r+0xe>
 800a514:	465a      	mov	r2, fp
 800a516:	4638      	mov	r0, r7
 800a518:	f000 f8ce 	bl	800a6b8 <_realloc_r>
 800a51c:	4605      	mov	r5, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	d1d4      	bne.n	800a4cc <__sfvwrite_r+0x18c>
 800a522:	6921      	ldr	r1, [r4, #16]
 800a524:	4638      	mov	r0, r7
 800a526:	f7fe fef5 	bl	8009314 <_free_r>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	e7b6      	b.n	800a4a2 <__sfvwrite_r+0x162>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	4298      	cmp	r0, r3
 800a53a:	d802      	bhi.n	800a542 <__sfvwrite_r+0x202>
 800a53c:	6962      	ldr	r2, [r4, #20]
 800a53e:	4592      	cmp	sl, r2
 800a540:	d215      	bcs.n	800a56e <__sfvwrite_r+0x22e>
 800a542:	4555      	cmp	r5, sl
 800a544:	bf28      	it	cs
 800a546:	4655      	movcs	r5, sl
 800a548:	462a      	mov	r2, r5
 800a54a:	4649      	mov	r1, r9
 800a54c:	f000 f888 	bl	800a660 <memmove>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	1b5b      	subs	r3, r3, r5
 800a556:	442a      	add	r2, r5
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	6022      	str	r2, [r4, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1ce      	bne.n	800a4fe <__sfvwrite_r+0x1be>
 800a560:	4621      	mov	r1, r4
 800a562:	4638      	mov	r0, r7
 800a564:	f7fe fd6c 	bl	8009040 <_fflush_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0c8      	beq.n	800a4fe <__sfvwrite_r+0x1be>
 800a56c:	e79b      	b.n	800a4a6 <__sfvwrite_r+0x166>
 800a56e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a572:	4553      	cmp	r3, sl
 800a574:	bf28      	it	cs
 800a576:	4653      	movcs	r3, sl
 800a578:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a57a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a57e:	6a21      	ldr	r1, [r4, #32]
 800a580:	4353      	muls	r3, r2
 800a582:	4638      	mov	r0, r7
 800a584:	464a      	mov	r2, r9
 800a586:	47a8      	blx	r5
 800a588:	1e05      	subs	r5, r0, #0
 800a58a:	dcb8      	bgt.n	800a4fe <__sfvwrite_r+0x1be>
 800a58c:	e78b      	b.n	800a4a6 <__sfvwrite_r+0x166>
 800a58e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800a592:	2000      	movs	r0, #0
 800a594:	3608      	adds	r6, #8
 800a596:	e71d      	b.n	800a3d4 <__sfvwrite_r+0x94>
 800a598:	f10b 0901 	add.w	r9, fp, #1
 800a59c:	e72a      	b.n	800a3f4 <__sfvwrite_r+0xb4>
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	db09      	blt.n	800a5b6 <__sfvwrite_r+0x276>
 800a5a2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	4652      	mov	r2, sl
 800a5ac:	47a8      	blx	r5
 800a5ae:	1e05      	subs	r5, r0, #0
 800a5b0:	f73f af3c 	bgt.w	800a42c <__sfvwrite_r+0xec>
 800a5b4:	e777      	b.n	800a4a6 <__sfvwrite_r+0x166>
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4651      	mov	r1, sl
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	f000 f850 	bl	800a660 <memmove>
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	68a2      	ldr	r2, [r4, #8]
 800a5c4:	1ad2      	subs	r2, r2, r3
 800a5c6:	60a2      	str	r2, [r4, #8]
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	441a      	add	r2, r3
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	461d      	mov	r5, r3
 800a5d0:	e72c      	b.n	800a42c <__sfvwrite_r+0xec>
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e734      	b.n	800a440 <__sfvwrite_r+0x100>
 800a5d6:	bf00      	nop
 800a5d8:	7ffffc00 	.word	0x7ffffc00

0800a5dc <_isatty_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4c06      	ldr	r4, [pc, #24]	; (800a5f8 <_isatty_r+0x1c>)
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	f7fc faec 	bl	8006bc4 <_isatty>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d102      	bne.n	800a5f6 <_isatty_r+0x1a>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	b103      	cbz	r3, 800a5f6 <_isatty_r+0x1a>
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	20000980 	.word	0x20000980

0800a5fc <__locale_mb_cur_max>:
 800a5fc:	4b04      	ldr	r3, [pc, #16]	; (800a610 <__locale_mb_cur_max+0x14>)
 800a5fe:	4a05      	ldr	r2, [pc, #20]	; (800a614 <__locale_mb_cur_max+0x18>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf08      	it	eq
 800a608:	4613      	moveq	r3, r2
 800a60a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a60e:	4770      	bx	lr
 800a610:	2000000c 	.word	0x2000000c
 800a614:	20000510 	.word	0x20000510

0800a618 <_lseek_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4c07      	ldr	r4, [pc, #28]	; (800a638 <_lseek_r+0x20>)
 800a61c:	4605      	mov	r5, r0
 800a61e:	4608      	mov	r0, r1
 800a620:	4611      	mov	r1, r2
 800a622:	2200      	movs	r2, #0
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7fc face 	bl	8006bc8 <_lseek>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_lseek_r+0x1e>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	b103      	cbz	r3, 800a636 <_lseek_r+0x1e>
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20000980 	.word	0x20000980

0800a63c <__ascii_mbtowc>:
 800a63c:	b082      	sub	sp, #8
 800a63e:	b901      	cbnz	r1, 800a642 <__ascii_mbtowc+0x6>
 800a640:	a901      	add	r1, sp, #4
 800a642:	b142      	cbz	r2, 800a656 <__ascii_mbtowc+0x1a>
 800a644:	b14b      	cbz	r3, 800a65a <__ascii_mbtowc+0x1e>
 800a646:	7813      	ldrb	r3, [r2, #0]
 800a648:	600b      	str	r3, [r1, #0]
 800a64a:	7812      	ldrb	r2, [r2, #0]
 800a64c:	1c10      	adds	r0, r2, #0
 800a64e:	bf18      	it	ne
 800a650:	2001      	movne	r0, #1
 800a652:	b002      	add	sp, #8
 800a654:	4770      	bx	lr
 800a656:	4610      	mov	r0, r2
 800a658:	e7fb      	b.n	800a652 <__ascii_mbtowc+0x16>
 800a65a:	f06f 0001 	mvn.w	r0, #1
 800a65e:	e7f8      	b.n	800a652 <__ascii_mbtowc+0x16>

0800a660 <memmove>:
 800a660:	4288      	cmp	r0, r1
 800a662:	b510      	push	{r4, lr}
 800a664:	eb01 0302 	add.w	r3, r1, r2
 800a668:	d803      	bhi.n	800a672 <memmove+0x12>
 800a66a:	1e42      	subs	r2, r0, #1
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d10c      	bne.n	800a68a <memmove+0x2a>
 800a670:	bd10      	pop	{r4, pc}
 800a672:	4298      	cmp	r0, r3
 800a674:	d2f9      	bcs.n	800a66a <memmove+0xa>
 800a676:	1881      	adds	r1, r0, r2
 800a678:	1ad2      	subs	r2, r2, r3
 800a67a:	42d3      	cmn	r3, r2
 800a67c:	d100      	bne.n	800a680 <memmove+0x20>
 800a67e:	bd10      	pop	{r4, pc}
 800a680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a684:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a688:	e7f7      	b.n	800a67a <memmove+0x1a>
 800a68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a68e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a692:	e7eb      	b.n	800a66c <memmove+0xc>

0800a694 <_read_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4c07      	ldr	r4, [pc, #28]	; (800a6b4 <_read_r+0x20>)
 800a698:	4605      	mov	r5, r0
 800a69a:	4608      	mov	r0, r1
 800a69c:	4611      	mov	r1, r2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	6022      	str	r2, [r4, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f7fc fa50 	bl	8006b48 <_read>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_read_r+0x1e>
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_read_r+0x1e>
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20000980 	.word	0x20000980

0800a6b8 <_realloc_r>:
 800a6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4682      	mov	sl, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	b929      	cbnz	r1, 800a6ce <_realloc_r+0x16>
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	b003      	add	sp, #12
 800a6c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f7fe bf83 	b.w	80095d4 <_malloc_r>
 800a6ce:	9201      	str	r2, [sp, #4]
 800a6d0:	f7ff f99a 	bl	8009a08 <__malloc_lock>
 800a6d4:	9a01      	ldr	r2, [sp, #4]
 800a6d6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a6da:	f102 080b 	add.w	r8, r2, #11
 800a6de:	f1b8 0f16 	cmp.w	r8, #22
 800a6e2:	f1a4 0908 	sub.w	r9, r4, #8
 800a6e6:	f025 0603 	bic.w	r6, r5, #3
 800a6ea:	d90a      	bls.n	800a702 <_realloc_r+0x4a>
 800a6ec:	f038 0807 	bics.w	r8, r8, #7
 800a6f0:	d509      	bpl.n	800a706 <_realloc_r+0x4e>
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	f8ca 3000 	str.w	r3, [sl]
 800a6f8:	2700      	movs	r7, #0
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a702:	f04f 0810 	mov.w	r8, #16
 800a706:	4590      	cmp	r8, r2
 800a708:	d3f3      	bcc.n	800a6f2 <_realloc_r+0x3a>
 800a70a:	45b0      	cmp	r8, r6
 800a70c:	f340 8145 	ble.w	800a99a <_realloc_r+0x2e2>
 800a710:	4ba8      	ldr	r3, [pc, #672]	; (800a9b4 <_realloc_r+0x2fc>)
 800a712:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800a716:	eb09 0106 	add.w	r1, r9, r6
 800a71a:	4571      	cmp	r1, lr
 800a71c:	469b      	mov	fp, r3
 800a71e:	684b      	ldr	r3, [r1, #4]
 800a720:	d005      	beq.n	800a72e <_realloc_r+0x76>
 800a722:	f023 0001 	bic.w	r0, r3, #1
 800a726:	4408      	add	r0, r1
 800a728:	6840      	ldr	r0, [r0, #4]
 800a72a:	07c7      	lsls	r7, r0, #31
 800a72c:	d447      	bmi.n	800a7be <_realloc_r+0x106>
 800a72e:	f023 0303 	bic.w	r3, r3, #3
 800a732:	4571      	cmp	r1, lr
 800a734:	eb06 0703 	add.w	r7, r6, r3
 800a738:	d119      	bne.n	800a76e <_realloc_r+0xb6>
 800a73a:	f108 0010 	add.w	r0, r8, #16
 800a73e:	4287      	cmp	r7, r0
 800a740:	db3f      	blt.n	800a7c2 <_realloc_r+0x10a>
 800a742:	eb09 0308 	add.w	r3, r9, r8
 800a746:	eba7 0708 	sub.w	r7, r7, r8
 800a74a:	f047 0701 	orr.w	r7, r7, #1
 800a74e:	f8cb 3008 	str.w	r3, [fp, #8]
 800a752:	605f      	str	r7, [r3, #4]
 800a754:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	ea43 0308 	orr.w	r3, r3, r8
 800a760:	f844 3c04 	str.w	r3, [r4, #-4]
 800a764:	4650      	mov	r0, sl
 800a766:	f7ff f955 	bl	8009a14 <__malloc_unlock>
 800a76a:	4627      	mov	r7, r4
 800a76c:	e7c5      	b.n	800a6fa <_realloc_r+0x42>
 800a76e:	45b8      	cmp	r8, r7
 800a770:	dc27      	bgt.n	800a7c2 <_realloc_r+0x10a>
 800a772:	68cb      	ldr	r3, [r1, #12]
 800a774:	688a      	ldr	r2, [r1, #8]
 800a776:	60d3      	str	r3, [r2, #12]
 800a778:	609a      	str	r2, [r3, #8]
 800a77a:	eba7 0008 	sub.w	r0, r7, r8
 800a77e:	280f      	cmp	r0, #15
 800a780:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a784:	eb09 0207 	add.w	r2, r9, r7
 800a788:	f240 8109 	bls.w	800a99e <_realloc_r+0x2e6>
 800a78c:	eb09 0108 	add.w	r1, r9, r8
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	ea43 0308 	orr.w	r3, r3, r8
 800a798:	f040 0001 	orr.w	r0, r0, #1
 800a79c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a7a0:	6048      	str	r0, [r1, #4]
 800a7a2:	6853      	ldr	r3, [r2, #4]
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	6053      	str	r3, [r2, #4]
 800a7aa:	3108      	adds	r1, #8
 800a7ac:	4650      	mov	r0, sl
 800a7ae:	f7fe fdb1 	bl	8009314 <_free_r>
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	f7ff f92e 	bl	8009a14 <__malloc_unlock>
 800a7b8:	f109 0708 	add.w	r7, r9, #8
 800a7bc:	e79d      	b.n	800a6fa <_realloc_r+0x42>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	07e8      	lsls	r0, r5, #31
 800a7c4:	f100 8084 	bmi.w	800a8d0 <_realloc_r+0x218>
 800a7c8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a7cc:	eba9 0505 	sub.w	r5, r9, r5
 800a7d0:	6868      	ldr	r0, [r5, #4]
 800a7d2:	f020 0003 	bic.w	r0, r0, #3
 800a7d6:	4430      	add	r0, r6
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	d076      	beq.n	800a8ca <_realloc_r+0x212>
 800a7dc:	4571      	cmp	r1, lr
 800a7de:	d150      	bne.n	800a882 <_realloc_r+0x1ca>
 800a7e0:	4403      	add	r3, r0
 800a7e2:	f108 0110 	add.w	r1, r8, #16
 800a7e6:	428b      	cmp	r3, r1
 800a7e8:	db6f      	blt.n	800a8ca <_realloc_r+0x212>
 800a7ea:	462f      	mov	r7, r5
 800a7ec:	68ea      	ldr	r2, [r5, #12]
 800a7ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a7f2:	60ca      	str	r2, [r1, #12]
 800a7f4:	6091      	str	r1, [r2, #8]
 800a7f6:	1f32      	subs	r2, r6, #4
 800a7f8:	2a24      	cmp	r2, #36	; 0x24
 800a7fa:	d83b      	bhi.n	800a874 <_realloc_r+0x1bc>
 800a7fc:	2a13      	cmp	r2, #19
 800a7fe:	d936      	bls.n	800a86e <_realloc_r+0x1b6>
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	60a9      	str	r1, [r5, #8]
 800a804:	6861      	ldr	r1, [r4, #4]
 800a806:	60e9      	str	r1, [r5, #12]
 800a808:	2a1b      	cmp	r2, #27
 800a80a:	d81c      	bhi.n	800a846 <_realloc_r+0x18e>
 800a80c:	f105 0210 	add.w	r2, r5, #16
 800a810:	f104 0108 	add.w	r1, r4, #8
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	6010      	str	r0, [r2, #0]
 800a818:	6848      	ldr	r0, [r1, #4]
 800a81a:	6050      	str	r0, [r2, #4]
 800a81c:	6889      	ldr	r1, [r1, #8]
 800a81e:	6091      	str	r1, [r2, #8]
 800a820:	eb05 0208 	add.w	r2, r5, r8
 800a824:	eba3 0308 	sub.w	r3, r3, r8
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	f8cb 2008 	str.w	r2, [fp, #8]
 800a830:	6053      	str	r3, [r2, #4]
 800a832:	686b      	ldr	r3, [r5, #4]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	ea43 0308 	orr.w	r3, r3, r8
 800a83c:	606b      	str	r3, [r5, #4]
 800a83e:	4650      	mov	r0, sl
 800a840:	f7ff f8e8 	bl	8009a14 <__malloc_unlock>
 800a844:	e759      	b.n	800a6fa <_realloc_r+0x42>
 800a846:	68a1      	ldr	r1, [r4, #8]
 800a848:	6129      	str	r1, [r5, #16]
 800a84a:	68e1      	ldr	r1, [r4, #12]
 800a84c:	6169      	str	r1, [r5, #20]
 800a84e:	2a24      	cmp	r2, #36	; 0x24
 800a850:	bf01      	itttt	eq
 800a852:	6922      	ldreq	r2, [r4, #16]
 800a854:	61aa      	streq	r2, [r5, #24]
 800a856:	6960      	ldreq	r0, [r4, #20]
 800a858:	61e8      	streq	r0, [r5, #28]
 800a85a:	bf19      	ittee	ne
 800a85c:	f105 0218 	addne.w	r2, r5, #24
 800a860:	f104 0110 	addne.w	r1, r4, #16
 800a864:	f105 0220 	addeq.w	r2, r5, #32
 800a868:	f104 0118 	addeq.w	r1, r4, #24
 800a86c:	e7d2      	b.n	800a814 <_realloc_r+0x15c>
 800a86e:	463a      	mov	r2, r7
 800a870:	4621      	mov	r1, r4
 800a872:	e7cf      	b.n	800a814 <_realloc_r+0x15c>
 800a874:	4621      	mov	r1, r4
 800a876:	4638      	mov	r0, r7
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	f7ff fef1 	bl	800a660 <memmove>
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	e7ce      	b.n	800a820 <_realloc_r+0x168>
 800a882:	18c7      	adds	r7, r0, r3
 800a884:	45b8      	cmp	r8, r7
 800a886:	dc20      	bgt.n	800a8ca <_realloc_r+0x212>
 800a888:	68cb      	ldr	r3, [r1, #12]
 800a88a:	688a      	ldr	r2, [r1, #8]
 800a88c:	60d3      	str	r3, [r2, #12]
 800a88e:	609a      	str	r2, [r3, #8]
 800a890:	4628      	mov	r0, r5
 800a892:	68eb      	ldr	r3, [r5, #12]
 800a894:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a898:	60d3      	str	r3, [r2, #12]
 800a89a:	609a      	str	r2, [r3, #8]
 800a89c:	1f32      	subs	r2, r6, #4
 800a89e:	2a24      	cmp	r2, #36	; 0x24
 800a8a0:	d842      	bhi.n	800a928 <_realloc_r+0x270>
 800a8a2:	2a13      	cmp	r2, #19
 800a8a4:	d93e      	bls.n	800a924 <_realloc_r+0x26c>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	60ab      	str	r3, [r5, #8]
 800a8aa:	6863      	ldr	r3, [r4, #4]
 800a8ac:	60eb      	str	r3, [r5, #12]
 800a8ae:	2a1b      	cmp	r2, #27
 800a8b0:	d824      	bhi.n	800a8fc <_realloc_r+0x244>
 800a8b2:	f105 0010 	add.w	r0, r5, #16
 800a8b6:	f104 0308 	add.w	r3, r4, #8
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	6002      	str	r2, [r0, #0]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	6042      	str	r2, [r0, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	6083      	str	r3, [r0, #8]
 800a8c6:	46a9      	mov	r9, r5
 800a8c8:	e757      	b.n	800a77a <_realloc_r+0xc2>
 800a8ca:	4580      	cmp	r8, r0
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	dddf      	ble.n	800a890 <_realloc_r+0x1d8>
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	f7fe fe7e 	bl	80095d4 <_malloc_r>
 800a8d8:	4607      	mov	r7, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d0af      	beq.n	800a83e <_realloc_r+0x186>
 800a8de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a8e2:	f023 0301 	bic.w	r3, r3, #1
 800a8e6:	f1a0 0208 	sub.w	r2, r0, #8
 800a8ea:	444b      	add	r3, r9
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d11f      	bne.n	800a930 <_realloc_r+0x278>
 800a8f0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a8f4:	f027 0703 	bic.w	r7, r7, #3
 800a8f8:	4437      	add	r7, r6
 800a8fa:	e73e      	b.n	800a77a <_realloc_r+0xc2>
 800a8fc:	68a3      	ldr	r3, [r4, #8]
 800a8fe:	612b      	str	r3, [r5, #16]
 800a900:	68e3      	ldr	r3, [r4, #12]
 800a902:	616b      	str	r3, [r5, #20]
 800a904:	2a24      	cmp	r2, #36	; 0x24
 800a906:	bf01      	itttt	eq
 800a908:	6923      	ldreq	r3, [r4, #16]
 800a90a:	61ab      	streq	r3, [r5, #24]
 800a90c:	6962      	ldreq	r2, [r4, #20]
 800a90e:	61ea      	streq	r2, [r5, #28]
 800a910:	bf19      	ittee	ne
 800a912:	f105 0018 	addne.w	r0, r5, #24
 800a916:	f104 0310 	addne.w	r3, r4, #16
 800a91a:	f105 0020 	addeq.w	r0, r5, #32
 800a91e:	f104 0318 	addeq.w	r3, r4, #24
 800a922:	e7ca      	b.n	800a8ba <_realloc_r+0x202>
 800a924:	4623      	mov	r3, r4
 800a926:	e7c8      	b.n	800a8ba <_realloc_r+0x202>
 800a928:	4621      	mov	r1, r4
 800a92a:	f7ff fe99 	bl	800a660 <memmove>
 800a92e:	e7ca      	b.n	800a8c6 <_realloc_r+0x20e>
 800a930:	1f32      	subs	r2, r6, #4
 800a932:	2a24      	cmp	r2, #36	; 0x24
 800a934:	d82d      	bhi.n	800a992 <_realloc_r+0x2da>
 800a936:	2a13      	cmp	r2, #19
 800a938:	d928      	bls.n	800a98c <_realloc_r+0x2d4>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	6863      	ldr	r3, [r4, #4]
 800a940:	6043      	str	r3, [r0, #4]
 800a942:	2a1b      	cmp	r2, #27
 800a944:	d80e      	bhi.n	800a964 <_realloc_r+0x2ac>
 800a946:	f100 0308 	add.w	r3, r0, #8
 800a94a:	f104 0208 	add.w	r2, r4, #8
 800a94e:	6811      	ldr	r1, [r2, #0]
 800a950:	6019      	str	r1, [r3, #0]
 800a952:	6851      	ldr	r1, [r2, #4]
 800a954:	6059      	str	r1, [r3, #4]
 800a956:	6892      	ldr	r2, [r2, #8]
 800a958:	609a      	str	r2, [r3, #8]
 800a95a:	4621      	mov	r1, r4
 800a95c:	4650      	mov	r0, sl
 800a95e:	f7fe fcd9 	bl	8009314 <_free_r>
 800a962:	e76c      	b.n	800a83e <_realloc_r+0x186>
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	6083      	str	r3, [r0, #8]
 800a968:	68e3      	ldr	r3, [r4, #12]
 800a96a:	60c3      	str	r3, [r0, #12]
 800a96c:	2a24      	cmp	r2, #36	; 0x24
 800a96e:	bf01      	itttt	eq
 800a970:	6923      	ldreq	r3, [r4, #16]
 800a972:	6103      	streq	r3, [r0, #16]
 800a974:	6961      	ldreq	r1, [r4, #20]
 800a976:	6141      	streq	r1, [r0, #20]
 800a978:	bf19      	ittee	ne
 800a97a:	f100 0310 	addne.w	r3, r0, #16
 800a97e:	f104 0210 	addne.w	r2, r4, #16
 800a982:	f100 0318 	addeq.w	r3, r0, #24
 800a986:	f104 0218 	addeq.w	r2, r4, #24
 800a98a:	e7e0      	b.n	800a94e <_realloc_r+0x296>
 800a98c:	4603      	mov	r3, r0
 800a98e:	4622      	mov	r2, r4
 800a990:	e7dd      	b.n	800a94e <_realloc_r+0x296>
 800a992:	4621      	mov	r1, r4
 800a994:	f7ff fe64 	bl	800a660 <memmove>
 800a998:	e7df      	b.n	800a95a <_realloc_r+0x2a2>
 800a99a:	4637      	mov	r7, r6
 800a99c:	e6ed      	b.n	800a77a <_realloc_r+0xc2>
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	431f      	orrs	r7, r3
 800a9a4:	f8c9 7004 	str.w	r7, [r9, #4]
 800a9a8:	6853      	ldr	r3, [r2, #4]
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	6053      	str	r3, [r2, #4]
 800a9b0:	e6ff      	b.n	800a7b2 <_realloc_r+0xfa>
 800a9b2:	bf00      	nop
 800a9b4:	20000100 	.word	0x20000100

0800a9b8 <__swbuf_r>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	460e      	mov	r6, r1
 800a9bc:	4614      	mov	r4, r2
 800a9be:	4605      	mov	r5, r0
 800a9c0:	b118      	cbz	r0, 800a9ca <__swbuf_r+0x12>
 800a9c2:	6983      	ldr	r3, [r0, #24]
 800a9c4:	b90b      	cbnz	r3, 800a9ca <__swbuf_r+0x12>
 800a9c6:	f7fe fbcf 	bl	8009168 <__sinit>
 800a9ca:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <__swbuf_r+0xb0>)
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	d12f      	bne.n	800aa30 <__swbuf_r+0x78>
 800a9d0:	686c      	ldr	r4, [r5, #4]
 800a9d2:	69a3      	ldr	r3, [r4, #24]
 800a9d4:	60a3      	str	r3, [r4, #8]
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	0719      	lsls	r1, r3, #28
 800a9da:	d533      	bpl.n	800aa44 <__swbuf_r+0x8c>
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d030      	beq.n	800aa44 <__swbuf_r+0x8c>
 800a9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e6:	b2f6      	uxtb	r6, r6
 800a9e8:	049a      	lsls	r2, r3, #18
 800a9ea:	4637      	mov	r7, r6
 800a9ec:	d534      	bpl.n	800aa58 <__swbuf_r+0xa0>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	1ac0      	subs	r0, r0, r3
 800a9f4:	6963      	ldr	r3, [r4, #20]
 800a9f6:	4298      	cmp	r0, r3
 800a9f8:	db04      	blt.n	800aa04 <__swbuf_r+0x4c>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f7fe fb1f 	bl	8009040 <_fflush_r>
 800aa02:	bb28      	cbnz	r0, 800aa50 <__swbuf_r+0x98>
 800aa04:	68a3      	ldr	r3, [r4, #8]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	60a3      	str	r3, [r4, #8]
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	6022      	str	r2, [r4, #0]
 800aa10:	701e      	strb	r6, [r3, #0]
 800aa12:	6963      	ldr	r3, [r4, #20]
 800aa14:	3001      	adds	r0, #1
 800aa16:	4298      	cmp	r0, r3
 800aa18:	d004      	beq.n	800aa24 <__swbuf_r+0x6c>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	07db      	lsls	r3, r3, #31
 800aa1e:	d519      	bpl.n	800aa54 <__swbuf_r+0x9c>
 800aa20:	2e0a      	cmp	r6, #10
 800aa22:	d117      	bne.n	800aa54 <__swbuf_r+0x9c>
 800aa24:	4621      	mov	r1, r4
 800aa26:	4628      	mov	r0, r5
 800aa28:	f7fe fb0a 	bl	8009040 <_fflush_r>
 800aa2c:	b190      	cbz	r0, 800aa54 <__swbuf_r+0x9c>
 800aa2e:	e00f      	b.n	800aa50 <__swbuf_r+0x98>
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <__swbuf_r+0xb4>)
 800aa32:	429c      	cmp	r4, r3
 800aa34:	d101      	bne.n	800aa3a <__swbuf_r+0x82>
 800aa36:	68ac      	ldr	r4, [r5, #8]
 800aa38:	e7cb      	b.n	800a9d2 <__swbuf_r+0x1a>
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <__swbuf_r+0xb8>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	bf08      	it	eq
 800aa40:	68ec      	ldreq	r4, [r5, #12]
 800aa42:	e7c6      	b.n	800a9d2 <__swbuf_r+0x1a>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7fd fb9e 	bl	8008188 <__swsetup_r>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d0c8      	beq.n	800a9e2 <__swbuf_r+0x2a>
 800aa50:	f04f 37ff 	mov.w	r7, #4294967295
 800aa54:	4638      	mov	r0, r7
 800aa56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa64:	6663      	str	r3, [r4, #100]	; 0x64
 800aa66:	e7c2      	b.n	800a9ee <__swbuf_r+0x36>
 800aa68:	0800ac54 	.word	0x0800ac54
 800aa6c:	0800ac74 	.word	0x0800ac74
 800aa70:	0800ac34 	.word	0x0800ac34

0800aa74 <_wcrtomb_r>:
 800aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa76:	4605      	mov	r5, r0
 800aa78:	b085      	sub	sp, #20
 800aa7a:	461e      	mov	r6, r3
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	4c0f      	ldr	r4, [pc, #60]	; (800aabc <_wcrtomb_r+0x48>)
 800aa80:	b991      	cbnz	r1, 800aaa8 <_wcrtomb_r+0x34>
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	490e      	ldr	r1, [pc, #56]	; (800aac0 <_wcrtomb_r+0x4c>)
 800aa86:	6a12      	ldr	r2, [r2, #32]
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	bf08      	it	eq
 800aa8c:	460a      	moveq	r2, r1
 800aa8e:	a901      	add	r1, sp, #4
 800aa90:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800aa94:	463a      	mov	r2, r7
 800aa96:	47a0      	blx	r4
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	bf01      	itttt	eq
 800aa9c:	2300      	moveq	r3, #0
 800aa9e:	6033      	streq	r3, [r6, #0]
 800aaa0:	238a      	moveq	r3, #138	; 0x8a
 800aaa2:	602b      	streq	r3, [r5, #0]
 800aaa4:	b005      	add	sp, #20
 800aaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa8:	6824      	ldr	r4, [r4, #0]
 800aaaa:	4f05      	ldr	r7, [pc, #20]	; (800aac0 <_wcrtomb_r+0x4c>)
 800aaac:	6a24      	ldr	r4, [r4, #32]
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	bf08      	it	eq
 800aab2:	463c      	moveq	r4, r7
 800aab4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800aab8:	e7ed      	b.n	800aa96 <_wcrtomb_r+0x22>
 800aaba:	bf00      	nop
 800aabc:	2000000c 	.word	0x2000000c
 800aac0:	20000510 	.word	0x20000510

0800aac4 <__ascii_wctomb>:
 800aac4:	b149      	cbz	r1, 800aada <__ascii_wctomb+0x16>
 800aac6:	2aff      	cmp	r2, #255	; 0xff
 800aac8:	bf85      	ittet	hi
 800aaca:	238a      	movhi	r3, #138	; 0x8a
 800aacc:	6003      	strhi	r3, [r0, #0]
 800aace:	700a      	strbls	r2, [r1, #0]
 800aad0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aad4:	bf98      	it	ls
 800aad6:	2001      	movls	r0, #1
 800aad8:	4770      	bx	lr
 800aada:	4608      	mov	r0, r1
 800aadc:	4770      	bx	lr

0800aade <abort>:
 800aade:	b508      	push	{r3, lr}
 800aae0:	2006      	movs	r0, #6
 800aae2:	f000 f82b 	bl	800ab3c <raise>
 800aae6:	2001      	movs	r0, #1
 800aae8:	f7fc f828 	bl	8006b3c <_exit>

0800aaec <_raise_r>:
 800aaec:	291f      	cmp	r1, #31
 800aaee:	b538      	push	{r3, r4, r5, lr}
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	d904      	bls.n	800ab00 <_raise_r+0x14>
 800aaf6:	2316      	movs	r3, #22
 800aaf8:	6003      	str	r3, [r0, #0]
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab02:	b112      	cbz	r2, 800ab0a <_raise_r+0x1e>
 800ab04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab08:	b94b      	cbnz	r3, 800ab1e <_raise_r+0x32>
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 f830 	bl	800ab70 <_getpid_r>
 800ab10:	462a      	mov	r2, r5
 800ab12:	4601      	mov	r1, r0
 800ab14:	4620      	mov	r0, r4
 800ab16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab1a:	f000 b817 	b.w	800ab4c <_kill_r>
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d00a      	beq.n	800ab38 <_raise_r+0x4c>
 800ab22:	1c59      	adds	r1, r3, #1
 800ab24:	d103      	bne.n	800ab2e <_raise_r+0x42>
 800ab26:	2316      	movs	r3, #22
 800ab28:	6003      	str	r3, [r0, #0]
 800ab2a:	2001      	movs	r0, #1
 800ab2c:	bd38      	pop	{r3, r4, r5, pc}
 800ab2e:	2400      	movs	r4, #0
 800ab30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab34:	4628      	mov	r0, r5
 800ab36:	4798      	blx	r3
 800ab38:	2000      	movs	r0, #0
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}

0800ab3c <raise>:
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <raise+0xc>)
 800ab3e:	4601      	mov	r1, r0
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	f7ff bfd3 	b.w	800aaec <_raise_r>
 800ab46:	bf00      	nop
 800ab48:	2000000c 	.word	0x2000000c

0800ab4c <_kill_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4c07      	ldr	r4, [pc, #28]	; (800ab6c <_kill_r+0x20>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4605      	mov	r5, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	4611      	mov	r1, r2
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	f7fb ffe7 	bl	8006b2c <_kill>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	d102      	bne.n	800ab68 <_kill_r+0x1c>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	b103      	cbz	r3, 800ab68 <_kill_r+0x1c>
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	bd38      	pop	{r3, r4, r5, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000980 	.word	0x20000980

0800ab70 <_getpid_r>:
 800ab70:	f7fb bfda 	b.w	8006b28 <_getpid>

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
